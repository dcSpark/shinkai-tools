{"type":"Deno","content":[{"name":"Eleven Labs Text-to-Speech","tool_router_key":"local:::__official_shinkai:::eleven_labs_text_to_speech","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { v4 as uuid } from \"npm:uuid\";\nimport { writeAll } from \"https://deno.land/std/io/write_all.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n\ntype CONFIG = {\n  ELEVENLABS_API_KEY: string;\n  voice?: 'Aria' | 'Roger' | 'Sarah' | 'Laura' | 'Charlie' | 'George' | 'Callum' | 'River' | 'Liam' | 'Charlotte' | 'Alice' | 'Matilda' | 'Will' | 'Jessica' | 'Eric' | 'Chris' | 'Brian' | 'Daniel' | 'Lily' | 'Bill';\n};\n\ntype INPUTS = {\n  text: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audio_file: string,\n  characters_used: number,\n  characters_remaining: number\n};\n\nconst voiceDictionary = {\n    Aria: '9BWtsMINqrJLrRacOk9x',\n    Roger: 'CwhRBWXzGAHq8TQ4Fs17',\n    Sarah: 'EXAVITQu4vr4xnSDxMaL',\n    Laura: 'FGY2WhTYpPnrIDTdsKH5',\n    Charlie: 'IKne3meq5aSn9XLyUdCD',\n    George: 'JBFqnCBsd6RMkjVDRZzb',\n    Callum: 'N2lVS1w4EtoT3dr4eOWO',\n    River: 'SAz9YHcvj6GT2YYXdXww',\n    Liam: 'TX3LPaxmHKxFdv7VOQHJ',\n    Charlotte: 'XB0fDUnXU5powFXDhCwa',\n    Alice: 'Xb7hH8MSUJpSbSDYk0k2',\n    Matilda: 'XrExE9yKIg1WjnnlVkGX',\n    Will: 'bIHbv24MWmeRgasZH58o',\n    Jessica: 'cgSgspJ2msm6clMCkdW9',\n    Eric: 'cjVigY5qzO86Huf0OWal',\n    Chris: 'iP95p4xoKVk53GoZ742B',\n    Brian: 'nPczCjzI2devNBz1zQrb',\n    Daniel: 'onwK4e9ZLuTAKqWW03F9',\n    Lily: 'pFZP5JQG7iQjIQuC4Bku',\n    Bill: 'pqHfZKP75CvOlQylNhV4'\n}\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const homePath = await getHomePath();\n  const voice = voiceDictionary[config.voice ?? 'Aria'];\n  if (!voice) {\n    throw new Error(`Invalid voice: ${config.voice}. Valid voices are: ${Object.keys(voiceDictionary).join(', ')}`);\n  }\n  if (inputs.fileName && !inputs.fileName.endsWith('.mp3')) {\n    throw new Error(`Invalid file name: ${inputs.fileName}. File name must end with '.mp3'`);\n  }\n  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voice}?output_format=mp3_44100_128`\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'xi-api-key': `${config.ELEVENLABS_API_KEY}`\n    },\n    body: JSON.stringify({ text: inputs.text })\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch audio: ${response.status} ${response.statusText}`);\n  }\n  console.log(`${response.status} ${response.statusText}`);\n\n  const fileName = `${homePath}/${inputs.fileName ?? uuid()+'.mp3'}`\n  const file = await Deno.open(fileName, { write: true, create: true });\n  await writeAll(file, new Uint8Array(await response.arrayBuffer()));\n  file.close();\n  const usageURL = 'https://api.elevenlabs.io/v1/user/subscription'\n  const usageResponse = await fetch(usageURL, {\n    headers: {\n      'xi-api-key': `${config.ELEVENLABS_API_KEY}`\n    }\n  });\n  if (!usageResponse.ok) {\n    throw new Error(`Failed to fetch usage: ${usageResponse.status} ${usageResponse.statusText}`);\n  }\n  const usage = await usageResponse.json();\n  return {\n    audio_file: fileName,\n    characters_used: usage.character_count,\n    characters_remaining: usage.character_limit - usage.character_count\n  };\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"ELEVENLABS_API_KEY","description":"API key for Eleven Labs","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"voice","description":"The voice used for text-to-speech, options include: Aria, Roger, Sarah, Laura, Charlie, George, Callum, River, Liam, Charlotte, Alice, Matilda, Will, Jessica, Eric, Chris, Brian, Daniel, Lily, Bill","required":false,"type":null,"key_value":null}}],"description":"Converts text to speech using Eleven Labs API and saves the audio as an MP3 file.","keywords":["text-to-speech","audio","Eleven Labs","API"],"input_args":{"type":"object","properties":{"fileName":{"type":"string","description":"The name of the file to save the audio as"},"text":{"type":"string","description":"The text to be converted to speech"}},"required":["text"]},"output_arg":{"json":""},"activated":false,"embedding":[0.28360298,-0.092648655,-0.464324,-0.3886313,-0.96890074,0.31176117,-0.05616512,0.12908608,-0.033697363,0.12746105,-0.16563559,1.0335342,-0.196811,-0.32900926,0.04005188,-0.12893955,0.69717956,-0.90385026,-1.8848796,-0.19282654,0.27415287,0.72417456,0.14018355,0.63651407,-0.23123589,0.10306095,-0.04024687,-0.27316502,-0.5560076,-1.8697377,0.5945484,0.7739095,0.57385796,0.25619823,-0.1743589,-0.0023432523,0.225396,0.43437093,-1.2530208,-0.5470591,0.08670606,-0.6023628,-0.18394117,-0.6703134,0.6551321,-0.058831487,0.34664708,0.39964673,1.3230456,0.25651622,-0.02041607,-0.48229674,-0.6166556,-0.11575346,0.038353354,-0.52742994,0.35266116,0.621618,0.13421807,0.34268722,-0.27548653,0.2410728,-3.750611,-0.0626342,1.07817,0.07483603,0.19205026,-0.2899598,-0.009321909,-0.15760136,0.8043623,0.08943723,-0.4002425,-0.05619411,0.36716127,-0.81648093,-0.30141285,0.014769822,0.6507244,-0.5864382,0.6961749,0.4119175,-0.09200448,-0.3939629,-0.2368782,0.72863877,-0.84085107,-0.41311005,-0.14439388,-0.021353092,-0.28683233,-0.8735111,0.5891816,0.3817641,0.13199086,-0.5426605,0.33616823,-0.27893895,0.59394467,3.0421157,0.45268267,-0.1972279,0.23001185,-0.9175542,-0.29528803,-0.6639894,-0.34405857,-0.35832965,0.56850106,0.44638684,0.47782856,-0.7042129,-0.4513345,-0.059502948,0.11797636,0.28939065,-0.71071917,0.55308723,0.055183582,0.5635196,-0.5467056,-0.22679484,-0.57901776,-0.054856993,-0.13211861,0.05945848,-0.46003336,0.42278332,0.6305553,0.63062894,0.3839511,-0.0701969,-0.3039047,-0.03579051,0.43368503,-0.43147767,0.6680863,-1.001846,0.05001939,0.17733872,0.37929016,-1.1591147,0.6199112,0.15633357,0.35598567,0.55634844,-0.6516764,-0.14395317,-0.448911,0.041594204,0.1664071,-0.40126902,-0.22311631,-0.21729197,1.1133983,0.43242943,0.06032767,-0.49617273,-0.92802626,-0.07620952,0.22309263,0.5588806,0.06994246,0.43662447,0.26575568,0.83173335,-0.041384697,0.2026572,0.28235424,0.4513468,-0.2545923,-0.6072775,0.59138983,0.7218768,-0.32502997,-0.8342858,-0.6267592,0.3539742,0.22301494,-0.510901,0.33261123,0.7275051,-0.36205935,0.014308251,0.1768882,-0.011353767,-0.2246967,0.06193725,0.82447475,0.488184,-0.5713289,1.9303677,-0.40472198,-0.061985295,-0.0814631,-0.27015126,0.20492907,0.81735593,0.16933331,-0.30395266,-0.743381,-0.12001641,-0.020954859,-0.11408888,-0.38009635,-0.40234247,-0.49196303,0.46076342,0.14552593,-1.0382404,0.299536,-0.39051095,0.36096728,0.26494083,0.09420185,-0.16464676,-0.45207107,-0.20154232,-0.60125947,0.17666219,0.02819509,-0.2630064,-0.46344697,-0.75686663,-0.5679851,0.5090529,0.0159837,-0.27618217,-0.5431577,-0.76724553,1.153703,1.3766689,1.4971737,1.4704666,0.9856895,-0.0070649907,0.4475729,0.3157482,0.03814751,-0.18033727,-0.07081012,0.35860622,0.19550382,0.1106994,0.6162322,-1.2034628,-0.14649501,-0.416037,-0.57192636,1.4424949,0.5181671,0.097244546,0.5138939,0.0672434,0.8029955,-0.13227776,-1.2880492,-0.12704957,-0.23482937,0.83485353,0.10979321,0.63867843,0.5592564,0.7211054,0.42285824,-0.31846038,-0.5761896,-0.66085863,-0.025745701,-0.05405782,0.4901805,-0.114321396,-0.18978105,-0.2311934,0.7602426,0.06701914,-0.09641371,-0.04281713,-0.36097044,-0.51018274,0.47948736,0.11848721,-0.38285232,0.35981333,-0.2654706,-0.67961127,-0.21320853,-0.3820368,-0.7019404,0.34075952,-0.3343805,-0.3272683,-0.8092791,0.14495373,1.1401693,0.5650767,-0.37808347,0.6147711,0.18538912,-0.67910767,-0.5854627,0.18838322,-0.15962812,-0.14163661,-0.1140221,0.09376434,-0.005014606,-0.351999,0.04088684,0.7298568,0.28218263,0.754388,-0.050800946,0.10900445,0.9435589,-0.061201558,0.2348854,0.14073905,0.24897505,-1.7524743,-0.6332956,-0.49647295,0.44458178,-0.28147665,-0.30065688,0.6034003,-0.6499064,0.051150348,-0.28498423,1.133424,0.40830964,-0.8095244,-0.22184841,0.33881614,0.83537054,0.5575968,0.069690496,-0.25875726,-0.6969728,-0.15572067,0.59482133,1.1179955,0.03228143,0.047281418,0.005597174,0.021929272,-0.4995193,-1.6212239,0.11733979,-0.06803755,-0.7572168,0.78064334,-0.5427568,0.05612318,0.5753286,0.8389634,-0.0704644,-0.5188651,-0.5997608,1.5138636,0.053234696,-0.3349058,0.03123127,0.44574147,-0.37642008,-0.3964734,0.37261936,-1.0179942,-0.13686556,-0.09971552,0.26730958,-0.21178117,0.29977256,-0.1043559,0.61543894,0.34499943,-0.35213488,0.8303821,0.28389156,0.54679626,0.5282108,-0.17928563,0.07002791,0.030796833],"result":{"type":"object","properties":{"audio_file":{"description":"The file path to the generated audio file","type":"string"},"characters_remaining":{"description":"The number of characters remaining in the user's limit","type":"number"},"characters_used":{"description":"The number of characters used in the request","type":"number"}},"required":["audio_file","characters_used","characters_remaining"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}