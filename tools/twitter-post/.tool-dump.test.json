{"type":"Deno","content":[{"name":"X/Twitter Post","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { getAccessToken } from './shinkai-local-support.ts';\n\ntype CONFIG = {};\ntype INPUTS = {\n    text: string;\n    imagePath?: string;\n};\ntype OUTPUT = {\n    data: any;\n};\n\nasync function uploadMedia(bearerToken: string, imagePath: string): Promise<string> {\n  try {\n    const imageData = await Deno.readFile(imagePath);\n    const formData = new FormData();\n    formData.append('media', new Blob([imageData]));\n    formData.append('media_category', 'tweet_image');\n    const url = 'https://upload.twitter.com/1.1/media/upload.json?media_category=tweet_image';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${bearerToken}`,\n        'Content-Type': 'multipart/form-data'\n      },\n      body: formData\n    });\n\n    if (!response.ok) {\n      throw new Error(`Media upload failed: ${response.status} : ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.media_id_string;\n  } catch (error) {\n    console.error('Error uploading media:', error);\n    throw error;\n  }\n}\n\nasync function postTweet(bearerToken: string, text: string, mediaId?: string) {\n  try {\n    const url = 'https://api.x.com/2/tweets';\n    const tweetBody: any = { text };\n    \n    if (mediaId) {\n      tweetBody.media = {\n        media_ids: [mediaId]\n      };\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${bearerToken}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tweetBody)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Server returned ${response.status} : ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    console.log('Tweet posted:', data);\n    return data;\n  } catch (error) {\n    console.error('Error posting tweet:', error);\n    throw error;\n  }\n}\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n    const accessToken = await getAccessToken(\"twitter\");\n    let mediaId: string | undefined;\n    \n    if (inputs.imagePath) {\n      mediaId = await uploadMedia(accessToken, inputs.imagePath);\n    }\n    \n    return { data: await postTweet(accessToken, inputs.text, mediaId) };\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"note","description":"This tool uses OAuth for authentication rather than API keys. For more information on X/Twitter OAuth, visit <https://developer.twitter.com/en/docs/authentication/oauth-2-0>","required":false,"type":null,"key_value":null}}],"description":"Function to post a tweet to Twitter.","keywords":["twitter","X","post","social media"],"input_args":{"type":"object","properties":{"imagePath":{"type":"string","description":"Path to the image to post"},"text":{"type":"string","description":"Message to post"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.29403716,0.044832557,-0.08469936,-0.35968056,-0.36114892,0.1500543,-1.2623606,-0.120988205,0.77075386,-0.37017816,-0.16215977,0.31236896,-0.30071902,0.3916697,0.51260984,-0.26925617,0.1565911,-0.73031396,-2.2529607,0.3637333,-0.033747792,0.9500046,0.15994501,-0.06463124,-0.13542813,-0.711853,0.5164917,-0.1163525,-1.2355633,-1.8434817,-0.11898514,0.5719435,-0.7579833,0.19925621,0.6937078,-0.022717025,-0.29939678,-0.212802,-0.20142816,-0.00940977,-0.3160974,-0.36344567,-0.488033,0.28305736,0.040175598,-0.5271356,-0.14751177,-0.011977948,0.37922505,0.4086144,-0.116112664,0.08803651,-0.1277595,0.4182587,-0.43642327,-0.38452744,-0.5470214,-0.78638524,-0.12039374,0.33566707,0.0909755,0.15059663,-4.0068126,0.16426142,0.10312684,-0.25736755,-0.2150634,0.28892303,0.041667946,0.24898061,0.1710887,0.08684302,-0.6641206,0.06756405,0.21531215,-0.6237618,0.09383549,-0.25304106,0.5338768,0.18887888,0.5709558,0.5616274,0.048796102,0.45828974,-0.2086261,0.96993387,-0.09180916,-0.15910755,0.22782458,0.15715891,-0.34166494,0.06313996,0.5945613,0.02551157,-0.43463486,-0.05245897,-0.18673328,0.3440336,-0.16013819,2.828817,0.43437558,-0.058003634,0.44129792,-0.32551402,-0.3890718,-0.6070893,-0.41931903,-0.3136451,0.1087348,-0.42692527,0.30623603,-0.10108408,-0.3088207,-0.15274543,0.17729248,-0.2072864,-0.35999334,0.52462554,0.12252106,0.8158036,-0.14402361,0.3257716,-1.0713371,-0.36329988,0.04552685,0.48318195,-0.7109811,0.08503812,0.13634577,-0.3798043,0.93941927,-0.430121,-0.4103674,-0.24284483,-0.12722708,0.38766286,-0.16697927,-0.6357969,0.2233465,-0.9514628,0.79898804,-1.7403655,0.80940604,0.19692837,0.56040335,0.41022694,-0.4030076,0.1524046,-0.23498343,0.23190251,0.22551164,0.014363229,0.21516189,0.116403684,0.9374142,0.050432183,-0.23699321,0.27259976,-0.24719287,0.2999139,-0.010708634,0.19320026,0.6767003,-0.5046115,0.19529927,-0.44721785,0.5674852,0.09898978,0.23648186,0.26491278,0.1488132,-0.34925792,-0.48634514,-0.23244023,-0.7486538,-0.13796,-0.1835729,-0.13288403,0.44287878,-0.20751609,-0.046345457,0.77160454,-0.5319636,0.014210813,0.012578398,0.26600286,0.424229,-0.47076228,1.271696,0.9318254,-0.1802139,1.7089572,-0.60506064,-0.36449802,-0.011219963,0.28037578,0.409329,0.23469426,0.24165745,-0.34080726,-0.19740221,-0.3637409,0.18938337,-0.15823334,-0.5443637,0.12141156,0.6097443,0.15696074,-0.012444958,-0.29878366,0.3048162,-1.067024,0.8855849,0.44964424,0.20619304,0.45463777,-0.54304177,0.019705173,0.07023184,0.47007868,-0.36526853,0.8973375,-0.38738865,-0.45887554,0.07250288,-0.33607006,-0.072390646,0.41570777,-0.06413929,-0.8256028,-0.21669593,0.87216514,0.2276835,1.469109,0.719728,0.27727965,-0.06372375,0.5965779,0.4796374,-0.492693,0.0114225,0.44725725,-0.23736861,-0.1501601,0.2233354,-0.46664587,0.10226247,0.14144799,0.22145414,1.9265566,0.35482416,0.4099241,0.620208,0.14880368,0.014006738,-0.032833673,-2.1207407,-0.48620257,0.40425706,0.9946488,0.057273053,0.0040621683,0.7583517,-0.54549575,-0.39540723,-0.17087474,-0.20413722,-0.15396447,-0.11103206,-0.46140593,-0.81673235,0.7299653,0.10985935,-0.09748886,0.27766767,-0.14311706,-0.11788147,-0.1333181,-0.44785416,-0.2857583,-0.47288793,0.06310692,0.40358514,0.056488518,-0.32702568,-0.5429964,-0.12912108,-0.18219498,0.5068749,-0.17450121,0.46725023,-0.56441116,-0.32888287,0.68992764,2.2128265,0.43469727,0.46616668,0.39456323,-0.00037178444,-0.21967159,-0.40239465,-0.1343947,-0.4198726,-0.5920566,-0.9466589,-0.61225766,-0.019645646,-1.2695736,-0.07250983,-0.37078485,0.7908724,0.21941069,0.24580136,-0.21528074,0.6439863,-0.3347888,-0.3839704,0.31610504,0.16832064,-1.7439798,0.45681506,0.4829341,-0.19699293,-0.22535722,0.022284823,0.18957292,0.014113776,0.8748641,-0.3952241,1.6364768,0.38663486,-0.086515926,0.37635702,0.16602093,0.76857793,0.47651473,-0.18389536,-0.13240346,-1.3586533,-0.33946687,0.39183682,1.9236705,0.0838992,0.86140966,-0.03575853,-0.31424043,-0.3715577,-1.3997382,0.31494558,-0.4676181,-0.26953533,0.2994318,-0.3013268,-0.16068,-0.12885399,1.0442792,0.1615046,-0.52198774,0.18565232,1.7399867,0.23042972,-0.14185879,-0.16994257,-0.06412825,-0.17878622,0.07314132,-0.2980649,-0.7692389,-0.440009,0.594003,0.4552023,-0.30977246,-0.3545485,0.26706412,0.33356598,0.23762771,0.32891384,0.9089862,0.5847615,0.29100937,0.60454035,0.17677851,-0.95926327,-0.3022642],"result":{"type":"object","properties":{"data":{"description":"The data returned by the Twitter API","type":"string"}},"required":["data"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[{"name":"twitter","authorizationUrl":"https://twitter.com/i/oauth2/authorize","tokenUrl":"https://api.x.com/2/oauth2/token","clientId":"","clientSecret":"","redirectUrl":"https://secrets.shinkai.com/redirect","version":"2.0","responseType":"code","scopes":["tweet.read","tweet.write","users.read","offline.access"],"pkceType":"plain","refreshToken":"true","requestTokenAuthHeader":null,"requestTokenContentType":null}],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}