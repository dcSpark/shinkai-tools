{"type":"Deno","content":[{"name":"PDF Text Extractor","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { getDocument, GlobalWorkerOptions } from \"npm:pdfjs-dist\";\nimport { getHomePath } from './shinkai-local-support.ts';\n\n/* Configure PDF.js worker source */\nconst workerPath = `${await getHomePath()}/pdf.worker.mjs`\nGlobalWorkerOptions.workerSrc = workerPath;\n\n/**\n * Ensures the local presence of the PDF.js worker file.\n * Downloads it if not present.\n */\nexport async function ensureLocalPdfWorker(\n  localPath = workerPath,\n  remoteUrl = \"https://mozilla.github.io/pdf.js/build/pdf.worker.mjs\",\n): Promise<void> {\n  try {\n    // Check if the worker file already exists\n    await Deno.stat(localPath);\n  } catch (error) {\n    // If the file does not exist, download it\n    if (error instanceof Deno.errors.NotFound) {\n      const response = await fetch(remoteUrl);\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch PDF worker from \"${remoteUrl}\". HTTP status: ${response.status}`,\n        );\n      }\n      const workerScript = (await response.text()).replace(/5\\.[0-9]+\\.[0-9]+/g,'4.10.38');\n      await Deno.writeTextFile(localPath, workerScript);\n    } else {\n      throw error;\n    }\n  }\n}\n\ntype CONFIG = {};\ntype INPUTS = {\n  url: string;\n};\ntype OUTPUT = {\n  text: string;\n};\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { url } = inputs;\n  await ensureLocalPdfWorker();\n\n  // Fetch the PDF as an ArrayBuffer\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch PDF from ${url}: ${response.statusText}`);\n  }\n  const arrayBuffer = await response.arrayBuffer();\n  const fileName = `${await getHomePath()}/${Date.now()}.pdf`;\n  await Deno.writeFile(fileName, new Uint8Array(arrayBuffer));\n\n  // Load the PDF via PDF.js\n  const loadingTask = getDocument(fileName);\n  const pdf = await loadingTask.promise;\n\n  let allText = \"\";\n\n  // Loop through each page and extract text\n  for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {\n    const page = await pdf.getPage(pageNumber);\n    const textContent = await page.getTextContent();\n\n    // Convert text items into one readable string\n    const pageText = textContent.items\n      .map((item) => (item as any).str || \"\")\n      .join(\" \");\n\n    allText += pageText + \"\\n\";\n  }\n\n  // Clean the extracted text\n  let cleanedText = allText;\n\n  // Remove any bracketed content\n  cleanedText = cleanedText.replace(/<[^>]*>/g, \"\");\n\n  // Remove extra whitespace/newlines\n  cleanedText = cleanedText\n    .replace(/\\r\\n|\\r|\\n/g, \" \") // unify newlines\n    .replace(/\\s\\s+/g, \" \")     // collapse multiple spaces\n    .trim();\n\n  return { text: cleanedText };\n}","tools":[],"config":[],"description":"Extracts clean text from PDFs by fetching them using a URL and processing each page.","keywords":["PDF","text extraction","document processing","clean text"],"input_args":{"type":"object","properties":{"url":{"type":"string","description":"The URL from which to download the PDF"}},"required":["url"]},"output_arg":{"json":""},"activated":false,"embedding":[0.47945964,-0.23700993,-0.47378403,-0.057465382,-0.22279604,-0.12223861,-1.1230639,-0.11475053,0.74541473,0.46531838,0.51694936,1.2156814,0.2688599,-0.18265459,0.33492577,0.25326473,-0.1286409,-0.4736299,-1.3660028,0.16435969,0.4826476,1.1054038,-0.029147275,-0.120042056,-0.19137053,0.07229967,-0.57113093,-0.8660484,-1.0607069,-1.5046917,0.69787997,0.9615205,-0.5961742,0.21481651,-0.4109894,-0.28242198,0.09923704,0.55706656,-0.03490965,-0.66321135,-0.25173292,-0.1535235,-0.4215091,0.32743856,0.0505467,0.07832905,0.25013044,-0.073244154,1.000578,1.1703626,-0.2889117,-0.20139183,0.25292692,-0.6145762,0.0624379,-0.5747927,-0.43484053,0.1604801,0.22893755,-0.09156766,-0.6476699,-0.17992005,-3.2483366,0.22395508,-0.0102857,0.22695875,-0.17334092,-0.256657,-0.013276816,-0.27372748,-0.32383868,-0.03247015,-0.12034698,0.41384938,-0.21855193,-0.9302869,0.45622513,0.46993294,0.43154013,-0.84922695,-0.48872268,1.1783546,0.1535941,0.8692298,-0.7461128,0.83071375,-0.318288,-0.33754474,0.28029215,0.21161135,0.23603795,-0.6740048,-0.3721075,0.2867928,-0.29922047,-0.20935722,-0.1906404,0.29045,0.36942235,2.7824428,0.38093752,0.68402666,0.0060620084,-1.0543437,-0.3331795,-0.4817579,-0.12921366,-0.056663133,0.75162816,-0.02287692,0.16215655,-0.7143946,0.11654831,-0.29195252,-0.34575033,-0.5497576,-0.81744367,0.017839245,0.41017166,0.5019059,0.074290454,0.38334262,-0.7775903,-0.9727519,0.068635896,-0.322156,0.10999188,0.20018674,-0.060867205,-0.3740268,0.47457373,0.047109354,-1.4276731,0.62459713,-0.0011225827,0.2045331,0.49232882,-0.5634565,0.4193502,0.073931225,0.37399918,-1.1699952,0.036512308,0.5924703,1.0787078,0.6414732,-0.17488351,-0.4101596,-0.046565823,0.49451753,0.3795374,0.39636675,-0.37013394,-0.27364892,0.41346216,0.17465083,-0.13180883,-0.27416882,-0.6869217,-0.29934427,-0.1020145,-0.33254984,0.7855747,0.73148906,0.22050583,-0.5851999,0.18867424,0.26342043,0.38009018,0.083673164,0.9221886,-0.35348094,0.30922896,0.19955191,-0.45979878,-0.4710347,-0.31295407,-0.29759532,0.25648862,-0.47283697,1.1248506,0.47585166,-0.82232463,-0.4507998,-0.5028675,0.627785,-0.25370643,-0.17599949,0.8313908,1.163051,-0.1905539,1.5743302,-0.8366068,-0.26956382,-0.040773965,-0.24072498,0.16247898,0.44974554,0.295491,0.371358,0.440407,-0.5999873,-0.16847473,0.2110523,0.24442112,0.20421234,0.30744988,0.05782996,-0.49484718,-0.77166307,-0.25432044,-0.15337509,0.642676,0.2052452,-0.03728746,-0.10212844,-0.54335666,0.08711008,-0.99633145,0.32266325,0.18390548,-0.34200042,-0.5443495,-0.4596408,-0.8133612,0.8852522,0.3069781,0.28571784,-0.61774063,0.25977546,0.8810617,1.1341176,1.2376953,1.4547504,1.0669682,-0.015963398,0.04288184,0.27888256,-0.006709229,-0.05953167,0.97049403,-0.16811465,-0.301224,0.2134185,-0.7458089,-0.79833174,0.20366198,0.07021394,0.30120146,1.5970254,0.35381275,0.0038828403,0.20604254,0.8870416,0.1364979,-0.04116855,-2.1388814,0.81902,0.14197981,0.17918526,0.47043157,0.009234674,0.9532021,0.631481,0.17656548,-0.55207527,-1.0226924,-0.7111434,-0.20274663,0.40769127,-0.24745554,0.5606592,-0.04363865,-0.59042144,-0.40475684,0.10571343,-0.041157544,0.03868754,-0.7473661,-0.93195546,0.41732007,0.012626896,-0.029921941,0.052509632,-0.5799607,0.33241904,0.05134074,-0.13331601,-0.37463003,1.1049497,-0.6500301,-0.78297395,-0.78248113,0.8027774,1.7154156,-0.23448098,0.46506178,0.29817477,-0.24554797,0.036774088,0.22859326,0.4214474,-0.7506866,-0.07976587,-0.019717433,-0.8189695,0.42322904,0.20326874,-0.77952564,0.1496072,-1.254951,-0.01809816,0.58362097,-0.07654096,1.0663038,-0.14741933,0.26230007,-0.08383103,-0.22950467,-1.6843671,-0.2404857,0.059247952,0.5115087,-0.31560078,-0.024256248,1.1124059,-0.26453152,-0.65122014,-0.7292276,0.9626517,0.079075396,0.122669354,-0.112001434,-0.3170401,0.86824095,0.021346528,-0.056723334,-0.54286903,-0.54556674,-0.07252997,0.44775808,0.87490493,0.24196117,-0.22965199,0.22662163,0.121628314,-0.16039771,-1.8162062,0.32059038,-0.4994576,-0.8015656,0.86841875,-0.24992001,-0.27929005,0.9513671,0.685477,0.5120755,-0.3736318,-0.8985463,2.191296,-0.23990425,-0.75405693,-0.94436425,-0.5094884,-0.054638296,0.0092007145,0.9539518,-0.24043724,-0.51358104,0.08381957,0.64472187,-0.23832023,0.3657702,0.19757585,0.6835357,0.30170038,0.3355399,0.33831823,0.12829469,0.26122665,0.9386966,0.09574179,-0.3953268,0.3363905],"result":{"type":"object","properties":{"text":{"description":"The extracted and cleaned text from the PDF","type":"string"}},"required":["text"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}