{"type":"Python","content":[{"version":"1.0.0","name":"Webcam Capture Tool","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#     \"requests\",\n#     \"numpy==1.26.4\",\n#     \"opencv-python==4.8.0.76\"\n# ]\n# ///\n\nimport cv2\nimport time\nimport base64\nimport numpy as np\nimport os\nimport platform\nfrom typing import Dict, Any, Optional, List\nfrom shinkai_local_support import get_home_path\n\nclass CONFIG:\n    cameraIndex: Optional[int]\n    format: Optional[str]\n\nclass INPUTS:\n    width: Optional[int]\n    height: Optional[int]\n\nclass OUTPUT:\n    imagePath: str\n    width: int\n    height: int\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    \"\"\"\n    Captures a single frame from a local webcam and saves it to disk.\n    \n    Args:\n        config: Configuration with camera index and output format\n        inputs: Input parameters with width and height\n    Returns:\n        OUTPUT object with image path and dimensions\n    \"\"\"\n    # Set defaults\n    camera_index = getattr(config, 'cameraIndex', 0)\n    img_format = getattr(config, 'format', 'png').lower()\n    if img_format not in ('png', 'jpeg', 'jpg'):\n        img_format = 'png'\n\n    width = getattr(inputs, 'width', 640)\n    height = getattr(inputs, 'height', 480)\n\n    # Determine camera source based on platform\n    if platform.system() == 'Darwin':  # macOS\n        camera_source = camera_index\n    else:  # Linux, Windows\n        camera_source = camera_index\n\n    # Open the camera\n    cap = cv2.VideoCapture(camera_source)\n    if not cap.isOpened():\n        raise RuntimeError(f\"Failed to open webcam (index={camera_index}). Please check if the camera is connected and accessible.\")\n\n    try:\n        # Set resolution\n        cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)\n        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)\n\n        # Let the camera warm up and auto-adjust: grab/discard extra frames\n        for _ in range(15):\n            _, _ = cap.read()\n        \n        # Wait a moment so the auto-exposure has time to adapt\n        time.sleep(0.5)\n\n        # Try to capture the final frame\n        ret, frame = cap.read()\n        if not ret or frame is None:\n            raise RuntimeError(\"Failed to capture frame from webcam. Please check camera permissions and settings.\")\n\n        # Optional gamma correction for better brightness\n        gamma = 1.2  # Adjust this value if needed (>1 brightens, <1 darkens)\n        look_up_table = np.array([((i / 255.0) ** (1.0/gamma)) * 255 for i in range(256)]).astype(\"uint8\")\n        frame = cv2.LUT(frame, look_up_table)\n\n        # Get final dimensions\n        final_height, final_width, _ = frame.shape\n\n        # Get home path for writing file\n        home_path = await get_home_path()\n        \n        # Create filename with timestamp\n        timestamp = int(time.time())\n        filename = f\"webcam_capture_{timestamp}.{img_format}\"\n        file_path = os.path.join(home_path, filename)\n\n        # Encode and write to file\n        encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 95] if img_format.startswith('jp') else []\n        result = cv2.imwrite(file_path, frame, encode_param)\n        if not result:\n            raise RuntimeError(\"Failed to write image to disk. Please check disk permissions and space.\")\n\n        # Create output\n        output = OUTPUT()\n        output.imagePath = file_path\n        output.width = final_width\n        output.height = final_height\n\n        return output\n\n    finally:\n        # Always release the camera\n        cap.release() ","tools":[],"config":[{"BasicConfig":{"key_name":"cameraIndex","description":"Which camera index to capture from. 0 is the default. If you only have one camera, use 0.","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"format","description":"Image format to return (png or jpeg)","required":false,"type":null,"key_value":null}}],"description":"Captures a single frame from a local webcam and returns it as a Base64-encoded image (PNG or JPEG). Example usage with Python + opencv.","keywords":["webcam","capture","camera","image","tools"],"input_args":{"type":"object","properties":{"height":{"type":"number","description":"Requested height of the capture in pixels"},"width":{"type":"number","description":"Requested width of the capture in pixels"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.27379712,0.26049376,-0.35230947,-0.29302117,-0.10621464,-0.5349654,-0.5417513,0.75517696,-0.4969945,0.65751183,-0.30789423,0.17433402,0.17636125,0.43575174,0.670568,0.054246552,0.63392746,0.08001973,-0.90647566,-0.5010661,-0.31318378,0.5481168,0.29406947,0.045135103,-0.017713305,0.02441874,-0.5796472,-0.5321064,-0.9252808,-1.4563847,0.54842556,0.30408326,0.8051824,0.20527339,0.24924281,-0.70230037,0.60842115,0.13760853,-0.2861902,-0.15100609,0.09125818,0.014103839,0.14343482,-0.39153197,0.40941218,0.651247,1.095278,-0.11444907,1.3199065,-0.15644415,-0.8997617,-0.24239947,-0.46697405,-0.61595654,-0.35921368,0.25168264,-0.11143559,-0.7198767,0.042329393,-0.08285898,-0.00532059,-0.21154407,-2.9567618,0.16712904,0.8210316,0.35551888,-0.34491628,-0.3170061,0.10614654,0.2635122,0.1151489,0.35600388,-0.8375333,-0.32915643,0.13519311,-0.61337113,0.5797042,0.5869707,0.6124079,-1.0568949,0.3867774,-0.16757318,0.13950638,-0.11240559,-0.6685093,0.082297936,-0.4506039,-0.04335735,0.58966136,-0.009433348,-0.15059039,-0.08294466,-0.2757996,0.014975268,-1.0442071,-0.62281525,-0.25277603,0.43496248,-0.0154063925,2.9209588,0.57331693,-0.07214462,0.61123854,-1.0820323,0.25136226,0.1686681,0.2629263,-0.16320927,0.18363082,-0.19563757,0.954813,-0.050496917,-0.42412755,-0.05876357,1.0565498,-0.090464056,-0.41057903,-0.22076195,-0.25075862,1.1598536,-0.743368,-0.049782854,-0.30236474,-0.5836887,0.2119485,0.24454819,0.36859792,0.4532916,0.12706575,-0.21152835,0.50551945,-0.089997604,-0.060434278,-0.57503414,0.22246948,0.25690472,-0.3215629,-0.8225809,0.2415621,-0.58153635,0.028594047,-1.2109997,0.80791783,0.33053765,0.23447874,0.6670909,0.10031499,0.6707828,-0.49925447,-0.6944068,-0.008140285,0.13783535,0.108010724,0.33131257,1.0665028,-0.14438477,0.033715107,-0.14159742,-0.54666185,0.5183314,-0.24491923,-0.21096443,-0.60805064,-0.021691576,0.33308408,-0.5941761,0.13776983,-0.15412426,0.36328432,-0.26274556,0.090080194,-0.3321152,0.15022735,-0.09582731,-1.4298995,-0.12416412,-0.54251754,0.48592874,0.10297927,0.24300686,0.6332004,0.91324735,-0.46285722,-0.30612358,-0.33837646,0.00401993,0.26125604,0.2592144,1.2777755,0.59866434,-0.33777264,1.739139,-0.8653948,-0.17962146,0.44914004,-0.37319738,0.27937937,0.7943685,-0.1551325,-0.32191116,-0.15361917,-1.1616547,-0.04915313,-0.3119635,0.14921468,-0.30471095,-0.063692294,0.34165403,-0.23200767,-0.8422212,-0.22974025,-0.06661685,-0.04186012,0.13493758,0.96198213,-0.4636491,-0.06392966,-0.06314513,-0.3667356,0.23913431,0.6735542,0.36499912,0.3559782,-0.705185,0.31587854,-0.011298001,-0.55594873,0.200905,-0.81285,-0.36030203,0.5969428,0.48363015,0.64647084,1.3645763,0.6813938,0.018577382,-0.5642861,0.4198122,-0.100470096,-0.3393436,0.39620128,0.44579488,-0.77883416,-0.17397654,-0.40010133,-1.1514727,0.70087624,-0.4031153,-0.45512664,1.9818423,1.0333647,0.34598285,0.035068817,0.5428559,-0.36247718,0.036625125,-1.8725324,-0.3322178,-0.58493096,0.6738018,0.34977716,0.3832899,0.36700675,0.8587282,-0.37349075,-0.2293991,-1.111259,-0.87323976,-0.3843486,-0.08909749,-0.028981008,0.9424894,0.27043724,0.078666516,0.04492036,0.28622568,1.1465281,0.92100906,-0.6324611,-0.35206804,0.13250948,0.65232915,0.4613898,0.3926838,-0.3684615,-0.60455006,-0.5061419,0.45636082,-0.011778243,0.6005505,-0.25148025,-0.57781523,-0.097161815,0.47526616,2.0038054,0.31181568,0.11255628,0.1600126,-0.47374743,0.5800327,-0.8149504,0.6540199,0.8139898,-0.38312215,-0.0020688623,-0.8017539,1.0972254,-0.09034964,-0.6409544,-0.31634173,-0.10896395,0.36052868,0.53231233,-0.19181669,0.47937512,-0.51685756,-0.07008293,0.45398462,0.21354121,-2.1508012,-0.83400667,0.1826936,-0.07116837,-0.35627174,0.03804703,-0.18172337,-0.05782173,-0.04144332,-0.029018663,0.7330189,-0.029208206,-0.85024726,-0.19102731,0.40377557,0.8024143,0.12593362,-0.0651922,-0.72072625,-0.5795112,0.19787373,0.03859528,0.4882542,-0.610349,-0.021640405,-0.38120666,-0.33003762,-0.35002232,-1.1554772,0.17159352,-0.16470388,-0.3393004,0.36039236,0.24422222,-0.23858413,0.65453523,0.027282,-0.6360172,-0.46574593,-0.7753507,1.7494171,-0.16738962,0.7876539,-0.60587233,-0.15467434,0.29196188,0.8074156,0.4726262,-0.8128184,0.61489314,0.5618386,0.2803262,-0.108210415,0.041652653,0.7103235,0.35145316,0.32308555,-0.31315604,0.8654865,0.8379306,0.5960117,0.22900537,0.5140022,-1.2085196,-0.36025023],"result":{"type":"object","properties":{"height":{"description":"Actual height of the returned frame","type":"number"},"imageBase64":{"description":"The captured image as a Base64-encoded string","type":"string"},"width":{"description":"Actual width of the returned frame","type":"number"}},"required":["imageBase64","width","height"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}