{"type":"Deno","content":[{"name":"mermaid","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import axios from 'npm:axios@1.7.7';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { encodeBase64 } from \"https://deno.land/std@0.224.0/encoding/base64.ts\";\nimport { deflate } from \"https://deno.land/x/compress@v0.4.5/zlib/deflate.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n/**\n * Configuration for the tool.\n */\ntype CONFIG = {\n  /**\n   * How many times to attempt LLM fixes if Kroki fails to parse the Mermaid diagram.\n   */\n  maxRetries?: number;\n};\n\n/**\n * Inputs for the tool: a single textual description from the user.\n */\ntype INPUTS = {\n  description: string;\n};\n\n/**\n * Final output from the tool:\n * - The base64-encoded PNG\n * - The final (valid) Mermaid code that was successfully parsed.\n */\ntype OUTPUT = {\n  pngBase64: string;\n  finalMermaid: string;\n};\n\n/**\n * This function:\n * 1. Takes a textual description and asks an LLM to produce Mermaid code.\n * 2. Sends the Mermaid code to Kroki (https://kroki.io/) to validate and render a PNG.\n * 3. If Kroki fails to parse, it sends the error back to the LLM to refine the Mermaid code.\n * 4. Repeats up to `maxRetries` times. If still invalid, throws an error.\n */\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { description } = inputs;\n  const maxRetries = config.maxRetries ?? 5;\n\n  /**\n   * Attempt to render with Kroki. On success: return { ok: true, data: Buffer }.\n   * On failure: return { ok: false, error: string }.\n   */\n  async function tryKrokiRender(mermaidCode: string) {\n    console.log('Attempting to render with Kroki:', { mermaidCode });\n    \n    // Basic validation before sending to Kroki\n    if (!mermaidCode.trim().startsWith('graph')) {\n      console.log('Basic validation failed: Code does not start with \"graph\"');\n      return { ok: false, error: 'Invalid Mermaid syntax: Must start with \"graph\"' };\n    }\n\n    try {\n      // First deflate the diagram\n      const encoder = new TextEncoder();\n      const compressed = deflate(encoder.encode(mermaidCode.trim()), { level: 9 });\n      // Then base64 encode it\n      const encodedDiagram = encodeBase64(compressed).replace(/\\+/g, '-').replace(/\\//g, '_');\n      console.log('Encoded diagram:', { encodedDiagram });\n      \n      console.log('Sending request to Kroki...');\n      const resp = await axios.get(`https://kroki.io/mermaid/png/${encodedDiagram}`, {\n        responseType: 'arraybuffer',\n        timeout: 30000,\n        headers: {\n          'Accept': 'image/png',\n        },\n        validateStatus: (status) => status === 200,\n      });\n      \n      console.log('Received successful response from Kroki');\n      return { ok: true, data: new Uint8Array(resp.data) };\n    } catch (err: any) {\n      console.log('Error from Kroki:', {\n        status: err.response?.status,\n        headers: err.response?.headers,\n        isAxiosError: err.isAxiosError,\n        message: err.message,\n        data: err.response?.data?.toString()\n      });\n\n      // Handle various error cases\n      if (err.response) {\n        const errorData = err.response.data;\n        let errorMessage = '';\n        \n        try {\n          // Try to parse error as JSON if it's not binary data\n          if (err.response.headers['content-type']?.includes('application/json')) {\n            const jsonError = JSON.parse(errorData.toString());\n            errorMessage = jsonError.error || jsonError.message || String(errorData);\n          } else {\n            errorMessage = errorData.toString();\n          }\n        } catch (parseErr) {\n          console.log('Error parsing error response:', parseErr);\n          errorMessage = errorData.toString();\n        }\n\n        console.log('Formatted error message:', errorMessage);\n        return {\n          ok: false,\n          error: `Kroki error (HTTP ${err.response.status}): ${errorMessage}`,\n        };\n      }\n\n      // Network or other errors\n      return { ok: false, error: `Request failed: ${err.message}` };\n    }\n  }\n\n  /**\n   * Validate Mermaid syntax before sending to Kroki\n   */\n  function validateMermaidSyntax(code: string): { isValid: boolean; error?: string } {\n    console.log('Validating Mermaid syntax for:', { code });\n    \n    const trimmed = code.trim();\n    \n    // Basic syntax checks\n    if (!trimmed.toLowerCase().startsWith('graph')) {\n      console.log('Validation failed: Does not start with \"graph\"');\n      return { isValid: false, error: 'Diagram must start with \"graph\"' };\n    }\n\n    const lines = trimmed.split('\\n').map(line => line.trim()).filter(line => line);\n    console.log('Processing lines:', { lines });\n    \n    const firstLine = lines[0];\n    \n    // Check graph direction\n    if (!firstLine.toLowerCase().match(/^graph\\s+(td|lr)$/)) {\n      console.log('Validation failed: Invalid graph direction:', { firstLine });\n      return { isValid: false, error: 'First line must be \"graph TD\" or \"graph LR\"' };\n    }\n\n    // Check for basic node definitions\n    const nodeLines = lines.slice(1);\n    for (const line of nodeLines) {\n      console.log('Checking node line:', { line });\n      // More lenient regex that allows various amounts of whitespace\n      if (!line.match(/^[A-Za-z0-9]+(?:\\[[^\\]]+\\])?\\s*(?:-->|---|==>)\\s*[A-Za-z0-9]+(?:\\[[^\\]]+\\])?$/)) {\n        console.log('Validation failed: Invalid node definition:', { line });\n        return { isValid: false, error: `Invalid node definition: ${line}` };\n      }\n    }\n\n    console.log('Validation successful');\n    return { isValid: true };\n  }\n\n  /**\n   * LLM prompt to request a new or revised Mermaid code from the LLM.\n   */\n  async function requestMermaid(\n    userDescription: string,\n    priorError?: string,\n    priorCode?: string\n  ): Promise<string> {\n    let prompt = '';\n    if (!priorError) {\n      // initial request\n      prompt = `Create a valid Mermaid.js diagram based on this description: \"${userDescription}\"\n\nRules:\n1. Start with either 'graph TD' (top-down) or 'graph LR' (left-right)\n2. Use simple node names (A, B, C, etc.) with descriptive labels in brackets\n3. Use standard arrows (-->)\n4. Avoid special characters in labels\n5. Return ONLY the Mermaid code, no explanations\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    } else {\n      // revise with specific guidance based on prior error\n      prompt = `The following Mermaid code needs correction:\n\\`\\`\\`\n${priorCode}\n\\`\\`\\`\n\nError received: ${priorError}\n\nPlease provide a corrected version following these rules:\n1. Keep the diagram simple and minimal\n2. Use only basic Mermaid syntax (graph TD/LR, basic nodes, arrows)\n3. Ensure all nodes are properly defined before being referenced\n4. Avoid special characters or complex styling\n5. Return ONLY the corrected Mermaid code\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    }\n    const resp = await shinkaiLlmPromptProcessor({ format: 'text', prompt });\n    \n    // Clean up the response to extract just the Mermaid code\n    let code = resp.message.trim();\n    // Remove any markdown code block markers\n    code = code.replace(/^```mermaid\\n/m, '').replace(/^```\\n/m, '').replace(/```$/m, '');\n    return code.trim();\n  }\n\n  // Main logic:\n  console.log('Starting Mermaid diagram generation for description:', { description });\n  let currentMermaid = await requestMermaid(description, undefined, undefined);\n  console.log('Initial Mermaid code generated:', { currentMermaid });\n\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    console.log(`Attempt ${attempt + 1}/${maxRetries}`);\n    \n    // Validate syntax before sending to Kroki\n    const validation = validateMermaidSyntax(currentMermaid);\n    if (!validation.isValid) {\n      console.log('Validation failed:', validation.error);\n      // If invalid syntax, try to get a new diagram\n      currentMermaid = await requestMermaid(\n        description,\n        `Invalid Mermaid syntax: ${validation.error}`,\n        currentMermaid\n      );\n      console.log('Generated new Mermaid code after validation failure:', { currentMermaid });\n      continue;\n    }\n\n    console.log('Validation passed, attempting to render');\n    const renderResult = await tryKrokiRender(currentMermaid);\n    if (renderResult.ok && renderResult.data) {\n      console.log('Successfully rendered diagram');\n      // Convert Uint8Array to base64 string\n      const pngBase64 = encodeBase64(renderResult.data);\n\n      await Deno.writeFile(await getHomePath() + '/mermaid.png', renderResult.data);\n\n      return {\n        pngBase64,\n        finalMermaid: currentMermaid,\n      };\n    } else {\n      console.log('Render failed:', renderResult.error);\n      // Some error from Kroki. Let's refine\n      const errorMessage = renderResult.error || 'Unknown error';\n      currentMermaid = await requestMermaid(description, errorMessage, currentMermaid);\n      console.log('Generated new Mermaid code after render failure:', { currentMermaid });\n    }\n  }\n\n  console.log('Exhausted all attempts, throwing error');\n  // If we've exhausted attempts, throw an error\n  throw new Error(\n    `Failed to produce a valid Mermaid diagram after ${maxRetries} attempts. Last code:\\n${currentMermaid}`\n  );\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"maxRetries","description":"Maximum number of retries for the tool","required":false,"type":null,"key_value":null}}],"description":"Generate diagrams and flowcharts using Mermaid syntax, it receives a natural language description and returns a PNG image and the final Mermaid code","keywords":["mermaid","diagram","flowchart","visualization","markdown"],"input_args":{"type":"object","properties":{"description":{"type":"string","description":"Mermaid diagram code"}},"required":["description"]},"output_arg":{"json":""},"activated":false,"embedding":[0.63532984,0.4765826,0.24001136,0.2366406,0.0380493,0.18149766,-0.8685765,0.23400173,0.24699557,0.6921685,-0.32161835,0.15313786,0.1675269,0.115161486,0.4659888,0.06979749,0.050871525,-0.11546849,-2.232783,-0.21371636,0.18887702,0.91087353,0.6083093,-0.017149955,-0.39374766,0.25960255,-0.25319502,-0.5328159,-1.4632869,-1.8473032,-0.22766662,0.6065878,-0.26138493,-0.12629698,0.549212,-0.2992563,-0.4696957,0.10992707,0.07487619,0.3654768,0.20267822,-0.3162245,-0.1055275,-0.10281012,0.3749866,0.3300528,0.19670855,0.03375855,0.29111707,0.26823226,-0.99729073,-0.4882526,0.19040653,-0.18033682,-0.5198338,0.3996706,-0.0026121289,-0.9023527,0.5178514,0.44088343,-0.40139812,0.6579364,-3.2009068,0.594276,0.7199179,0.14761293,-0.54989535,0.20164034,-0.5864292,0.1339103,0.29576826,0.17300208,-0.4974079,0.44070294,-0.08818402,-0.32018647,0.46763465,0.15141915,0.7108001,0.16407114,-0.2508809,0.11281702,-0.22175343,-0.004905614,-0.22051051,0.9840163,-0.4595261,-1.0065823,0.32370502,0.11610459,-1.188008,-0.18091676,0.18058309,0.44341493,0.16204351,0.07744405,-0.29846683,-0.46166998,-0.10010689,3.1323924,0.41611326,0.071587056,0.567022,-1.0248476,0.69243634,-0.04730028,0.029566556,-0.3707572,0.3990838,-0.1350366,0.25003,-0.3484124,0.07700316,-0.0035312045,0.45469975,0.28721523,-0.8955876,-0.072499484,-0.136228,0.16956681,-0.342915,0.074195504,-0.33870494,-0.34270394,0.11389123,0.07967161,-0.0148069635,0.37511027,-0.333585,-0.42629263,0.517314,-0.16142236,-0.1030447,0.27261937,-0.22888356,0.039536484,0.34824273,-0.8203842,0.03104689,0.23370239,0.22286217,-1.4719216,0.8121449,0.13478994,0.9092205,1.0125794,-0.7537286,0.03507018,-0.4246385,0.36935818,-0.16054007,0.24050763,0.00010000705,0.10060254,0.8537667,0.61857295,0.036863968,0.007410042,0.15256071,0.30845198,-0.18835463,-0.4860415,0.3694373,0.16803113,-0.20835996,-0.56366444,0.39253688,0.6221414,0.19316249,-0.45994404,-0.068049,0.29424936,-0.11485705,0.07869478,-0.13125423,-0.3588745,0.0795638,-0.25847042,0.47254798,-0.39588493,0.8374202,0.7808921,0.21192938,-0.38596302,0.15878983,0.23375766,-0.08655337,0.35713384,0.3311887,1.0679309,-0.21078944,1.7425452,-0.26943523,-0.12452441,0.873636,0.043501154,0.37901628,0.21976435,-0.40370184,0.25412688,-0.86107373,0.006462585,0.109987125,-0.1396483,-0.9751256,-0.21685536,0.12361644,0.08112014,-0.8420952,-0.18180789,-0.3512819,0.01733157,1.1127179,0.097987756,0.6499593,0.29832798,0.5081273,0.09521419,0.8727776,0.20096673,0.8389073,0.35476473,-0.43592966,-0.64785475,-0.46046647,-0.045224994,-0.42404467,-0.14385995,-0.7224904,-0.6502492,0.55663097,1.6563473,0.58994573,0.7494203,0.4346771,0.16420998,-0.164264,0.36090496,-0.08546741,-0.5520051,0.7978113,0.1254142,-0.07128994,-0.31400946,0.15257287,-1.0156088,-0.3554189,-0.40828,-0.018132312,1.9819434,0.54800534,0.3128691,0.22829631,0.404117,-0.2015768,-0.46569988,-1.8131183,-0.5209999,-0.9373972,0.24508041,-0.13000311,-0.7109578,0.2985594,-0.099306576,-0.46791288,-0.40470576,-0.9512272,-0.29467058,-0.3238611,0.11968046,0.49642563,0.20608005,-0.019061547,0.30559894,-0.23788999,0.15099116,0.5699135,0.039014757,-0.6326418,-0.3869165,0.37508148,0.29790694,-0.1937851,0.1393329,-0.6480547,-0.8948907,-0.24334884,0.51885164,-0.2838089,0.047257252,-0.0023833364,-0.15314138,-0.5010756,0.102616474,1.9227054,0.62023926,-0.17919941,1.0503201,0.17470649,0.037795264,-0.6053215,0.19609576,0.21137866,0.2874709,-0.68565696,0.2505481,0.21762772,-0.832823,-0.8187998,0.3345387,-0.841326,-0.3674864,0.11528827,0.033711597,0.35839432,-0.30625075,0.0020652693,0.6069647,0.04135072,-2.3851774,-0.2670939,0.5682723,0.52959526,-0.54681814,-0.41197076,0.9347688,0.16559243,-0.15316747,-0.30258453,1.0806832,0.10587689,-0.40257582,-0.5886772,0.31353605,0.7761309,-0.19772182,0.6642685,-0.069597945,0.08118009,-0.030809324,0.5678706,1.4009933,-0.018319516,0.6924597,-0.19952224,-0.41039112,-0.84041816,-0.69088846,-0.2201525,-0.42853504,-0.14982364,0.13387477,-0.5648291,-0.14501187,0.24218015,0.783895,-0.35915515,-0.17417967,-0.13862711,1.544391,-0.0013465974,0.056374326,-0.50074995,-0.41779295,0.36988267,0.09426196,0.40017787,-1.2676017,0.026125573,0.45808864,-0.45734718,-0.39990813,0.21465516,0.28087452,0.78654534,0.028570373,0.071584105,0.1842308,0.456553,0.6522096,-0.40957206,-0.32869,-0.2957171,-0.12537211],"result":{"type":"object","properties":{"finalMermaid":{"description":"Final Mermaid code","type":"string"},"pngBase64":{"description":"Base64 encoded image data","type":"string"}},"required":["pngBase64","finalMermaid"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}