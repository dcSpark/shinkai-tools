{"type":"Python","content":[{"version":"1.0.0","name":"Stock Technical Analysis","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#   \"pandas>=2.2.0\",\n#   \"numpy>=1.26.0\",\n#   \"aiohttp>=3.8.0\",\n#   \"requests\",\n#   \"python-dotenv>=0.21.0\",\n#   \"setuptools>=65.0.0\",\n#   \"pandas-ta>=0.3.14b\"\n# ]\n# ///\n\nimport os\nimport aiohttp\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom dotenv import load_dotenv\nfrom typing import Dict, Any, Optional, List\n\n# Ensure numpy nan is available for pandas-ta\nnp.NaN = np.nan\n\nimport pandas_ta as ta\n\n# Load environment variables from .env if present\nload_dotenv()\n\nclass CONFIG:\n    tiingo_api_key: str = \"\"  # If empty, we'll default to TIINGO_API_KEY env var\n\nclass INPUTS:\n    symbol: str\n    lookback_days: int = 365\n\nclass OUTPUT:\n    analysis: dict\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    if not p.symbol or not p.symbol.strip():\n        raise ValueError(\"Missing 'symbol' in parameters\")\n\n    api_key = c.tiingo_api_key.strip() if c.tiingo_api_key else os.getenv(\"TIINGO_API_KEY\", \"\").strip()\n    if not api_key:\n        raise ValueError(\"No Tiingo API key found. Provide it in 'tiingo_api_key' config or TIINGO_API_KEY env var\")\n\n    # Prepare date range\n    end_date = datetime.utcnow()\n    start_date = end_date - timedelta(days=p.lookback_days)\n\n    # Build the Tiingo URL\n    base_url = \"https://api.tiingo.com/tiingo/daily\"\n    url = (\n        f\"{base_url}/{p.symbol}/prices?\"\n        f\"startDate={start_date.strftime('%Y-%m-%d')}&\"\n        f\"endDate={end_date.strftime('%Y-%m-%d')}&\"\n        \"format=json\"\n    )\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Token {api_key}\"\n    }\n\n    # Fetch data asynchronously\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url, headers=headers) as resp:\n            if resp.status == 404:\n                raise ValueError(f\"Symbol not found: {p.symbol}\")\n            resp.raise_for_status()\n            data = await resp.json()\n\n    if not data:\n        raise ValueError(f\"No data returned for symbol {p.symbol}\")\n\n    # Convert to DataFrame\n    df = pd.DataFrame(data)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True)\n\n    # Use adjusted price columns if present\n    df[\"open\"] = df.get(\"adjOpen\", df[\"open\"]).round(2)\n    df[\"high\"] = df.get(\"adjHigh\", df[\"high\"]).round(2)\n    df[\"low\"] = df.get(\"adjLow\", df[\"low\"]).round(2)\n    df[\"close\"] = df.get(\"adjClose\", df[\"close\"]).round(2)\n    df[\"volume\"] = df.get(\"adjVolume\", df[\"volume\"]).astype(int)\n\n    # Basic sanity check: must have enough rows\n    if len(df) < 10:\n        raise ValueError(f\"Not enough data points to calculate indicators for {p.symbol}\")\n\n    # Calculate indicators using pandas_ta\n    # Moving Averages\n    df.ta.sma(length=20, append=True, col_names=(\"sma_20\",))\n    df.ta.sma(length=50, append=True, col_names=(\"sma_50\",))\n    df.ta.sma(length=200, append=True, col_names=(\"sma_200\",))\n\n    # RSI\n    df.ta.rsi(length=14, append=True, col_names=(\"rsi\",))\n\n    # MACD\n    df.ta.macd(append=True)\n\n    # ATR\n    df.ta.atr(length=14, append=True, col_names=(\"atr\",))\n\n    # Average Daily Range\n    df[\"daily_range\"] = df[\"high\"] - df[\"low\"]\n    df[\"adr\"] = df[\"daily_range\"].rolling(window=20).mean()\n    df[\"adrp\"] = (df[\"adr\"] / df[\"close\"]) * 100\n\n    # Volume\n    df[\"avg_20d_vol\"] = df[\"volume\"].rolling(window=20).mean()\n\n    # Get latest values\n    latest = df.iloc[-1]\n\n    # Build an output dict\n    analysis_dict = {\n        \"latestClose\": float(latest[\"close\"]),\n        \"aboveSma20\": bool(latest[\"close\"] > latest[\"sma_20\"]),\n        \"aboveSma50\": bool(latest[\"close\"] > latest[\"sma_50\"]),\n        \"aboveSma200\": bool(latest[\"close\"] > latest[\"sma_200\"]),\n        \"sma20OverSma50\": bool(latest[\"sma_20\"] > latest[\"sma_50\"]),\n        \"sma50OverSma200\": bool(latest[\"sma_50\"] > latest[\"sma_200\"]),\n        \"rsi\": float(latest[\"rsi\"]) if not np.isnan(latest[\"rsi\"]) else None,\n        \"macdBullish\": bool(latest[\"MACD_12_26_9\"] > latest[\"MACDs_12_26_9\"]),\n        \"atr\": float(latest[\"atr\"]) if not np.isnan(latest[\"atr\"]) else None,\n        \"adrPercent\": float(latest[\"adrp\"]) if not np.isnan(latest[\"adrp\"]) else None,\n        \"avg20dVolume\": float(latest[\"avg_20d_vol\"]) if not np.isnan(latest[\"avg_20d_vol\"]) else None,\n    }\n\n    # Build final OUTPUT\n    out = OUTPUT()\n    out.analysis = analysis_dict\n    return out ","tools":[],"config":[{"BasicConfig":{"key_name":"tiingo_api_key","description":"Your Tiingo API key. If not provided, we will check the TIINGO_API_KEY environment variable.","required":false,"type":null,"key_value":null}}],"description":"Fetches historical stock data from Tiingo and calculates basic technical indicators (SMA, RSI, MACD, ATR, etc.), then returns a structured analysis of the trend.","keywords":["stock","analysis","technical-indicators","tiingo"],"input_args":{"type":"object","properties":{"lookback_days":{"type":"number","description":"How many days of historical data to fetch."},"symbol":{"type":"string","description":"The stock symbol to fetch data for."}},"required":["symbol"]},"output_arg":{"json":""},"activated":false,"embedding":[0.58811903,0.111723766,-0.22015761,-0.025289286,-0.20839623,-0.1935013,0.14670442,0.33279738,-0.6362363,-0.13342753,0.0507093,0.3594218,-0.12722197,-0.32963616,0.20080207,-0.6068062,0.5996432,-0.8241343,-1.3290377,-0.5292916,0.33431172,-0.17199981,-0.011315219,0.5975035,0.31965503,-0.2893814,-0.31850398,0.19485246,-0.75543034,-1.7734436,0.08777733,0.3243051,-0.17544901,-0.0072842985,-0.055048637,-0.11206012,0.36805087,0.43615258,-0.29184914,-0.25823295,0.37760848,0.051548794,-0.02091831,-0.600749,0.37825423,0.17470467,0.30251953,0.30700576,0.46462333,0.8401879,-0.40813145,0.13642469,0.118562,-0.7963201,-0.5335437,-0.14638829,0.28738478,-0.5981732,0.0075794067,-0.53838676,0.15273425,0.23953375,-2.8442426,-0.26141655,0.22563864,-0.050623365,0.4111855,0.49570832,-0.3738457,-0.073448494,-0.28493297,-0.13734953,0.5962137,-0.07151747,-0.09958601,0.30620435,0.02389573,0.31151563,0.46289062,-0.9065639,-0.31858668,0.55039406,0.022440318,0.09967924,-1.1120744,0.5559406,0.25948077,-0.38279706,0.63743263,0.39039108,0.077585086,0.16322541,0.9992845,0.08118264,-0.1617513,0.3074922,-0.2857733,0.85187906,-0.7250377,3.5042944,0.77650744,0.16413592,-0.16726154,-1.4636462,-0.4412511,-0.63733256,0.10408272,-0.23831688,0.08851506,0.73990184,-0.096626,0.41753775,-0.20487773,-0.046990667,0.36072174,0.66806465,-0.7569073,-0.25093508,-0.5795374,-0.13690126,-1.189812,0.033048086,-0.5929153,-0.26815084,0.1765342,0.03802216,-0.38272846,0.67374617,0.38944322,-0.1565519,0.51156306,0.19373533,-0.9435406,0.54020774,0.027762093,0.24504456,-0.64181584,-0.04204094,0.2758481,-1.0314045,-0.72918594,-1.2186835,0.7221617,-0.36470243,0.9672629,0.13541502,0.50830317,0.023835443,-0.18745871,-0.3383033,0.12023687,0.15969406,-0.21876669,0.7253539,1.0576615,0.4237394,-0.47650152,0.32211453,0.083432786,0.069934934,-0.8085586,0.06435256,0.17602192,-0.039966837,0.24010447,-0.13316232,0.22303203,0.52796304,0.6768544,0.59302485,0.38688087,-0.4586471,-0.065060586,0.71774936,-0.12584385,0.41185033,0.0708776,-0.1261149,-0.48134035,-0.81541646,0.15285543,0.38138154,0.21174821,-0.22079822,0.5404671,-0.08126009,0.10547837,-0.2401371,0.4182858,1.0970803,-0.56128204,1.0631293,-0.6638162,-0.65571004,0.012376749,0.14577255,-0.75433475,0.66407174,0.70264435,-0.19494727,-0.19042915,0.17650409,-0.20847164,-0.2560132,-0.7475933,-0.11126417,0.24301061,-0.6841192,0.53097945,-0.2898057,0.10670778,-0.14568146,0.6935986,-0.34658006,0.13065359,0.2517099,0.19808237,-0.3153771,-0.12708734,0.47654447,0.0869042,0.04092191,0.19993429,-0.87105477,-0.79062,0.8355483,0.21092996,-0.047519784,-0.51906854,-0.9517663,0.273183,0.6211344,1.0825151,1.9118965,1.4841917,-0.43470472,-0.36635676,0.82977426,0.5794749,-0.2555771,0.70599216,0.14583093,-0.1325478,0.080296084,-0.4744115,0.07951376,-0.7497217,0.73392886,0.40191352,1.9646676,0.2588841,0.110504374,-0.08636162,0.87072974,0.1501365,-0.26788825,-0.79724216,0.067200854,-0.69966537,0.58105534,0.12607366,-0.077538,1.212667,0.42051947,-0.16188793,0.1437979,-0.5819496,-0.40392965,0.16633272,0.32236013,-0.14690705,0.13084596,-0.5736723,-0.24654225,0.14357573,0.37475726,0.45638677,-0.08753868,-0.9819125,0.1976898,0.028372038,0.43911383,0.34976327,0.20039514,-0.51239896,0.06693272,-0.2623841,-0.45325512,-0.35234824,0.26692316,0.18637842,-0.5772854,-0.71231246,0.3797984,1.3720794,0.038077947,-0.3432186,0.74015325,0.31146395,0.39275885,-0.5918054,0.09681791,-0.17299807,0.3406461,-0.64179546,-0.96076673,0.7313476,0.0023032576,-0.39269483,0.3339651,-1.4849094,0.3404563,0.5906305,-0.3442044,0.6612878,-0.08508055,0.7804805,0.3143294,-0.53212667,-1.755662,0.053723373,-0.53782845,0.39499044,-0.27791882,-0.37472492,0.4836799,-0.28979433,-0.24705568,-0.38160074,0.90747035,0.19730762,0.20402092,-1.0241884,-0.08153511,0.68996537,-0.6448057,-0.1285974,-0.05954644,-0.97361445,-0.06806494,-0.026371792,0.91521025,-0.14734727,1.1226751,0.57747316,0.13771881,-0.42441076,-0.7783487,0.7117959,0.49975145,-0.48062387,0.8300459,0.17829219,-0.40308544,0.020761583,0.5474518,-0.82548386,0.31755164,-0.4372346,1.2565341,-0.044650998,-0.38833773,-0.43748158,-0.024041237,0.15727042,0.75152403,-0.039915826,-0.38975617,-0.16449648,-0.07782122,0.20909615,0.10419526,0.23382473,-0.103206426,0.44081077,0.35875034,0.15504459,0.7059182,-0.2589098,-0.32222104,0.019629635,-0.7773547,-1.5706775,-0.8220509],"result":{"type":"object","properties":{"analysis":{"description":"Contains various technical analysis indicators and booleans describing the trend.","properties":{"aboveSma20":{"type":"boolean"},"aboveSma200":{"type":"boolean"},"aboveSma50":{"type":"boolean"},"adrPercent":{"type":"number"},"atr":{"type":"number"},"avg20dVolume":{"type":"number"},"latestClose":{"type":"number"},"macdBullish":{"type":"boolean"},"rsi":{"type":"number"},"sma20OverSma50":{"type":"boolean"},"sma50OverSma200":{"type":"boolean"}},"required":["latestClose"],"type":"object"}},"required":["analysis"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}