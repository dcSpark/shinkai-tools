{"type":"Python","content":[{"name":"Google News Search","tool_router_key":"local:::__official_shinkai:::google_news_search","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"requests>=2.28.0\"\n# ]\n# ///\n\nimport requests\nimport os\nimport json\nfrom typing import List, Dict, Optional\nimport time\n\nclass CONFIG:\n    \"\"\"\n    Config holds optional parameters for SerpAPI or environment usage.\n    \"\"\"\n    SERP_API_KEY: str  # SerpAPI key for authentication\n\nclass INPUTS:\n    \"\"\"\n    The user inputs for this tool.\n    \"\"\"\n    query: str                   # The user's search query\n    gl: Optional[str] = \"us\"     # Geolocation (country code)\n    hl: Optional[str] = \"en\"     # Language code\n    num_results: Optional[int] = 10  # Max news results to return\n\nclass OUTPUT:\n    \"\"\"\n    The JSON output from the tool. \n    We'll unify each search result, returning them in a structured list.\n    \"\"\"\n    results: List[Dict[str, str]]\n    query: str\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    # Validate config\n    if not c.SERP_API_KEY:\n        raise ValueError(\"SERP_API_KEY not provided in config.\")\n\n    # Validate input\n    if not p.query or not p.query.strip():\n        raise ValueError(\"No search query provided.\")\n\n    # Build request to SerpAPI \"google_news\" engine\n    url = \"https://serpapi.com/search\"\n    params = {\n        \"engine\": \"google_news\",\n        \"q\": p.query.strip(),\n        \"api_key\": c.SERP_API_KEY,\n        \"hl\": p.hl or \"en\",   # language\n        \"gl\": p.gl or \"us\",   # geolocation/country code\n        \"num\": p.num_results if p.num_results else 10,\n    }\n\n    start_time = time.time()\n    resp = requests.get(url, params=params)\n    elapsed = time.time() - start_time\n\n    if resp.status_code != 200:\n        raise RuntimeError(\n            f\"Google News search failed with HTTP {resp.status_code}: {resp.text}\"\n        )\n\n    data = resp.json()\n\n    # In SerpAPI's response, we expect a top-level \"news_results\" key\n    raw_results = data.get(\"news_results\", [])\n    # Convert them to a simpler structure\n    articles = []\n    for item in raw_results[: p.num_results]:\n        # Items typically contain:\n        #   \"title\", \"link\", \"source\" => { \"name\": str }, \"snippet\", \"date\", ...\n        # We'll unify them into a consistent structure\n        article = {\n            \"title\": item.get(\"title\", \"Untitled\"),\n            \"link\": item.get(\"link\", \"\"),\n            \"source\": item.get(\"source\", {}).get(\"name\", \"Unknown\"),\n            \"snippet\": item.get(\"snippet\", \"\"),\n            \"date\": item.get(\"date\", \"\"),\n        }\n        articles.append(article)\n\n    # Prepare our result object\n    output = OUTPUT()\n    output.results = articles\n    output.query = p.query.strip()\n\n    # (optional) some debug prints or logging\n    print(f\"[google-news-search] Found {len(articles)} articles in {elapsed:.2f} seconds.\")\n    return output ","tools":[],"config":[{"BasicConfig":{"key_name":"SERP_API_KEY","description":"Your SerpAPI key for authentication","required":true,"type":null,"key_value":null}}],"description":"Searches Google News for headlines and articles via SerpAPI. Requires SERP_API_KEY in configuration.","keywords":["google-news","serpapi","news","search"],"input_args":{"type":"object","properties":{"hl":{"type":"string","description":"Language code. E.g. 'en', 'zh', 'es', 'fr'..."},"gl":{"type":"string","description":"Geolocation (country code). E.g. 'us', 'uk', 'au', ..."},"query":{"type":"string","description":"The search query to look up in Google News"},"num_results":{"type":"number","description":"Number of results to return"}},"required":["query"]},"output_arg":{"json":""},"activated":false,"embedding":[0.30298388,0.9610429,-0.08941704,-0.24296881,-0.357484,-0.54541975,-0.1390302,-0.22861965,-0.65968007,-0.3418455,-0.6089843,0.39861083,-0.15656637,0.023681294,0.2431566,0.022763006,0.1709023,0.014879422,-0.83152825,-0.15821981,0.73801863,0.59413594,0.34566098,0.021319792,-0.1742441,0.072296955,-0.28586882,-0.5428418,-1.0955737,-1.969758,0.39729485,0.36373258,0.27657288,0.052687615,-0.56973934,-0.33569998,-0.039804485,-0.29306477,-0.48377624,0.048205167,0.08272519,0.064293586,-0.5363357,0.17307547,-0.3202479,0.08726946,0.5492634,-0.15368725,0.7217428,0.6226509,0.1523199,0.39273953,-0.85229087,0.27523637,-0.104052454,0.2398912,-0.44393107,0.24708112,0.2270281,0.17158604,0.62395763,0.37606397,-4.200894,-0.1987166,0.43070316,0.58851296,0.029638011,-0.363546,0.09497739,0.33691528,0.34400302,0.2755277,0.33506674,0.5833775,-0.33865857,-0.9715511,0.14544377,0.1513861,-0.116573915,-0.7464387,0.29468614,-0.06975639,-1.0077127,-0.20797357,-0.34316623,0.46812257,-0.45484316,0.06839207,0.4572058,-0.056590524,-0.20892398,-0.14803943,0.24262379,-0.77157533,-0.7068936,-0.24567823,0.06683509,0.36340743,0.5032117,3.2431602,0.5355041,0.048447747,0.5548649,-0.61374736,0.60060096,-0.5107702,0.3807808,-0.20377243,-0.19673495,0.36173552,-0.30078036,0.5991073,0.3638126,-0.3005268,0.0050753895,0.33462438,-0.51385415,0.045281895,0.37532175,1.214572,-0.20674154,-0.47421455,-0.9864238,0.31767997,0.008483969,0.021861412,-0.5891872,0.47136888,0.32875493,-0.21882027,0.38513443,-0.92072344,-0.75231403,-0.13171713,0.074318916,0.38180807,0.28208596,-0.5845566,0.04667174,-0.77438116,-0.32144588,-0.9330314,0.91374296,-0.1074518,0.47327313,0.46750563,0.1722294,0.473473,-0.83061814,-0.314119,0.12137203,0.11718586,0.5867065,0.118579924,0.45286596,-0.20746501,-0.2787001,0.36665434,-0.77730244,-0.12817621,-0.13300793,-0.051421486,0.31670856,-0.32911015,0.11201653,-0.12598269,0.3592226,0.17984354,0.41874272,0.10179095,0.41123438,0.2734533,0.34277847,0.54350007,0.0006784578,-0.0110786,-0.7710675,-0.5951274,0.9050926,-0.7574885,-0.53465277,0.55769783,0.08958924,-0.5901614,-0.6275921,0.49581185,0.07878108,-0.037058968,0.8890278,0.73459566,-0.6695794,1.9854532,-0.59453523,-0.8260649,0.5238459,0.0244839,-0.6757633,0.27773467,0.46221828,-0.25579613,-0.4033787,-0.11900319,0.15873837,-0.5706495,-0.3033986,-0.41142508,0.34096575,-0.3065287,0.34011596,-0.30555552,0.20871747,-0.6974019,0.3232346,0.17566851,0.054384764,-0.1531157,-0.2830876,0.3307721,-0.41553667,0.5354336,0.102974705,0.31532606,-0.7816205,-0.77652365,-0.5123149,-0.10023332,-0.05577413,0.19165994,-0.90381145,-0.070634305,0.40109184,1.2904372,-0.35280216,0.92932945,0.47953203,0.10161144,0.5568328,0.37048307,0.52650476,-0.70719767,0.5413922,-0.40168163,-0.42636544,-0.72576374,0.47517556,-0.7664193,0.0044332445,0.68818825,0.42283845,1.4544473,1.3900375,0.19034247,0.20546453,0.12912793,0.18934038,0.095234446,-1.2066725,0.0619448,-0.47341758,-0.13985766,-0.009511381,-0.28779203,0.52713436,0.3782641,0.5130477,-0.38810334,0.26122183,-0.705461,0.01591529,-0.5415787,0.13773572,0.48623085,0.26331127,0.05568229,-0.1362914,-0.22953455,-0.31322232,-0.053484224,-0.64973825,-0.2860379,0.4939313,-0.37208426,0.07963031,-0.1852534,-0.6256094,-0.4099476,-0.45125523,0.84913856,-0.3257441,0.75680166,-0.4711306,-0.089167535,0.1234155,0.14476688,1.5133771,-0.9376551,0.17529324,0.6598761,-0.3033725,0.071543775,-0.48782334,-0.05299546,-0.027338203,0.16978791,-0.39694375,-0.43238705,0.5926989,-0.19119883,0.20888546,0.57476044,-0.6132344,0.42311502,-0.013042919,-0.69068897,0.63211936,-0.7118757,0.16490375,0.71222925,-0.09681867,-1.9725271,-0.01934538,0.020460155,0.15467958,-0.2608424,-1.135749,0.3499094,0.0017452259,0.10315654,-0.3272491,1.4706079,0.19457236,-0.20350245,-0.4962619,0.34383777,0.10506745,-0.37902638,0.22453596,-0.21322986,-0.66577005,-0.6273056,0.14858261,1.5399413,1.0978134,-0.08931984,0.36112145,0.47735015,-0.6318055,-0.9134496,0.5209178,0.49997574,-0.5785145,0.7235181,-0.41015613,-0.488598,0.3850905,0.912499,0.80573493,0.26264986,0.0420415,1.1737944,0.023169374,0.46543637,-0.1686596,0.5826295,-0.0016547516,0.3872311,0.3206575,-0.3400427,0.24110468,-0.28949112,0.159761,-0.27357367,0.8934698,-0.17527093,-0.0043708086,0.67020005,0.67129153,0.42115316,0.55127543,0.22844346,0.04335221,0.17862098,-0.9098814,0.38386995],"result":{"type":"object","properties":{"query":{"description":"The original query string","type":"string"},"results":{"description":"List of search results","items":{"properties":{"date":{"type":"string"},"link":{"type":"string"},"snippet":{"type":"string"},"source":{"type":"string"},"title":{"type":"string"}},"type":"object"},"type":"array"}},"required":["results","query"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}