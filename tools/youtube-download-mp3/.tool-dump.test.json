{"type":"Deno","content":[{"name":"Youtube Download MP3","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { writeAll } from 'https://deno.land/std/io/mod.ts';\nimport { getHomePath } from './shinkai-local-support.ts';\n\ntype CONFIG = {\n  apiKey: string;\n};\n\ntype INPUTS = {\n  youtubeUrl: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audiofile?: string;\n  rapidDownloadUrl?: string;\n  error?: string;\n};\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { youtubeUrl, fileName } = inputs;\n\n  // Validate YouTube URL (must be in the form https://www.youtube.com/watch?v=XXXXXXXXXXX)\n  const youtubeRegex = /^https:\\/\\/(www\\.)?youtube\\.com\\/watch\\?v=[\\w-]{11}$/;\n  if (!youtubeRegex.test(youtubeUrl)) {\n    return { error: 'Invalid YouTube URL' };\n  }\n\n  // Build the API URL for RapidAPI\n  const apiUrl = `https://youtube-to-mp315.p.rapidapi.com/download?url=${encodeURIComponent(youtubeUrl)}&format=mp3`;\n\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-rapidapi-host': 'youtube-to-mp315.p.rapidapi.com',\n      'x-rapidapi-key': config.apiKey,\n    },\n    body: JSON.stringify({})\n  });\n\n  if (!response.ok) {\n    return { error: 'Failed to download video' };\n  }\n\n  const data = await response.json();\n  const rapidDownloadUrl = data.downloadUrl;\n\n  // Wait 10 seconds before downloading the file\n  await new Promise(resolve => setTimeout(resolve, 20_000));\n\n  // Download the MP3 file from the rapidDownloadUrl\n  let fileResponse = await fetch(rapidDownloadUrl);\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (!fileResponse.ok) {\n    console.error(await fileResponse.text())\n    return { error: 'Failed to download the mp3 file from the provided download URL.', rapidDownloadUrl };\n  }\n\n  // Determine the output file name:\n  // If a fileName is provided, use it. Otherwise, derive it from the download URL.\n  let outputFileName: string = await getHomePath();\n  if (fileName) {\n    outputFileName += '/'+fileName;\n    if (!outputFileName.endsWith('.mp3')) outputFileName += '.mp3'\n  } else {\n    outputFileName += '/audio.mp3';\n  }\n\n  // Save the file to disk in the current working directory\n  // Convert the response into a Uint8Array and return it\n  const arrayBuffer = await fileResponse.arrayBuffer();\n  const fileData = new Uint8Array(arrayBuffer);\n  const outputFile = await Deno.open(outputFileName, { write: true, create: true });\n  await writeAll(outputFile, fileData);\n  outputFile.close();\n\n  return { audiofile: outputFileName, rapidDownloadUrl };\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"apiKey","description":"The API key for accessing the RapidAPI service","required":true,"type":null,"key_value":null}}],"description":"Downloads audio from a YouTube video and saves it as an MP3 file.","keywords":["youtube","mp3","downloader","audio"],"input_args":{"type":"object","properties":{"fileName":{"type":"string","description":"Optional file name for the downloaded MP3"},"youtubeUrl":{"type":"string","description":"The URL of the YouTube video to download"}},"required":["youtubeUrl"]},"output_arg":{"json":""},"activated":false,"embedding":[0.8978121,-0.38236564,0.25026086,-0.030445049,-0.68066764,-0.38680246,-0.75059307,-0.16159853,0.115520895,-0.08894039,0.16471446,1.2539114,-0.53002113,-0.06787127,0.37531763,-0.46376362,0.6043358,-0.36440754,-1.27444,0.092776,-0.10527672,1.0559564,-0.15574482,0.5344863,-0.12049553,0.15839398,-0.13501558,-0.64109826,-1.0949022,-1.380253,0.756534,1.0093974,0.1371673,-0.45210496,0.043984298,-0.41195494,0.30545995,0.5381766,-0.6542231,0.19512014,-0.28566748,-0.6834833,-0.24523884,0.059317313,-0.11745814,0.15117908,0.9893497,-0.1293683,1.2761201,-0.04888384,-0.6488842,-0.14291576,-0.5981784,-0.22306132,-0.24271935,-0.8170982,-0.49678338,0.7598456,0.58341837,0.2337351,-0.38556394,0.09629938,-3.770494,-0.2593993,0.73040265,0.15886879,0.06967721,-0.4445228,0.46056688,-0.36910003,0.077562466,0.16837867,-0.94267344,0.083271116,-0.30472603,-0.32850897,0.12196897,-0.37068734,0.011986807,-0.78597414,0.3220331,0.19890973,0.14668599,-0.29024467,-0.28214183,0.42522508,-0.30430737,0.16020325,-0.34255335,0.045908257,-0.46009716,-0.52211666,0.7839237,0.5680148,-0.15937495,-0.61577535,0.37545618,-0.2108674,0.04473986,2.4636352,0.7389742,0.03052688,0.65681326,-0.9039774,-0.10847866,-0.44941762,-0.06641045,-0.063555405,0.47950566,0.057138056,0.88980365,-0.27268228,0.26899624,0.11928973,0.32827538,-0.004729064,-0.9670804,-0.39798924,0.3475849,0.41963223,-0.2606531,-0.24582043,-0.062375724,-0.40322357,-0.8820542,-0.14422247,-0.5440605,0.0018578242,0.54243886,-0.5910839,0.26224697,-0.18059881,-0.6233966,-0.1449669,0.04158897,0.4766038,0.6537345,-1.2227646,0.16176587,-0.09917037,0.3095258,-1.5723702,0.39947164,0.11780455,-0.13689747,0.28848332,-0.20718423,0.8008808,-0.4233444,0.13794081,0.1467611,0.22427513,0.29201287,0.09237918,0.98098624,-0.20563528,-0.012285078,-0.46040112,-0.5077826,0.5173641,-0.76290107,-0.1349123,-0.045115188,0.5392496,0.040498562,-0.14606781,0.13392855,0.30390924,0.5744238,-0.015810877,0.41595688,0.20337966,0.006199469,-0.23151287,0.14086938,-0.61782175,-0.7906661,0.093529634,0.13156338,0.13367733,0.6007434,0.28960142,-0.44783726,-0.19925582,-0.021204095,0.69737047,0.083505996,-0.030311741,0.80101204,1.2163801,0.2322349,1.7640947,-1.6182355,-0.6358923,-0.101933844,0.18582696,-0.08924249,0.97340006,0.29626462,-0.47582442,-0.15604398,-0.13457537,0.37228402,0.13692588,-0.0884762,-0.002923198,-0.1911266,-0.111618735,-0.46308422,-0.6428838,0.65943056,-0.76081014,0.37069392,0.20034096,-0.33790767,0.4145084,-0.6416054,0.30050737,-0.38145056,-0.05378723,-0.03317406,0.2857017,0.30120128,-0.42741013,0.2283289,0.4426573,-0.29540202,-0.4891041,-0.31142366,-0.26896238,1.093975,0.8950349,0.23854466,0.83144003,1.2862277,0.13267913,-0.5744894,0.37312955,0.4778385,-0.21275997,-0.034131356,0.030976146,-0.036735564,-0.6043095,-0.40823928,-1.1145563,0.4490646,0.10903312,-0.200039,1.1144693,0.8483904,0.76854587,0.84135413,0.2453628,0.91795194,-0.0299889,-2.0776944,-0.010050826,-0.08972061,0.49826723,-0.14836115,0.40401223,0.25739604,0.27994832,-0.1715733,-0.3559402,-1.0621003,-0.8596525,0.19170606,0.1108878,-0.16887018,1.0099766,-0.5437861,0.015364904,0.28855556,0.4519207,0.33872473,0.12577528,-0.45245624,-0.18073457,0.80951583,-0.3070707,0.08059518,-0.15323982,-0.044662192,-0.18974113,0.055840444,0.43548942,-0.110932656,0.95754045,-0.12713888,-0.9128443,-0.895512,0.8194648,1.4403442,0.52057767,0.40922672,-0.10707068,-0.4163206,0.17807616,-0.7910435,0.0848166,-0.09537953,-0.65483975,-0.6215398,-0.43794662,0.4207806,-0.7561903,-0.061976723,0.07614706,0.085530035,0.3327715,0.37570283,-0.05831465,0.57758385,-0.41423917,0.3027356,0.78470576,-0.32512748,-2.129035,-0.69341505,-0.8005581,-0.21148634,-0.33351868,-0.19860007,1.2637125,-0.41670087,0.76008385,0.26068044,1.7340094,0.26435217,-0.9533452,-0.5513407,0.9425449,0.6109643,-0.5751295,0.40517476,-0.30230522,-0.9401635,-0.1414716,1.1486968,0.99513835,0.42588487,0.21049741,-0.022334073,-0.5367475,-0.32303417,-1.2997301,0.27138358,-0.13644655,-0.73169523,0.31871346,-0.41878545,-0.69748795,0.732427,0.92434174,-0.19532484,0.11295331,-0.21700555,1.6971712,0.5995367,-0.10436975,0.31151137,0.102284655,0.43405044,-0.3967902,0.36459574,-1.1446744,0.1441844,-0.38913086,0.062059294,-0.22088042,0.44415867,0.63250035,1.4327443,0.45908833,-0.23057374,1.2341993,0.2352533,0.37941307,0.46530467,0.3764528,-0.19615623,-0.10042809],"result":{"type":"object","properties":{"audiofile":{"description":"The name of the MP3 file saved","type":"string"},"error":{"description":"Error message if the process fails","type":"string"},"rapidDownloadUrl":{"description":"The URL from which the MP3 file was downloaded","type":"string"}},"required":[]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}