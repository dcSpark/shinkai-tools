{"type":"Deno","content":[{"name":"Play Crypto 2048","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { shinkaiTypescriptUnsafeProcessor } from \"./shinkai-local-tools.ts\";\n\nconst get_ts_code = () => {\n  return `\nimport { Stagehand } from \"@browserbasehq/stagehand\";\nimport { z } from \"zod\";\nconst randomTimer = (min: number = 0, max: number = 1500) => {\n  const timeAmount = Math.floor(Math.random() * (max - min + 1)) + min;\n  return new Promise((resolve) => setTimeout(resolve, timeAmount));\n};\nexport async function run(config: any, inputs: any) {\n  console.log(\"🎮 Starting 2048 bot...\");\n  const stagehand = new Stagehand({\n    env: \"LOCAL\",\n    modelName: \"gpt-4o\",\n    modelClientOptions: {\n        apiKey: process.env.OPENAI_KEY,\n    },\n    verbose: 1,\n    debugDom: true,\n    domSettleTimeoutMs: 100,\n    executablePath: process.env.CHROME_PATH,\n  });\n  try {\n    console.log(\"🌟 Initializing Stagehand...\");\n    await stagehand.init();\n    console.log(\"🌐 Navigating to 2048...\");\n    await stagehand.page.goto(\"https://micro2048.pages.dev/events\");\n    try {\n      await stagehand.page.locator('#username').fill('walalo');\n      await randomTimer(100);\n      await stagehand.page.locator('#password').fill('c0rder00');\n      await randomTimer(100);\n      await stagehand.page.keyboard.press('Enter');\n    } catch (error) {\n      console.error(\"❌ Error logging in:\", error);\n    }\n    console.log(\"🖱️ clicking on the first event...\");\n    await stagehand.page.act({\n      action: \"click the first event\",\n    });\n    console.log(\"Clicking on New Game Button at the top right corner...\");\n    await stagehand.page.act({\n      action: \"click the new game button\",\n    });\n    await randomTimer(1000);\n    console.log(\"⌛ Waiting for game to initialize...\");\n    await stagehand.page.waitForSelector(\".game-board\", { timeout: 10000 });\n    // Main game loop\n    let moveKey = \"ArrowDown\";\n    while (true) {\n      console.log(\"🔄 Game loop iteration...\");\n      // Add a small delay for UI updates\n      await randomTimer(100, 300);\n      // Get current game state\n      const gameState = await stagehand.page.extract({\n        instruction: \\`Extract the current game state:\n          1. Score from the score counter\n          2. All tile values in the 4x4 grid (empty spaces as 0)\n          3. Highest tile value present\\`,\n        schema: z.object({\n          score: z.number(),\n          highestTile: z.number(),\n          grid: z.array(z.array(z.number())),\n        }),\n      });\n      const transposedGrid = gameState.grid[0].map((_, colIndex) =>\n        gameState.grid.map((row) => row[colIndex]),\n      );\n      const grid = transposedGrid.map((row, rowIndex) => ({\n        [\\`row\\${rowIndex + 1}\\`]: row,\n      }));\n      console.log(\"Game State:\", {\n        score: gameState.score,\n        highestTile: gameState.highestTile,\n        grid: grid,\n      });\n      // Analyze board and decide next move\n      const analysis = await stagehand.page.extract({\n        instruction: \\`Based on the current game state:\n          - Score: \\${gameState.score}\n          - Highest tile: \\${gameState.highestTile}\n          - Grid: This is a 4x4 matrix ordered by row (top to bottom) and column (left to right). The rows are stacked vertically, and tiles can move vertically between rows or horizontally between columns:\\n\\${grid\n            .map((row) => {\n              const rowName = Object.keys(row)[0];\n              return \\`             \\${rowName}: \\${row[rowName].join(\", \")}\\`;\n            })\n            .join(\"\\\\n\")}\n          What is the best move (up/down/left/right)? Consider:\n          1. Keeping high value tiles in corners (bottom left, bottom right, top left, top right)\n          2. Maintaining a clear path to merge tiles\n          3. Avoiding moves that could block merges\n          4. Only adjacent tiles of the same value can merge\n          5. Making a move will move all tiles in that direction until they hit a tile of a different value or the edge of the board\n          6. Tiles cannot move past the edge of the board\n          7. Each move must move at least one tile\\`,\n        schema: z.object({\n          move: z.enum([\"up\", \"down\", \"left\", \"right\"]),\n          confidence: z.number(),\n          reasoning: z.string(),\n        }),\n      });\n      console.log(\"Move Analysis:\", analysis);\n      let moveKey = {\n        up: \"ArrowUp\",\n        down: \"ArrowDown\",\n        left: \"ArrowLeft\",\n        right: \"ArrowRight\",\n      }[analysis.move];\n      let random = false;\n      if (!moveKey) {\n        moveKey = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"][Math.floor(Math.random() * 4)];\n        random = true;\n      }\n      await stagehand.page.keyboard.press(moveKey);\n      await randomTimer(100, 300);\n      console.log(\"🎯 Executed move:\", moveKey);\n      console.log(\"🎯🎯 Random:\", random);\n    }\n  } catch (error) {\n    console.error(\"❌ Error in game loop:\", error);\n    const isGameOver = await stagehand.page.evaluate(() => {\n      return document.querySelector(\".game-over\") !== null;\n    });\n    if (isGameOver) {\n      console.log(\"🏁 Game Over!\");\n      return;\n    }\n    throw error; // Re-throw non-game-over errors\n  }\n}\n`;\n}\n\nconst get_ts_package = () => {\n  return JSON.stringify({\n    \"name\": \"standalone\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.ts\",\n    \"scripts\": {},\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"description\": \"\",\n    \"dependencies\": {\n      \"@browserbasehq/stagehand\": \"https://github.com/dcspark/stagehand\",\n      \"sharp\": \"^0.33.5\",\n      \"json-schema-to-zod\": \"^2.6.0\",\n      \"zod\": \"^3.24.1\"\n    }\n  }, null, 2);\n}\n\nexport async function run(config: any, parameters: any) {\n    return await shinkaiTypescriptUnsafeProcessor({\n        code: get_ts_code(),\n        package: get_ts_package(),\n        parameters,\n        config,\n    });\n}","tools":["local:::__official_shinkai:::shinkai_typescript_unsafe_processor"],"config":[],"description":"Automatically play Crypto 2048","keywords":[],"input_args":{"type":"object","properties":{},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.009631552,-0.04992938,0.18502054,-1.0482539,-1.0781292,0.21508309,0.12178822,0.03537053,-0.23301429,-0.008838275,-0.02757813,0.5861123,-0.063159615,0.114750266,0.67119974,-0.39024654,0.042216055,-0.41569048,-1.4747849,0.32852745,-0.095488116,0.28981847,-0.27413607,0.57467407,0.24016836,0.53815967,0.26405653,-0.07335593,-0.96696854,-1.9006026,0.1596164,0.16929984,-0.73168796,0.11895767,0.0071155876,-0.040797435,-0.36685786,0.602024,-0.5155333,-0.72439617,0.024832347,0.5278477,-0.025670819,-0.5974936,0.18656425,-0.851731,0.24295303,0.2980186,0.32369882,-0.00576818,-0.5316915,-0.0443345,0.19912323,-0.3571577,-0.3877503,-0.1904541,-0.6201958,-0.23724513,-0.038888235,0.6274235,0.053967472,-0.09122902,-3.9413044,-0.09980723,1.2276329,-0.0026485175,1.0071267,-0.566757,0.0449212,0.2143934,0.7288917,0.24978119,-0.6322256,-0.43571645,0.41249117,0.07369407,-0.13420323,0.27322614,0.3682264,0.306354,0.70643735,0.9529729,-0.31124133,-0.0036357557,-0.063805014,0.31561166,-0.6238566,-0.7716878,-0.0044340864,0.39364618,-0.40586585,0.23019928,0.31643155,-0.007856749,-0.9279554,0.27866182,0.016852137,0.0909691,0.42589673,2.756898,0.5400851,0.1856568,0.23657939,-0.7392764,1.2251837,-0.10394326,-0.44229114,-0.24651147,0.07158512,-0.22413813,-0.41466978,-0.32522598,0.51082253,-0.50564,0.876973,0.66020226,-0.31923705,-0.14718309,-0.5334909,0.38679358,0.104757756,0.19258657,-0.67783517,-0.11258835,-0.26350665,0.39719975,-0.57210445,0.35279927,-0.16289335,-0.03882335,0.80461675,-0.7194841,-0.7117722,0.03659668,0.09249537,0.60610735,0.0043234825,-0.645116,-0.21206394,0.0066185817,0.6970846,-1.0253034,0.7064157,-0.62459886,0.55109197,-0.7169535,0.24785116,-0.21308923,-0.10714525,0.0647501,-0.070901215,0.4857152,0.15465198,0.18141821,1.4497718,-0.49284247,0.5237919,-0.3074455,-0.45048726,0.09574412,-0.58430254,-0.7648521,0.1978319,1.1533558,0.68787706,-0.3592223,-0.6619866,0.50433767,0.16498987,-0.17591146,0.5607004,-0.11353024,0.21384396,-0.20240316,0.06686338,-0.18404566,-0.03956675,0.5151562,0.44705054,-0.494387,-0.2882294,0.37096238,-0.29548246,-1.0146899,-0.3289829,0.30940995,0.2680657,0.021531891,0.3550634,0.124516755,-0.013229638,1.1711788,-1.0500292,-0.2242105,0.21086057,0.39523625,-0.047401704,-0.07924576,-0.17475498,-1.0185028,-0.5270128,-0.28919125,-0.071563244,0.200753,-0.8843135,-0.3832865,1.1110101,0.34877846,0.20065357,-0.18941632,0.48876852,0.58971417,0.84201807,0.32726032,0.38288978,0.09315635,0.24410279,0.38939917,0.8999047,0.22840847,0.68903816,0.5512952,-0.6364162,-0.48450094,-0.9729838,-0.39208567,0.20649526,-0.17420447,-0.13785224,-0.109444425,0.3707913,0.056379654,0.5681746,1.0115702,0.92503625,0.3230933,0.5402217,0.44688234,0.39031857,-0.7119117,-0.090244,-0.1785315,-0.018537551,-1.0011166,0.11845689,-0.7006862,-0.02951197,-0.09922589,-0.6489029,1.5172975,0.6799164,-0.17271885,1.0065829,0.581125,0.20255616,0.7506777,-1.4929343,-0.40953752,0.020433947,-0.06880985,-0.5249166,0.029950596,0.3026242,0.300562,-0.44028413,-0.1495601,-0.7951509,0.03781206,0.015200853,-0.041881382,0.12777032,0.61470646,-0.45885348,1.0204673,0.17034289,-0.23830356,0.5319625,-0.11195917,-0.93158436,0.5295631,-0.71754813,-0.004116825,0.74318975,0.2955864,0.5336684,-0.66871434,-0.23853905,0.20709798,-0.14102319,0.6771504,-0.5514392,-0.24702601,-0.25761485,-0.16313758,1.4949478,0.07249136,1.1243281,0.47784066,-0.13979472,0.96951747,-0.93905467,0.54605997,-0.013257904,-0.22449452,-1.6786041,-0.1560748,0.37304938,-0.3841954,-0.77719694,0.29487053,-0.19792724,0.33460453,-0.08170095,0.073939815,0.1959246,-0.17117071,-0.31746507,0.35389334,-0.4825042,-2.1670907,-0.3800015,-0.12858504,-0.26742584,-0.5589137,-0.38126403,0.47785473,0.21715099,-0.0533936,-0.25874346,1.9581646,0.57584107,-0.6660987,-0.51835895,-0.099161774,1.2095441,-0.1103864,0.4147831,0.046614222,-0.31198367,0.46905142,-0.38439134,1.6953897,0.31032583,0.7453311,-0.40187597,0.14506428,-0.14780782,-1.0243914,-0.20169052,0.4167378,-0.5513226,0.057977423,0.112630025,-0.59918475,0.67138845,0.48212013,-0.07321637,-0.49443457,-0.059035175,0.96248144,0.21120213,-0.3817267,-0.119807854,0.21824579,0.047149874,0.5950226,0.012342282,-0.83972925,0.16936387,-0.24386993,-0.18558978,-0.54055744,0.17885126,-0.13079739,1.0947287,0.54295987,0.020074066,0.4034909,0.51621944,0.5906146,0.042713635,0.05595925,-0.7800478,-0.24329908],"result":{"type":"object","properties":{},"required":[]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}