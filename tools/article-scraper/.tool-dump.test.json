{"type":"Python","content":[{"version":"1.0.0","name":"Article Scraper","homepage":null,"author":"@@official.shinkai","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"requests\",\n#   \"beautifulsoup4\",\n#   \"lxml\"\n# ]\n# ///\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom typing import List, Optional, Dict, Any\nimport datetime\n\nclass CONFIG:\n    \"\"\"\n    This class holds the tool's configuration, such as\n    default language or advanced flags.\n    \"\"\"\n    default_language: str = \"en\"\n\nclass INPUTS:\n    \"\"\"\n    This class holds the user-provided inputs.\n    \"\"\"\n    url: str\n    html: Optional[str] = None\n    language: Optional[str] = None\n\nclass OUTPUT:\n    \"\"\"\n    This class represents the result structure to be returned.\n    \"\"\"\n    title: str\n    authors: List[str]\n    publish_date: str\n    summary: str\n    keywords: List[str]\n    top_image: str\n    text: str\n\ndef extract_text_content(soup: BeautifulSoup) -> str:\n    \"\"\"Extract main text content from the article.\"\"\"\n    # Remove script and style elements\n    for script in soup([\"script\", \"style\"]):\n        script.decompose()\n    \n    # Get text\n    text = soup.get_text(separator='\\n', strip=True)\n    return text\n\ndef extract_metadata(soup: BeautifulSoup) -> Dict[str, Any]:\n    \"\"\"Extract metadata from meta tags.\"\"\"\n    metadata = {\n        \"title\": \"\",\n        \"authors\": [],\n        \"publish_date\": \"\",\n        \"keywords\": [],\n        \"top_image\": \"\"\n    }\n    \n    # Try to get title\n    title_tag = soup.find('title')\n    if title_tag:\n        metadata[\"title\"] = title_tag.string.strip()\n    \n    # Try meta tags\n    meta_mappings = {\n        \"author\": [\"author\", \"article:author\", \"og:article:author\"],\n        \"publish_date\": [\"article:published_time\", \"publishdate\", \"date\", \"published_time\"],\n        \"image\": [\"og:image\", \"twitter:image\"],\n        \"keywords\": [\"keywords\", \"news_keywords\"]\n    }\n    \n    for meta in soup.find_all('meta'):\n        name = meta.get('name', '').lower()\n        property = meta.get('property', '').lower()\n        content = meta.get('content', '')\n        \n        if not content:\n            continue\n            \n        # Authors\n        if name in meta_mappings[\"author\"] or property in meta_mappings[\"author\"]:\n            if content not in metadata[\"authors\"]:\n                metadata[\"authors\"].append(content)\n                \n        # Publish date\n        elif name in meta_mappings[\"publish_date\"] or property in meta_mappings[\"publish_date\"]:\n            metadata[\"publish_date\"] = content\n            \n        # Image\n        elif name in meta_mappings[\"image\"] or property in meta_mappings[\"image\"]:\n            if not metadata[\"top_image\"]:\n                metadata[\"top_image\"] = content\n                \n        # Keywords\n        elif name in meta_mappings[\"keywords\"] or property in meta_mappings[\"keywords\"]:\n            keywords = [k.strip() for k in content.split(',')]\n            metadata[\"keywords\"].extend(keywords)\n    \n    return metadata\n\nasync def run(c: CONFIG, p: INPUTS) -> Dict[str, Any]:\n    \"\"\"\n    The main run function that processes the article.\n    \"\"\"\n    if p.html:\n        html_content = p.html\n    else:\n        # Fetch the URL\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n        response = requests.get(p.url, headers=headers)\n        response.raise_for_status()\n        html_content = response.text\n\n    # Parse HTML\n    soup = BeautifulSoup(html_content, 'lxml')\n    \n    # Extract metadata\n    metadata = extract_metadata(soup)\n    \n    # Extract text content\n    text_content = extract_text_content(soup)\n    \n    # Create summary (first 500 characters of text)\n    summary = text_content[:500].strip()\n    \n    result = {\n        \"title\": metadata[\"title\"],\n        \"authors\": metadata[\"authors\"],\n        \"publish_date\": metadata[\"publish_date\"],\n        \"summary\": summary,\n        \"keywords\": metadata[\"keywords\"],\n        \"top_image\": metadata[\"top_image\"],\n        \"text\": text_content\n    }\n    \n    return result ","tools":[],"config":[{"BasicConfig":{"key_name":"default_language","description":"The default language to assume for articles","required":false,"type":null,"key_value":null}}],"description":"Extracts article text, authors, images, and metadata from a given URL or raw HTML using newspaper3k","keywords":["article","news","newspaper3k","scraper","metadata","text extraction"],"input_args":{"type":"object","properties":{"language":{"type":"string","description":"Override default language, e.g. 'en', 'zh'"},"url":{"type":"string","description":"Article URL to scrape"},"html":{"type":"string","description":"Optional raw HTML content (if you already have it), will override fetching from 'url'"}},"required":["url"]},"output_arg":{"json":""},"activated":false,"embedding":[0.69958085,0.6408262,-0.82397354,-0.20220704,-0.0026714131,-0.015317649,-0.95243603,-0.015704378,0.08035742,0.15926917,0.071612984,0.5253421,0.5515735,0.11718634,0.14836484,-0.07464035,-0.1577858,-0.32696655,-1.7061508,0.07935188,0.75639826,0.9386462,0.5256224,-0.050524637,0.31203762,-0.31526586,-0.31705546,-0.8968821,-0.7059019,-1.2808392,0.34648955,-0.06930978,-0.38683906,-0.38481176,0.038131673,-0.42542174,0.26366735,-0.27712575,-0.6525366,-0.6414682,0.0730806,0.37810075,-0.1831353,-0.2543598,0.6254789,0.023582108,-0.02403045,-0.78329444,0.554555,0.8433926,-0.24447815,-0.6769963,-0.36373195,-0.47805557,-0.109208636,-0.25934535,-0.41541314,0.33401555,-0.09753384,0.16480961,0.32006043,0.28389922,-3.8529084,0.08221927,0.61325765,0.039976567,0.009789602,-0.34538057,-0.2727146,-0.069710866,0.04571913,0.11207926,-0.14600371,0.21708623,0.13846505,-1.0520682,0.26681706,0.22635245,0.025028575,-0.6104141,0.021324886,0.33776802,-0.64307433,0.45055732,-0.65749353,0.82143223,-0.51960504,-0.50214994,0.27929106,0.16299383,0.73987764,-0.6594395,-0.4154378,-0.17680871,-0.39736533,0.035856172,0.07123341,0.6888256,0.39670473,3.2756279,0.91605264,-0.04642672,-0.09377331,-1.0915543,0.7058506,-0.71038157,-0.0811317,0.38594893,0.34456208,0.17424032,0.22477862,-0.2957549,-0.42693272,-0.0008695144,-0.16047852,0.1939357,-0.6427872,-0.42367455,0.60016936,0.7521145,0.004918948,0.40769503,-0.4865239,-0.6133542,0.2777027,0.39926606,0.060941894,0.62587196,0.38662675,-0.12275764,0.2872742,-0.36769813,-1.2880261,-0.27476338,-0.41507244,-0.123385705,0.67414415,-0.84650433,0.5326844,-0.8914933,0.0939532,-0.9960309,0.17175007,0.45777735,0.31498083,0.51406693,-0.075900316,0.26006567,-0.6515589,0.0684925,0.106845535,0.7444573,0.048020814,0.35386318,0.88370615,-0.20013018,-0.074912935,-0.3908652,-0.64259464,0.06870123,-0.36417183,-0.4486875,0.74582535,0.20280176,0.03810155,-0.4155304,0.46567404,0.27106565,0.5785759,0.35636017,0.6557387,-0.2573834,0.31264105,0.2567572,-0.09379578,-0.18521,-0.3047647,-0.18612182,0.30214018,-0.29828346,1.1074402,0.53280115,0.016354807,-0.40126738,-0.5830925,0.18787612,0.1987561,0.4159214,0.97695297,0.79437995,-0.090547875,1.7853838,-0.5292471,-0.9648846,0.46677208,-0.12761687,-0.16402587,0.10868383,0.4017969,0.11988812,0.15782793,-0.035117596,-0.29866692,-0.15362512,0.085555434,-0.09190545,0.6942326,0.0694569,0.07102176,-0.87645376,-0.09291175,-0.9467616,0.46841347,-0.29118356,0.5840219,0.050204664,-0.47883993,0.3612459,0.3115088,0.6918572,-0.043276735,0.2938828,-0.5001177,-0.64242226,-0.888923,0.5305878,0.111098506,0.37461376,-0.33218652,-0.11201885,0.89266145,1.0052544,0.46834764,1.2656572,1.0533276,-0.26004952,-0.11288767,0.58694935,1.1170452,-0.13488261,0.7524571,0.20177329,-0.2320733,0.18658035,-0.11525434,-0.83377814,-0.47785136,-0.11243012,0.615525,1.3688712,0.4360804,0.034181934,0.44498062,0.391215,0.24442843,-0.14902261,-1.7840573,0.115003146,-0.03262426,1.0281726,0.13629544,-0.47391495,0.7258524,0.58355606,0.50857085,-0.8171519,-0.46437186,-0.54285747,-0.088699445,-0.037173413,-0.68298566,0.34472114,-0.1529127,-0.23207363,0.18660392,0.15243562,1.0182202,0.16062516,-0.7515102,-0.47976515,0.53323513,0.059379704,0.06212423,0.675783,-0.28025955,-0.7663865,-0.61333853,0.61203945,-0.55895585,0.62608236,-0.051315278,-0.68206996,-0.04896005,0.22125404,1.3931223,-0.12272218,0.33747125,-0.41095552,-0.23817614,-0.2887112,-0.49698013,0.5387819,-0.8388993,-0.2729165,-0.04450789,-0.79711366,0.8629406,-0.504568,-0.17866686,0.2172852,-0.9808234,-0.23228356,0.2118442,0.10198575,0.1471471,-0.39030397,-0.17331243,-0.061886236,0.19299534,-1.9062427,-0.4343603,-0.16382107,0.21875018,-0.20950122,-0.43180537,0.9443915,-0.6146477,-0.4335145,-0.6730031,1.2294834,0.3878287,-0.046723284,0.18352155,0.27582327,0.3318717,-0.027702577,-0.51535755,-0.14490727,-0.9733933,-0.053365737,-0.09229469,1.1189935,0.22771691,0.23981166,0.057040136,0.7040681,-1.0530405,-0.89667386,0.55465585,-0.021368016,-0.4232764,0.46422043,-0.5050802,-0.7903528,0.47913826,1.2219976,-0.43710518,-0.6150671,-0.7687585,1.6304147,-0.60723305,0.05541832,-0.62322634,-0.10085118,0.19409485,0.41609955,0.48510236,-0.29755867,0.10254642,-0.66557145,0.25091365,-0.20784467,0.5773976,-0.28621298,0.6147195,0.22869086,0.5749138,0.7006762,0.5889112,0.51247275,0.91118336,0.083334625,-0.68790776,0.36048162],"result":{"type":"object","properties":{"authors":{"items":{"type":"string"},"type":"array"},"keywords":{"items":{"type":"string"},"type":"array"},"publish_date":{"type":"string"},"summary":{"type":"string"},"text":{"type":"string"},"title":{"type":"string"},"top_image":{"type":"string"}},"required":["title","authors","publish_date","summary","keywords","top_image","text"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}