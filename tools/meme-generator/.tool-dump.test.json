{"type":"Deno","content":[{"toolkit_name":"meme-generator","name":"Generate Meme","author":"Shinkai","version":"1.0.0","js_code":"import { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { getHomePath } from './shinkai-local-support.ts';\nimport axios from 'npm:axios';\n\ntype Run<C, P, R> = (configurations: C, parameters: P) => Promise<R>;\n\ninterface Configurations {\n  username: string;\n  password: string;\n}\n\ninterface Parameters {\n  joke: string;\n}\n\ninterface Result {\n  memeUrl: string;\n}\n\ninterface MemeTemplate {\n  id: string;\n  name: string;\n  url: string;\n  width: number;\n  height: number;\n  box_count: number;\n}\n\n// Split joke into two parts intelligently\nasync function splitJoke(joke: string, parts: number = 2): Promise<[string, string]> {\n    let retries = 0;\n    while (retries < 3) {\n    const result = await shinkaiLlmPromptProcessor({ prompt: `\n<rules>\n* split the joke into ${parts} lines, so its writable in a meme image.\n* write no additional text or comments\n* output EXACTLY JUST the EXACT text and nothing else, any other data will make the output invalid\n</rules>\n\n<joke>\n${joke}\n</joke>\n`});\n    console.log('Joke split', result);\n    const split_parts = result.message.split('\\n');\n    if (split_parts.length !== parts) {\n      retries++;\n      continue;\n    }\n    return split_parts;\n  }\n  throw new Error('Failed to split joke');\n}\n\nlet memes: MemeTemplate[] = [];\n// Get popular meme templates from Imgflip API\nasync function getMemeTemplates(): Promise<MemeTemplate[]> {\n  if (memes.length > 0) {\n    return memes;\n  }\n  const response = await fetch('https://api.imgflip.com/get_memes');\n  console.log('Fetching meme templates...');\n  const data = await response.json();\n  if (!data.success) {\n    throw new Error('Failed to fetch meme templates');\n  }\n  memes = data.data.memes;\n  return memes;\n}\n\n// Select the best template based on joke content and template characteristics\nasync function selectTemplate(joke: string): Promise<MemeTemplate> {\n  let retries = 0;\n  while (retries < 3) {\n    const templates = await getMemeTemplates();\n    const list = templates.map(m => m.name).join('\\n');\n    const result = await shinkaiLlmPromptProcessor({ prompt: `\n<rules>\n* templates tag is a list of meme templates names. \n* write no additional text or comments\n* output EXACTLY JUST the EXACT line and nothing else, any other data will make the output invalid\n* output the line that matches best the joke tag\n</rules>\n\n<templates>\n${list}\n</templates>\n\n<joke>\n${joke}\n</joke>\n\n`});\n    const meme = templates.find(m => m.name.toLowerCase().match(result.message.toLowerCase()))\n    if (meme) {\n      console.log('Selected Template:', result);\n      return meme;\n    }\n    retries++;\n  }\n  throw new Error('Failed to select template');\n}\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations,\n  parameters,\n): Promise<Result> => {\n  try {\n    // Select best template based on joke content\n    const template = await selectTemplate(parameters.joke);\n    console.log(`Selected template: ${template.name}`);\n    // Split the joke into two parts\n    const parts = await splitJoke(parameters.joke);\n\n    const params = new URLSearchParams();\n    params.append('template_id', template.id);\n    params.append('username', configurations.username);\n    params.append('password', configurations.password);\n    for (let i = 0; i < parts.length; i += 1) {\n      params.append('text' + i, parts[i]);\n    }\n    console.log('Sending request to Imgflip API...');\n    const response = await axios.post('https://api.imgflip.com/caption_image', params);\n    console.log('Response from Imgflip API:', response.data);\n    return { memeUrl: response.data.data.url };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.log(error);\n      throw new Error(`Failed to generate meme: ${error.message}`);\n    }\n    throw error;\n  }\n};\n","tools":["local:::rust_toolkit:::shinkai_llm_prompt_processor"],"config":[{"BasicConfig":{"key_name":"username","description":"The username for the Imgflip API","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"password","description":"The password for the Imgflip API","required":true,"type":null,"key_value":null}}],"description":"Generates a meme based on a joke input","keywords":["meme","joke","imgflip"],"input_args":{"type":"object","properties":{"joke":{"type":"string","description":"The joke to process"}},"required":["joke"]},"output_arg":{"json":""},"activated":false,"embedding":[0.057505086,0.6685053,-0.517989,-0.3476782,-0.7055285,0.09370519,-0.4319828,-0.32998192,0.298339,0.33220577,-0.79699767,0.4125874,0.39018846,-0.036475763,0.7415977,-0.22836962,0.0472219,0.058711432,-1.6629539,-0.73289096,-0.040703364,0.9354174,0.14721769,0.09422314,-0.41425583,0.27672252,0.5185732,-0.1257408,-0.61215127,-1.9556895,0.61427945,0.6355894,-0.60025924,-0.2910193,-0.2824554,-0.6661759,-0.09173884,-0.3114729,0.21213333,-0.034394592,0.86611027,-0.22092195,-0.21403849,-0.22941273,0.062100008,-0.25595397,0.7769081,0.20399222,0.8267384,0.72214293,-0.5416966,-0.3695228,0.76538175,0.03883244,-0.24809578,0.23105904,-0.19400552,-0.42183444,0.23005457,0.18614146,-0.21372738,0.23538938,-3.7806897,-0.12326965,0.6567898,-0.053221114,0.094132066,-0.29227608,-0.18183415,0.23715922,0.4526227,0.1993196,-0.69869447,0.7273747,-0.12710033,0.07643325,0.16168907,0.0428144,0.8282492,-0.20848954,0.30370885,0.26422203,0.22275637,0.23099077,-0.33316317,0.53093857,-0.013248408,-0.34815452,0.3123394,0.10786462,-0.3626714,-0.2373614,0.23021165,-0.15855658,-0.194403,0.18776315,0.11128634,-0.4062997,0.3530034,3.130662,0.86833745,-0.13836758,0.5821791,-0.6797521,0.5727946,-0.30249247,-0.061984755,-0.4132182,0.2226598,-0.0678229,0.29314214,-0.38270938,-0.22537947,0.09127201,0.6957288,0.2873492,-0.7776514,-0.028156284,0.27485454,0.073590405,-0.3882563,0.28151533,-1.3006755,-0.3157522,0.123180345,0.22778174,-0.32415667,0.14445412,0.007911749,0.081541955,0.47547358,-0.36630988,-0.4934693,-0.2074946,0.05388158,0.232898,0.553533,-0.6715281,0.1932174,-0.3085716,0.3351376,-1.363379,0.734969,-0.1565063,0.5894259,-0.044775605,-0.45101947,0.2696287,-0.5023076,-0.60415035,0.04084552,-0.10784629,0.15021178,0.19775899,1.2387829,-0.31667414,-0.39387703,-0.041417718,0.10682877,0.75504774,0.06422199,-0.06478228,0.63166374,0.5177186,-0.04223802,-0.36090568,0.28484413,0.08823517,0.43838108,-0.28734127,0.32779717,0.049709685,-0.01214394,0.20285523,-0.11238867,-0.21641168,-0.2121078,0.19903588,0.41448513,-0.29283214,0.30472928,0.60675186,-0.13407822,-1.2890699,0.041628875,0.11903406,0.007325001,-0.1614547,0.38815936,0.33649406,-0.32848987,1.1334878,-0.60116094,-0.2507829,0.10511426,0.2107982,0.6655856,0.5511802,0.8474099,0.034283057,-0.57301915,0.23893082,-0.39841065,0.017137349,-0.074151166,-0.3216117,0.40247178,-0.0051013883,-0.088785574,-0.6216082,-0.11501743,0.23506549,1.1210735,0.3986808,0.86238277,0.025657853,0.18939167,-0.23976612,0.39826095,0.40993983,0.4399785,0.10951381,-0.51178133,-0.36892635,-0.2942465,0.39413816,-0.3984095,-0.2097725,-0.34911415,-0.34170374,0.81921965,0.6903187,-0.033033215,1.4135969,0.5062664,0.6079235,-0.12901226,0.07736077,-0.00840348,-1.1500498,0.49011332,-0.32939225,-0.041988693,-0.68722856,-0.25973597,-0.7418723,-0.30292895,-0.38875264,0.03238973,1.822439,0.61901075,-0.5136252,0.5335971,0.31609446,-0.16424105,-0.16251981,-1.9196913,-0.65422255,-0.5224259,0.28011554,-0.10413915,-0.3258147,0.15759297,-0.24091856,-0.74633294,-0.092745036,-0.18434589,-1.0144882,-0.062643096,-0.3591745,0.2328938,0.3634361,-0.3733335,0.5525807,-0.017271766,-0.05572372,0.69934976,0.117592946,-0.234097,-0.84573424,0.096564874,0.3671006,0.10621533,0.28261563,-0.5168652,-0.550785,-0.48094112,0.03625466,-0.014927506,0.33750343,0.026615642,-0.42535308,0.17217538,0.12152904,2.0427146,0.12657452,0.89627665,0.8467276,-0.3868407,0.022349477,0.29937357,0.045864236,0.057090584,-0.5621704,-1.4851835,-0.7409371,-0.007622361,-0.38919535,-0.4624828,-0.18642339,0.024074063,-0.3016637,0.19543079,0.40232205,-0.04173606,0.08877083,0.2651491,0.50727487,0.10103196,-2.5450573,-0.10575667,0.3124023,-0.02719023,-0.4343011,0.10374354,0.34421456,-0.11861617,0.7316077,-0.09954877,1.5760963,0.43299526,-0.021070778,0.25391617,0.12108723,1.3164853,-0.16503069,-0.37277135,-0.57611287,-0.8784219,-0.08835712,0.3209611,2.0335217,0.077032425,0.5086196,-0.0035149176,-0.39771408,-0.4007274,-1.2733173,0.24887495,0.26418215,-0.31829572,0.3814209,-0.067677766,-0.35750306,0.24802513,0.55045766,-0.39490792,-0.03503508,-0.3860062,1.2438438,-0.15531044,-0.11155514,-0.15073621,-0.26826543,0.2100819,-0.45424688,0.16227876,-0.5321678,0.12835361,0.4792713,0.3420975,-0.1552496,0.30347943,0.021630373,0.316268,0.030866075,0.07061368,0.1777265,0.75995547,0.1535614,0.3483629,0.09174441,-0.44848153,-0.43495268],"result":{"type":"object","properties":{"memeUrl":{"description":"The URL of the generated meme","type":"string"}},"required":["memeUrl"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null},false]}