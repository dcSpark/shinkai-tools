{"type":"Deno","content":[{"name":"X/Twitter Search","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"type CONFIG = {\n    apiKey: string;\n};\n\ntype INPUTS = {\n    command: 'search-top' | 'search-suggestions' | 'search-latest' | 'get-user-posts' | 'get-post-by-id';\n    searchQuery?: string;\n    username?: string;\n    tweetId?: string;\n};\n\ntype OUTPUT = {\n    data: any;\n};\n\nconst baseUrl = 'https://twttrapi.p.rapidapi.com';\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n    const { apiKey } = config;\n    let url: string;\n\n    switch (inputs.command) {\n        case 'search-top':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-top command.');\n            }\n            url = `${baseUrl}/search-top?query=${inputs.searchQuery}`;\n            break;\n        case 'search-suggestions':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-suggestions command.');\n            }\n            url = `${baseUrl}/search-suggestions?query=${inputs.searchQuery}`;\n            break;\n        case 'search-latest':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-latest command.');\n            }\n            url = `${baseUrl}/search-latest?query=${inputs.searchQuery}`;\n            break;\n        case 'get-user-posts':\n            if (!inputs.username) {\n                throw new Error('\"username\" is required for get-user-posts command.');\n            }\n            url = `${baseUrl}/user-tweets?username=${inputs.username}`;\n            break;\n        case 'get-post-by-id':\n            if (!inputs.tweetId) {\n                throw new Error('\"tweetId\" is required for get-post-by-id command.');\n            }\n            url = `${baseUrl}/get-tweet?tweet_id=${inputs.tweetId}`;\n            break;\n        default:\n            throw new Error('Invalid command provided.');\n    }\n\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'x-rapidapi-host': 'twttrapi.p.rapidapi.com',\n            'x-rapidapi-key': apiKey,\n        },\n    });\n\n    const data = await response.json();\n    return { data };\n}","tools":[],"config":[{"BasicConfig":{"key_name":"apiKey","description":"Get your API Key from RapidAPI's Twitter API service at <https://rapidapi.com/twttrapi-twttrapi-default/api/twttrapi>. This allows access to X/Twitter data without requiring direct X/Twitter API credentials","required":true,"type":null,"key_value":null}}],"description":"Fetch from X/Twitter API to perform various search and retrieval operations.","keywords":["X","Twitter","API","search","tweets"],"input_args":{"type":"object","properties":{"tweetId":{"type":"string","description":"The ID of the tweet to retrieve"},"username":{"type":"string","description":"The username for retrieving user posts"},"command":{"type":"string","description":"The exact command to execute: 'search-top' | 'search-suggestions' | 'search-latest' | 'get-user-posts' | 'get-post-by-id'"},"searchQuery":{"type":"string","description":"The search query for fetching tweets"}},"required":["command"]},"output_arg":{"json":""},"activated":false,"embedding":[0.43029955,0.21160144,-0.054207597,-0.3326729,-0.015009295,-0.2478686,-0.9055777,-0.32337016,0.41432998,0.055565797,-0.4771546,0.5255569,-0.18079342,0.105774485,0.5903803,-0.056564227,0.1921749,-0.7971181,-1.8148577,-0.0825128,0.68687314,0.7953943,0.09952081,-0.108382836,-0.100384496,0.08697617,0.03473937,-0.615734,-1.418086,-1.9102252,0.52499974,0.8693483,-0.24536288,-0.12586153,-0.13745889,-0.2946945,-0.27305073,0.03952084,-0.1674015,0.26557058,-0.49265036,0.08041132,-0.6783144,0.19785732,-0.2981489,-0.58278245,-0.20520929,0.075035304,0.41776428,0.8872244,-0.07348953,-0.59252775,0.24713127,0.52928776,-0.5297413,-0.531633,-0.51084536,-0.24225026,-0.19075772,-0.05546318,0.37474805,0.16685525,-4.009709,-0.075616315,0.03254316,-0.32889408,-0.09692494,0.09085466,0.27587348,0.30200797,0.17386803,0.04714591,0.0460212,-0.18037459,-0.03323009,-0.693346,0.51532847,-0.3081589,0.54599386,0.1807839,0.5625449,0.54059917,-0.22810803,0.21848714,-0.16268201,0.8133205,-0.6930791,-0.44531393,0.3766086,0.36726454,-0.4103019,-0.30781665,0.2804509,-0.0073847435,-0.31353134,0.52056193,-0.017258335,0.26131237,0.1723238,3.051526,0.7389569,0.07546793,0.26109102,-0.46537942,-0.23081127,-0.628966,0.18453969,-0.09514858,0.2936505,-0.23304343,0.026129495,-0.09777632,-0.042771682,-0.014558056,-0.20103924,-0.4728825,-0.30348516,0.43724504,0.1182705,0.5589921,-0.5710836,0.45090827,-0.8937369,0.00980852,-0.5310802,0.16929957,-0.47276276,0.21476077,0.4888006,-0.48113158,1.0343367,-0.9718337,-0.9683593,-0.005990345,0.028393077,0.47169137,-0.16887082,-0.85423696,0.1056526,-1.1181312,0.33867562,-1.956406,0.78076303,-0.1456816,0.8146756,0.8972112,-0.14275074,-0.030500777,-0.26798043,0.37589586,0.30543932,0.2096637,-0.28103542,0.21969724,1.0511639,0.11926637,-0.36237508,-0.17191121,-0.34260225,-0.0790282,-0.27439764,0.24863039,0.65059346,-0.111773595,0.0697235,-0.52998865,0.5379433,0.10495481,0.2435309,0.16280857,0.6284262,-0.1561031,-0.40391386,0.45327953,-0.59795105,-0.065422304,-0.6309725,-0.23927245,0.018446082,-0.63613164,0.3582072,1.1402104,-0.3804746,-0.3515918,-0.17956507,0.11163507,0.23856735,0.13868326,0.9674108,1.1866643,0.09903603,1.5916396,-0.34105694,-0.55386806,0.007966933,-0.5830402,-0.093979,0.7004922,0.32574993,-0.3243525,-0.45066088,-0.19872777,-0.09209277,-0.31964254,-0.3929705,-0.04796861,0.83089733,-0.2769018,0.56214416,-0.3368822,0.29021093,-0.73765373,0.58044356,0.2958913,0.23657042,0.14360908,0.035670105,-0.25732535,-0.2402476,0.23637289,0.024678536,0.46649814,-0.34181154,-0.6019795,0.26625428,-0.2660284,-0.21789429,0.27807552,-0.36758947,-0.5457134,0.4125638,0.6968213,0.28414512,1.4063368,1.0287648,0.17390543,-0.40932256,0.96145284,0.44606504,-0.28408176,0.5222514,-0.14341645,-0.071743816,-0.014375307,0.0457293,-0.5292182,-0.42700133,-0.19311188,-0.04964836,1.4963064,0.514696,0.49269992,0.2170822,0.36918232,-0.24623209,-0.24404183,-2.4468496,-0.11857844,0.113804154,0.60289156,-0.0047579743,-0.19429576,0.5083998,-0.38649562,-0.020886004,0.26779458,-0.6757593,0.06131444,0.08914844,-0.24533117,-0.68199366,0.6959567,-0.09059541,-0.601385,0.18522644,0.38818714,-0.20253417,0.14668855,-0.8050991,0.07765401,0.0111056045,0.22669296,0.29754886,0.019238494,-0.42359915,-0.34240136,-0.3116131,0.20084321,-0.33959755,-0.07154827,0.03898575,-0.4193792,-0.47831628,0.2980008,1.6281416,0.12340388,0.41378796,0.48659712,0.01985909,0.21235053,-0.018726327,-0.1006233,-0.034059264,-0.017257906,-0.46251574,-0.6072202,0.3019631,-0.8287481,-0.15052593,0.09645967,-0.010989957,0.7729598,0.46177542,-0.6939015,0.85689646,-0.8812404,-0.13040547,0.52682006,0.25000957,-2.088044,0.4601266,0.5558857,0.11391075,-0.3532498,-0.15931585,0.4269929,-0.6422003,0.3540134,-0.27106726,1.470984,0.22477819,-0.36941326,-0.18645084,-0.18274505,0.7411711,0.43660143,-0.5455872,-0.003666062,-0.5456559,0.011991773,0.25300562,1.6926444,0.3141478,0.86764437,0.54612327,0.24850658,-0.8220099,-1.3959357,0.2781034,-0.05779364,-0.4858996,0.5331565,0.013034221,-0.3133007,0.60336703,1.2729874,0.04078378,-0.27108112,-0.008593881,1.8823286,0.3297958,-0.26234803,-0.5750367,0.2265807,0.1175086,0.55548507,0.08551051,-0.5338266,0.14096275,0.15596983,0.10570143,-0.41598082,-0.13693762,0.24622652,-0.006024599,0.62045527,0.38400945,0.59155387,0.259111,0.58821213,0.64038664,0.29456148,-0.950533,-0.04013814],"result":{"type":"object","properties":{"data":{"description":"The data returned from the Twitter API","type":"object"}},"required":["data"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}