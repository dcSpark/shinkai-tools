{"type":"Python","content":[{"version":"1.0.0","name":"macos-calendar","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#   \"requests\",\n# ]\n# ///\n\nfrom typing import Dict, Any, Optional, List\nimport subprocess\nfrom datetime import datetime\n\nclass CONFIG:\n    pass\n\nclass INPUTS:\n    command: str  # \"addEvent\", \"listToday\", or \"listWeek\"\n    title: Optional[str] = None  # for addEvent\n    start_date: Optional[str] = None  # \"YYYY-MM-DD HH:mm:ss\"\n    end_date: Optional[str] = None\n    calendar_name: Optional[str] = \"Calendar\"  # default calendar\n\nclass OUTPUT:\n    result: str\n\nasync def run_applescript(script: str) -> str:\n    \"\"\"Helper function to run AppleScript and return its output.\"\"\"\n    try:\n        result = subprocess.run(['osascript', '-e', script], \n                              capture_output=True, \n                              text=True, \n                              check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        return f\"Error: {e.stderr.strip()}\"\n\ndef make_applescript_date(iso_string: str, var_name: str) -> str:\n    \"\"\"Convert ISO date string to AppleScript date setting commands.\"\"\"\n    # Parse \"2025-01-01 14:30:00\"\n    dt = datetime.strptime(iso_string, \"%Y-%m-%d %H:%M:%S\")\n    return f\"\"\"\n        set {var_name} to current date\n        set year of {var_name} to {dt.year}\n        set month of {var_name} to {dt.month}\n        set day of {var_name} to {dt.day}\n        set hours of {var_name} to {dt.hour}\n        set minutes of {var_name} to {dt.minute}\n        set seconds of {var_name} to {dt.second}\n    \"\"\"\n\nasync def get_available_calendars() -> List[str]:\n    \"\"\"Get list of available calendar names.\"\"\"\n    script = \"\"\"\n        tell application \"Calendar\"\n            set calList to \"\"\n            repeat with c in calendars\n                set calList to calList & name of c & \"|\"\n            end repeat\n            return text 1 thru -2 of calList\n        end tell\n    \"\"\"\n    result = await run_applescript(script)\n    if result.startswith(\"Error:\"):\n        return []\n    return [name.strip() for name in result.split(\"|\") if name.strip()]\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    output = OUTPUT()\n    script = \"\"\n\n    if inputs.command == \"addEvent\":\n        if not inputs.title or not inputs.start_date or not inputs.end_date:\n            raise ValueError('Missing \"title\", \"start_date\", or \"end_date\" for addEvent')\n        \n        # Get available calendars\n        calendars = await get_available_calendars()\n        if not calendars:\n            raise ValueError(\"No calendars available in the system\")\n        \n        print(f\"Available calendars: {calendars}\")  # Debug logging\n        \n        # Use specified calendar if it exists, otherwise use first available\n        calendar_name = inputs.calendar_name if inputs.calendar_name in calendars else calendars[0]\n        print(f\"Using calendar: {calendar_name}\")  # Debug logging\n        \n        script = f\"\"\"\n            tell application \"Calendar\"\n                {make_applescript_date(inputs.start_date, 'theStartDate')}\n                {make_applescript_date(inputs.end_date, 'theEndDate')}\n                tell calendar \"{calendar_name}\"\n                    make new event with properties {{summary:\"{inputs.title}\", start date:theStartDate, end date:theEndDate}}\n                end tell\n            end tell\n            return \"Event added: {inputs.title}\"\n        \"\"\"\n\n    elif inputs.command in [\"listToday\", \"listWeek\"]:\n        period = \"today\" if inputs.command == \"listToday\" else \"this week\"\n        script = f\"\"\"\n            tell application \"Calendar\"\n                try\n                    -- Initialize dates\n                    set periodStart to current date\n                    set time of periodStart to 0\n                    \n                    if \"{period}\" is \"today\" then\n                        set periodEnd to periodStart + 1 * days\n                    else\n                        -- Calculate week boundaries\n                        set weekday_num to weekday of periodStart\n                        if weekday_num is not 1 then\n                            set periodStart to periodStart - ((weekday_num - 1) * days)\n                        end if\n                        set periodEnd to periodStart + 7 * days\n                    end if\n                    \n                    set output to \"\"\n                    \n                    -- Get events from each calendar\n                    repeat with cal in calendars\n                        try\n                            set calName to name of cal\n                            \n                            -- Query events\n                            tell cal\n                                set eventList to (every event whose start date is greater than or equal to periodStart and start date is less than periodEnd)\n                                repeat with evt in eventList\n                                    set evtSummary to summary of evt\n                                    set evtStart to start date of evt\n                                    set output to output & \"[\" & calName & \"] \" & evtSummary & \" at \" & (evtStart as string) & linefeed\n                                end repeat\n                            end tell\n                            \n                        on error errMsg\n                            set output to output & \"Error with calendar \" & calName & \": \" & errMsg & linefeed\n                        end try\n                    end repeat\n                    \n                    if output is equal to \"\" then\n                        return \"No events {period}\"\n                    end if\n                    return text 1 thru -2 of output\n                    \n                on error errMsg\n                    return \"Error: \" & errMsg\n                end try\n            end tell\n        \"\"\"\n\n    else:\n        raise ValueError(f\"Unknown command: {inputs.command}\")\n\n    output.result = await run_applescript(script)\n    return output ","tools":[],"config":[],"description":"Add or list calendar events using AppleScript","keywords":["macos","calendar","events","automation"],"input_args":{"type":"object","properties":{"title":{"type":"string","description":"Title of the event"},"command":{"type":"string","description":"Command to execute: addEvent to create new event, listToday to show today's events"},"end_date":{"type":"string","description":"Event end date/time in 'YYYY-MM-DD HH:mm:ss'"},"calendar_name":{"type":"string","description":"Name of the calendar to add the event to (default 'Calendar')"},"start_date":{"type":"string","description":"Event start date/time in 'YYYY-MM-DD HH:mm:ss'"}},"required":["command"]},"output_arg":{"json":""},"activated":false,"embedding":[0.24084587,-0.13054197,0.115952075,-0.5670627,0.55400145,0.3724088,-0.34792954,-0.30986995,-0.10935141,-0.2831021,-0.33521658,0.29728556,-0.34364122,0.113956176,0.34236005,-0.5669402,0.5497406,-0.8209586,-1.0082326,-0.3299431,-0.042138785,0.46002197,0.41764608,0.19034086,-0.27857196,0.15349892,-0.10701814,0.12228526,-1.1768771,-1.930644,0.12178117,0.29909512,0.45179,0.4289923,-0.10483775,-0.988694,-0.6309124,0.014926374,-0.50156546,-0.10569784,0.037413016,0.1277764,0.051669233,-0.71676904,0.30627093,-0.8356111,0.5884202,-0.30231804,0.5472805,0.27792078,-0.24424031,-0.3262673,0.35899663,0.47613832,-0.5770343,0.5492369,-0.34192324,0.0053697564,-0.025961436,0.06948468,-0.47369802,0.06316328,-3.6688788,-0.20218213,0.7696843,0.7126292,-0.31071874,-0.13415943,-0.2260326,0.60795486,0.12137565,-0.3096332,-0.11700893,0.80893207,-0.029856166,-0.5963228,-0.4374839,-0.15569307,0.6523998,-0.22706431,0.08896728,0.79468584,-0.48470566,0.6419803,-0.9004753,0.24069561,-0.24885494,-0.7689905,0.24519108,0.19970231,-0.22545347,0.54614013,0.4867689,-0.32814014,0.066765204,0.08893764,-0.25170514,0.5897064,0.010110252,2.914065,0.6051908,-0.2786985,0.3181174,-0.7074387,0.023756258,-0.3378815,-0.55057,-0.041310042,-0.46205893,0.05666876,-0.016072102,-0.28926784,-0.05615346,-0.016171165,0.51365083,0.21458536,-0.2784729,0.282782,-0.727788,0.33236206,-0.2087987,-0.18333468,-0.5575275,-0.054069825,-0.6560057,-0.42970628,-0.29381347,0.2635289,0.25900942,-0.77823347,0.48191077,-0.48746774,-0.5377458,-0.19048321,0.5281925,-0.02034691,-0.21956457,-0.84270614,0.29977453,0.08398523,0.39029318,-1.5423375,1.3835688,-0.10255715,0.4324179,0.4737026,0.49021474,0.038954467,-0.48832446,-0.2394307,-0.6326721,0.21042034,-0.29012564,-0.04160076,0.730331,0.11489114,-0.5526874,0.29664135,-0.5742921,0.4110739,0.2727481,-0.098180436,0.8071444,0.33471277,-0.079090066,-1.0416118,0.60287243,-0.0805808,0.28724337,-0.043477606,0.13221489,-0.20123607,0.2091733,0.6300024,0.098516434,0.61672586,-1.3657084,-0.22924986,0.63124967,-0.2640821,0.10134533,0.08115788,-0.48301712,-0.33978167,-0.07268516,1.1314325,0.4599465,0.46231392,0.5468406,0.9107449,0.12149786,2.141387,-1.1155499,-0.5488199,-0.16393864,0.7274497,0.29022086,0.8779394,0.055320553,0.48332462,-0.49716926,-0.6179452,-0.10198602,-0.02354636,0.39600843,-0.6711352,0.92489576,0.0890419,0.2233717,-0.33449867,-0.06304623,0.45115972,0.5762284,0.36348984,0.19175181,1.0817775,0.05599926,-0.058030207,0.19622824,0.1299483,0.7588511,0.91664624,-0.8908944,-0.10964879,-0.313331,-0.39148653,0.4758674,-0.9162775,-0.15767002,-0.55750066,0.45125568,-0.11364978,0.3256274,0.21525678,0.59927434,0.047237683,0.17137972,0.45717672,0.46566132,-0.88078004,-0.2677644,0.33886716,0.36786938,-0.20727947,0.47920093,0.68037486,-0.120971814,-0.2090404,0.05577652,1.3701646,0.45355183,0.67403704,0.6056147,-0.048698906,-0.50837547,-0.31270722,-1.2136756,0.17304286,-0.054585576,0.7167947,0.5094481,-0.5180493,0.4482974,0.50991243,-0.87429714,-0.46025452,-0.08169192,-0.44858626,0.07167619,0.010578968,-0.670228,0.9182925,-0.51855683,0.12697238,-0.3156856,-0.14583482,0.8591043,-0.2275753,-0.37083945,-1.0473256,-0.68257546,-0.37456563,0.3259909,0.45016462,0.24171919,-1.1694219,0.17098808,-0.3099727,-0.643004,-0.23717323,-0.21246493,-1.5493573,0.25576577,0.10588311,2.9276302,-0.070474386,0.25998455,0.9223976,0.1715294,-0.018470004,-0.21358564,0.03269106,-0.39115545,-0.39203736,-1.1130232,-0.16983336,0.5148885,-0.471108,-0.10848551,0.63807964,-0.16836393,0.3490545,0.22681749,-0.020830527,1.2583841,-0.35575885,0.580348,0.9610281,-0.4987457,-2.0175254,-0.03042052,-0.13823482,0.18873087,-0.5185498,-0.28590497,0.43438637,0.60977834,0.22402687,-0.3834632,1.3136519,0.51509917,0.13937005,-0.4372589,-0.097712934,0.91980314,-0.07182715,0.75129676,0.046730097,-0.91400725,-0.28728735,0.7387859,1.4654028,-0.043629885,0.13343795,-0.05951313,-0.021064974,-0.1785484,-0.80715495,0.32261345,0.5077842,-0.59436196,0.4932473,0.37026206,-0.16685817,0.60666126,0.8718438,-0.8816702,-0.13763647,-0.7622934,1.4222801,-0.0058856104,0.24345453,-0.43616313,-0.3902143,0.71076214,0.0060428903,0.7954583,0.28959715,-0.38009816,0.4415986,-0.42146003,-0.7566108,-0.03280762,-0.18373977,0.35722783,0.39993155,-0.24660431,0.19217762,0.26992846,-0.108007535,-0.31760967,-0.012318198,-0.22083013,-0.61402327],"result":{"type":"object","properties":{"result":{"description":"Message describing what happened","type":"string"}},"required":["result"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}