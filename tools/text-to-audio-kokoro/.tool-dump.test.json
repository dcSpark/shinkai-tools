{"type":"Python","content":[{"name":"Text to Audio","tool_router_key":"local:::__official_shinkai:::text_to_audio","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"kokoro-onnx\",\n#   \"soundfile\",\n#   \"pathlib\",\n#   \"requests\",\n#   \"onnxruntime\",\n#   \"numpy\"\n# ]\n# ///\n\nfrom kokoro_onnx import config, Kokoro\nfrom pathlib import Path\nimport soundfile as sf\nfrom typing import Optional, Dict, Any, List\nimport os\nimport requests\nimport onnxruntime as ort\nimport time\nimport numpy as np\nfrom shinkai_local_support import get_home_path\n\n# Configure Kokoro settings\nconfig.MAX_PHONEME_LENGTH = 128\n\n# URLs from the official kokoro-onnx repository\nMODEL_URL = \"https://github.com/thewh1teagle/kokoro-onnx/releases/download/v1.0/kokoro-v1_0.onnx\"\nVOICES_URL = \"https://github.com/thewh1teagle/kokoro-onnx/releases/download/v1.0/voices.bin\"\n\ndef download_file(url: str, local_path: str) -> None:\n    print(f\"Downloading {url}...\")\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    total_size = int(response.headers.get('content-length', 0))\n    block_size = 8192\n    downloaded = 0\n    start_time = time.time()\n    \n    with open(local_path, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=block_size):\n            downloaded += len(chunk)\n            f.write(chunk)\n            # Show download progress\n            if total_size > 0:\n                progress = (downloaded / total_size) * 100\n                elapsed = time.time() - start_time\n                speed = downloaded / (1024 * 1024 * elapsed) if elapsed > 0 else 0  # MB/s\n                print(f\"Download progress: {progress:.1f}% ({speed:.1f} MB/s)\", end='\\r')\n    print(\"\\nDownload complete!\")\n\nclass CONFIG:\n    model_path: str = \"kokoro-v1_0.onnx\"\n    voices_path: str = \"voices.bin\"\n    providers: Optional[List[str]] = None  # ONNX providers (e.g. [\"CPUExecutionProvider\", \"CUDAExecutionProvider\"])\n\nclass INPUTS:\n    text: str  # The text to convert to audio\n    voice: str = \"af_sky\"  # Default voice from: af, af_bella, af_nicole, af_sarah, af_sky, am_adam, am_michael, bf_emma, bf_isabella, bm_george, bm_lewis\n    language: str = \"en-gb\"  # Currently only English is fully supported\n    speed: float = 1.0  # Default speed\n    output_format: str = \"wav\"  # Default output format\n\nclass OUTPUT:\n    output_file: str\n    duration: float\n    sample_rate: int\n    chars_per_second: float\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    # Validate input text\n    if not p.text or p.text.strip() == \"\":\n        raise ValueError(\"Text input cannot be empty\")\n\n    # Get home path for file operations\n    home_path = await get_home_path()\n    model_path = os.path.join(home_path, c.model_path)\n    voices_path = os.path.join(home_path, c.voices_path)\n    \n    # Download model and voices if not present\n    if not Path(model_path).exists():\n        print(f\"Downloading model from {MODEL_URL}...\")\n        try:\n            download_file(MODEL_URL, model_path)\n        except requests.exceptions.RequestException as e:\n            raise ValueError(f\"Failed to download model: {str(e)}\")\n        \n    if not Path(voices_path).exists():\n        print(f\"Downloading voices from {VOICES_URL}...\")\n        try:\n            download_file(VOICES_URL, voices_path)\n        except requests.exceptions.RequestException as e:\n            raise ValueError(f\"Failed to download voices: {str(e)}\")\n\n    # Initialize Kokoro\n    if not (Path(model_path).exists() and Path(voices_path).exists()):\n        raise ValueError(\"Model and voices files must be present in the specified paths\")\n    \n    kokoro = Kokoro(model_path, voices_path)\n    \n    # Set ONNX providers if specified\n    if c.providers:\n        available_providers = ort.get_available_providers()\n        invalid_providers = [p for p in c.providers if p not in available_providers]\n        if invalid_providers:\n            raise ValueError(f\"Invalid ONNX providers: {', '.join(invalid_providers)}. Available providers: {', '.join(available_providers)}\")\n        kokoro.sess.set_providers(c.providers)\n        print(f\"Using ONNX providers: {', '.join(c.providers)}\")\n    \n    # Generate audio\n    start_time = time.time()\n    samples, sample_rate = kokoro.create(\n        text=p.text,\n        voice=p.voice,\n        speed=p.speed,\n        lang=p.language\n    )\n    end_time = time.time()\n    \n    # Create output filename and save audio\n    output_file = os.path.join(home_path, f\"output.{p.output_format}\")\n    sf.write(output_file, samples, sample_rate)\n    \n    # Calculate metrics\n    duration = len(samples) / sample_rate\n    chars_per_second = len(p.text) / (end_time - start_time)\n    \n    print(f\"Generated {len(p.text):,} characters in {end_time - start_time:.2f} seconds\")\n    print(f\"Processing speed: {chars_per_second:.0f} characters per second\")\n    print(f\"Audio duration: {duration:.2f} seconds\")\n    print(f\"Output saved to: {output_file}\")\n    \n    # Prepare output\n    output = OUTPUT()\n    output.output_file = output_file\n    output.duration = duration\n    output.sample_rate = sample_rate\n    output.chars_per_second = chars_per_second\n    \n    return output  ","tools":[],"config":[{"BasicConfig":{"key_name":"model_path","description":"Path to the Kokoro model file","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"voices_path","description":"Path to the voices configuration file","required":false,"type":null,"key_value":null}}],"description":"Converts text files (.txt or .md) to audio files using high-quality text-to-speech synthesis","keywords":["text-to-speech","audio","conversion","text","markdown"],"input_args":{"type":"object","properties":{"voice":{"type":"string","description":"Voice to use for synthesis"},"speed":{"type":"number","description":"Speech speed multiplier (0.5 to 2.0)"},"text":{"type":"string","description":"text to convert to audio"},"output_format":{"type":"string","description":"Output audio format"},"language":{"type":"string","description":"Language code for synthesis (e.g., en-gb, en-us, fr-fr)"}},"required":["text"]},"output_arg":{"json":""},"activated":false,"embedding":[0.26379824,0.12941879,-0.049185943,-0.5641768,-0.8633165,-0.14901665,-0.4541989,0.59742844,0.008919107,0.30693418,-0.2292099,0.9235632,-0.050906803,-0.3161725,-0.15162715,0.12968406,-0.16130276,-0.36954492,-1.5951493,-0.5662493,-0.05391607,1.134444,0.4296408,0.16055939,0.81429297,0.13577558,0.03128964,0.01541622,-0.51661587,-1.5920347,0.18624619,0.32478693,0.55401015,0.19788909,0.18764478,-0.09858065,-0.61168313,-0.3113414,-0.70016414,-0.45627677,0.38533673,-0.06504475,-0.029288355,0.19346392,0.18671472,-0.31138632,0.431001,-0.19317922,1.3446264,1.0635147,-0.760234,-0.75639975,-0.4061402,0.08435127,-0.27230632,-0.025698591,0.433873,0.16641426,0.07213092,0.089654975,-0.9206797,-0.2800497,-3.631905,-0.5905234,0.78874487,0.22859737,0.32135952,-0.24863762,0.28237572,-0.69496715,0.2551297,0.2347929,-0.23174432,0.15030074,0.12634036,-1.2251174,-0.42843777,-0.3771839,0.86088103,-0.14122616,-0.2773533,0.48223147,-0.047152042,-0.4816866,-0.59147227,0.66738343,-0.80221426,-0.649801,-0.028780892,-0.1363949,-0.20849131,-0.36547443,0.7300192,0.16330889,-0.05062233,0.35336405,0.14615476,-0.11143108,1.0599602,3.0126643,1.019807,0.27765113,0.14364451,-1.1084116,-0.88344467,-0.2636885,-0.28975698,-0.065948114,0.39592388,-0.48624405,0.27312648,-0.76755226,-0.59719205,-0.32859412,0.29827645,0.3825326,-0.8515526,0.36968756,-0.23306878,0.49100953,-0.74330896,0.17983998,0.16174355,0.23575541,-0.3128387,-0.39455265,-0.40181816,0.25368103,0.27446604,0.19284871,0.9582442,0.047649797,-0.52948695,0.0019098315,0.41398728,0.22535044,0.63059354,-0.6116735,0.17570579,0.056155033,0.14164054,-1.7444595,1.1458827,0.33209923,0.9108967,0.5517663,-0.948551,0.2617791,-0.6573723,-0.20436777,-0.036497172,0.42384857,0.0327594,-0.11426029,0.9297112,0.0578599,-0.23425257,-0.24930531,-0.5421324,0.4574658,-0.29531577,-0.2188403,0.20947933,0.07764173,0.14001232,0.1491888,0.35243964,0.19960293,0.4270097,0.3979544,-0.11426784,-0.54856133,0.3790025,0.8990173,-0.10600084,-0.2097606,-0.57948256,0.11340001,-0.23565999,-0.08486085,0.15244493,0.2100887,-0.45407867,-0.0466583,0.2690295,0.13629763,0.1585682,0.18869731,0.38221735,1.1636488,-0.07066247,1.9596456,-1.137425,-0.16344695,-0.02035843,-0.0046059377,0.5267539,0.18557629,0.04797067,0.023749245,-0.07216836,0.31827837,-0.17990433,-0.06963824,-0.17276344,-0.69656384,-0.25634277,0.1692919,-0.12821369,-0.37480772,0.1273419,-0.0789576,0.56755614,0.11289115,-0.09605247,-0.44625098,-0.1988019,0.46177077,-0.5012748,0.59509355,-0.3065888,-0.19846234,-0.18938917,-0.5689833,0.0019003823,0.42030078,-0.32606104,-0.5645798,-0.27926016,-0.7805395,0.8005752,1.3312051,1.4293627,0.9554798,0.8959179,0.3980085,0.45127496,-0.12584595,0.3250777,-0.25720236,0.4196801,0.7491851,0.48987716,-0.22635974,0.11218665,-0.9994755,-0.18850791,-0.11219406,-0.027815351,1.7698457,0.33080053,0.09260696,0.79506576,0.132596,0.55248964,-0.29106364,-1.2876849,-0.61834323,-0.071006626,1.0242858,0.20488998,0.1387775,0.09764528,0.6189434,0.46603528,-0.18883109,-0.020049272,-0.51501405,0.07673625,-0.50408804,-0.13183333,-0.10695553,-0.3324477,-0.0473539,0.46475765,-0.073658645,0.34926623,-0.24693349,-0.16137394,-0.8122647,0.65440255,-0.14998092,0.50436974,0.04765844,-0.30153537,-0.4387859,-0.023261104,-0.38601026,-0.21948779,-0.0859778,-0.009500369,-0.7497418,-0.61307514,0.22001484,1.948051,-0.12488535,-0.15354154,0.7502491,-0.21190956,0.05192823,-0.67875165,-0.016571779,-0.34527168,0.17397867,-0.17133032,0.13105059,-0.13266213,-0.23403959,-0.06453196,1.1118075,0.11757562,-0.17301789,0.03437188,-0.13136391,0.6791165,-0.25571552,0.72283167,0.051433697,-0.23812523,-2.111779,-0.5780457,0.17053065,0.14866358,-0.6516551,0.0034289937,0.48415875,-0.45725343,-0.14256944,-0.2976188,1.2853509,0.31170395,-0.21060497,-0.43447363,0.3026422,0.5974709,-0.050514635,0.22210698,-0.4289037,-0.88880795,-0.09268397,0.49783677,1.3536594,-0.07884571,0.76231015,0.11315563,-0.05439233,-0.7129416,-1.5107174,0.45261505,-0.36448687,-0.6016664,0.29307857,-0.24951267,0.51984286,-0.08102502,0.5541119,-0.36383727,-0.2820281,-0.685106,2.0512054,0.115034565,-0.38102484,-0.51721674,0.27786088,0.0073767826,-0.3092538,0.51563233,-0.9801905,0.08462793,0.21253175,0.45614725,-0.23844695,0.20487486,-0.2556901,0.8756454,0.4349892,0.17396006,0.7896478,0.2870337,0.4186443,0.4164089,-0.30332884,-0.46709198,-0.2916121],"result":{"type":"object","properties":{"duration":{"description":"Duration of the audio in seconds","type":"number"},"output_file":{"description":"Path to the generated audio file","type":"string"},"sample_rate":{"description":"Sample rate of the audio in Hz","type":"number"}},"required":["output_file","duration","sample_rate"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}