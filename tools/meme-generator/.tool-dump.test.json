{"type":"Deno","content":[{"name":"Meme Generator","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { smartSearchEngine } from './shinkai-local-tools.ts';\nimport { getHomePath, getAssetPaths } from './shinkai-local-support.ts';\nimport axios from 'npm:axios';\nimport * as path from \"jsr:@std/path\";\n\ntype Run<C, P, R> = (configurations: C, parameters: P) => Promise<R>;\n\ninterface Configurations {\n  username: string;\n  password: string;\n}\n\ninterface Parameters {\n  joke: string;\n}\n\ninterface Result {\n  memeUrl: string;\n}\n\ninterface MemeTemplate {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  width: number;\n  height: number;\n  box_count: number;\n}\n\n// Split joke into two parts intelligently\nasync function splitJoke(joke: string, parts: number = 2): Promise<[string, string]> {\n    let retries = 0;\n    while (retries < 3) {\n    const result = await shinkaiLlmPromptProcessor({ prompt: `\n<rules>\n* split the joke into ${parts} lines, so its writable in a meme image.\n* write no additional text or comments\n* output EXACTLY JUST the EXACT text and nothing else, any other data will make the output invalid\n</rules>\n\n<joke>\n${joke}\n</joke>\n`});\n    console.log('[MEME GENERATOR] Joke parts', result);\n    const split_parts = result.message.split('\\n');\n    if (split_parts.length !== parts) {\n      retries++;\n      continue;\n    }\n    return split_parts;\n  }\n  throw new Error('Failed to split joke');\n}\n\nconst checkIfExists = async (path: string) => {\n  try {\n    await Deno.lstat(path);\n    return true;\n  } catch (err) {\n    if (!(err instanceof Deno.errors.NotFound)) {\n      throw err;\n    }\n    return false;\n  }\n}\n\nlet memes: MemeTemplate[] = [];\n// Get popular meme templates from Imgflip API\nasync function getMemeTemplates(): Promise<MemeTemplate[]> {\n  if (memes.length > 0) {\n    return memes;\n  }\n  const response = await fetch('https://api.imgflip.com/get_memes');\n  const data = await response.json();\n  if (!data.success) {\n    throw new Error('Failed to fetch meme templates');\n  }\n  memes = data.data.memes;\n\n  // We search for the meme in the local database, or else we do a smart search and create the new entry\n  const final_memes: MemeTemplate[] = [];\n  const asset_database = await getAssetPaths();\n  const home_path = await getHomePath();\n\n  for (const meme of memes) {\n    const name = meme.name.replace(\"/\", \"_\").replace(\",\", \"_\");\n    const name_encoded = encodeURIComponent(name);\n    \n    /**\n     * We check if the meme is already in the asset database\n     * Names are URL encoded when stored in the asset folder.\n     * \n     * If not found, we search for it in the local database\n     * Names are not URL encoded when stored in the local database.\n     * \n     * If not found, we search for it in the smart search engine\n     * And we store the result in the local database\n     */\n    const assetExists = asset_database.find(a => {\n      const parts = a.split('/');\n      const file_name = parts[parts.length - 1];\n      return file_name === `${name_encoded}.json` || file_name === `${name}.json`;\n    })\n\n    const filePath = path.join(home_path, `${name}.json`);\n    const exists = await checkIfExists(filePath);\n    \n    let memeData = '';\n    if (exists) {\n      memeData = await Deno.readTextFile(filePath);\n    }\n    else if (assetExists) {\n      memeData = await Deno.readTextFile(assetExists);    \n    }\n    else {\n      console.log(`[MEME GENERATOR] Meme ${meme.name} not found in local database, searching...`);\n      const memeData = await smartSearchEngine({ question: `Describe this meme, and how its used: '${meme.name}'`});\n      Deno.writeFile(filePath, new TextEncoder().encode(memeData.response));\n    } \n    \n    final_memes.push({\n      ...meme,\n      description: memeData,\n    });\n  }\n  \n  return final_memes;\n}\n\n// Select the best template based on joke content and template characteristics\nasync function selectTemplate(joke: string): Promise<MemeTemplate> {\n  let retries = 0;\n  while (retries < 3) {\n    const templates = await getMemeTemplates();\n    const list = templates.map(m => m.name).join('\\\n');\n\n    const descriptions = templates.map(m => `\n<template_description=${m.name}>\n${m.description}\n</template_description=${m.name}>`).join('\\\n');\n    const prompt = `\n${descriptions}\n\n<rules>\n* templates tag is a list of meme templates names. \n* write no additional text or comments\n* output EXACTLY JUST the EXACT template line and nothing else, any other data will make the output invalid\n* output the line that matches best the joke tag\n</rules>\n\n<templates>\n${list}\n</templates>\n\n<joke>\n${joke}\n</joke>\n\n`;\n    const result = await shinkaiLlmPromptProcessor({ prompt, format: 'text' });\n    console.log('[MEME GENERATOR] prompt', prompt);\n    console.log('[MEME GENERATOR] result:', result);\n    const meme = templates.find(m => m.name.toLowerCase().match(result.message.toLowerCase()))\n    if (meme) {\n      return meme;\n    }\n    retries++;\n  }\n  throw new Error('Failed to select template');\n}\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations,\n  parameters,\n): Promise<Result> => {\n  try {\n    // Select best template based on joke content\n    const template = await selectTemplate(parameters.joke);\n    console.log(`[MEME GENERATOR] Selected template: ${template.name}`);\n    // Split the joke into two parts\n    const parts = await splitJoke(parameters.joke);\n\n    const params = new URLSearchParams();\n    params.append('template_id', template.id);\n    params.append('username', configurations.username);\n    params.append('password', configurations.password);\n    for (let i = 0; i < parts.length; i += 1) {\n      params.append('text' + i, parts[i]);\n    }\n    console.log('[MEME GENERATOR] Sending request to Imgflip API...');\n    const response = await axios.post('https://api.imgflip.com/caption_image', params);\n    console.log('[MEME GENERATOR] Response from Imgflip API:', response.data);\n    return { memeUrl: response.data.data.url };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.log('[MEME GENERATOR]', error);\n      throw new Error(`Failed to generate meme: ${error.message}`);\n    }\n    throw error;\n  }\n};\n","tools":["local:::__official_shinkai:::shinkai_llm_prompt_processor","local:::__official_shinkai:::smart_search_engine"],"config":[{"BasicConfig":{"key_name":"username","description":"The username for the Imgflip API","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"password","description":"The password for the Imgflip API","required":true,"type":null,"key_value":null}}],"description":"Generates a meme image based on a joke by selecting a template and splitting the joke into appropriate parts.","keywords":["meme","generator","joke","image"],"input_args":{"type":"object","properties":{"joke":{"type":"string","description":"The joke to create the meme from"}},"required":["joke"]},"output_arg":{"json":""},"activated":false,"embedding":[0.0777275,0.8430926,-0.38978174,-0.5294226,-0.5746239,-0.022990696,-0.7978871,-0.2066131,0.45485032,0.4897725,-0.83277565,0.6816944,0.42027655,-0.021270879,0.56834364,-0.18573569,0.25902277,-0.18405153,-1.5446639,-0.8387411,-0.5123874,0.79198337,0.24853715,-0.18293346,-0.32027185,0.12536228,0.2667939,-0.38801825,-0.80784535,-1.6222081,0.64297956,0.76523757,-0.40008393,-0.5716596,0.37249833,-0.54508394,-0.10166252,-0.17326924,0.07289652,0.23862393,0.779738,-0.22246332,-0.38279912,-0.31737298,-0.16875273,-0.23173529,0.98366266,0.1240845,0.59329784,0.89755344,-0.6195437,-0.53779244,0.65431446,-0.30814594,-0.49066737,0.4493569,-0.5126413,-0.41174316,0.29928944,-0.17271766,-0.17253554,0.18571702,-3.274001,0.12033138,1.1619065,-0.04822644,0.0933276,-0.15358679,-0.09867705,0.074068055,0.46788236,0.06625334,-0.845223,0.8110638,-0.35656255,-0.2101481,0.01448095,-0.0033321232,0.84282523,-0.19803677,0.33735347,-0.1320864,0.4340924,-0.025332838,-0.76131225,0.68198,-0.25671947,-0.15251547,0.11328435,0.14971457,-0.3595996,-0.6397837,0.37926593,0.02584228,-0.39684427,0.14254874,-0.16035798,-0.4985748,0.28725585,2.9037328,1.087657,0.070011094,0.7955273,-0.62850577,0.545097,-0.25487596,0.29858854,-0.27159166,0.23803918,0.21550207,0.3890012,-0.4034666,-0.64425015,0.25508836,0.7339159,0.07234662,-1.1503209,-0.3798337,0.3359213,0.27812713,-0.17543405,0.25682524,-1.3590764,-0.33445126,-0.10412918,0.31521803,-0.26956648,0.29050696,-0.023743378,0.029138474,0.4172408,-0.21445796,-0.5222396,0.07481636,0.018410085,0.26519486,0.50316876,-0.77253467,0.23122981,-0.37193847,0.16546792,-0.9150305,0.27509272,0.13683608,0.9057329,0.4078119,-0.15844128,0.2089101,-0.6846183,-0.7548712,0.4941739,-0.34521353,0.023373937,0.07939925,1.2021036,-0.27556273,-0.1284726,-0.17037639,0.16334867,0.64439803,0.2680221,-0.009766493,0.26971847,0.4816996,-0.13140598,-0.0032494646,-0.09980282,0.03568066,0.40090993,-0.4745772,0.47441515,0.0039153397,0.2197837,0.2268607,0.38961104,-0.6251553,-0.23479727,0.0027213618,0.63145995,-0.38806307,0.6198627,0.6320272,-0.0336053,-0.8264922,-0.26692238,0.034865152,0.22618535,-0.23511335,0.6351247,0.2627219,-0.09253825,1.2241151,-0.7431379,-0.20820637,0.2844417,0.35244697,1.0131085,0.6105587,1.0410397,-0.25475308,-0.8105281,0.14314553,0.03050017,-0.24312699,-0.27728385,-0.292912,-0.12032744,0.11103089,-0.31641328,-1.0508033,-0.05882516,-0.10920484,0.6747898,0.5665471,0.98428583,0.012536362,0.08284501,-0.18830633,0.1983279,0.092947505,0.57566226,0.28583056,-0.3689782,-0.4061515,-0.5632275,0.48336792,-0.63992196,-0.43823016,-0.55710983,-0.19351855,0.72798663,0.89255947,-0.16700172,1.3977498,0.38720295,0.530588,-0.27606234,0.226768,0.023990616,-0.9101729,0.63671523,-0.6451683,-0.15576872,-0.30424276,-0.25853407,-0.80292,-0.14650825,-0.4791051,0.074696794,1.644752,0.5368156,-0.24593773,0.71360713,0.114316404,-0.37618357,0.10421861,-2.4053419,-0.38429505,-0.45808303,0.27547073,-0.21353611,-0.63057816,0.46529204,-0.1390748,-0.70967793,-0.13852358,-0.8089405,-1.2630204,0.09245358,-0.15804684,0.54283506,0.3072906,-0.31046462,0.3572821,-0.2038737,-0.05049324,0.63937926,0.42207533,-0.30061004,-0.6308097,-0.2089423,0.54316074,-0.2414447,0.41997653,-0.7944882,-0.07196951,-0.446246,0.1529163,0.23576859,0.43343487,0.07301403,-0.32225153,0.35996565,0.022322759,2.0720272,0.16730738,0.792932,0.5510923,-0.34323075,-0.28313273,0.57351136,0.32020482,0.05985785,-1.2980523,-1.3745074,-0.61697817,0.0605781,-0.14800408,-0.5814117,-0.48592252,-0.06612944,-0.7184551,0.24157065,0.3541463,-0.030176505,0.15685007,0.30442813,0.6864481,0.17243116,-2.2496536,-0.1026803,0.7134994,0.11602918,-0.32707888,0.3392009,0.30752316,-0.25045356,0.6935954,-0.079223126,1.3465613,0.4811464,0.038754564,-0.0022811964,0.1261974,1.0381279,0.34427735,-0.2500434,-0.87336415,-0.7200571,-0.09651835,0.6836288,1.8044469,0.30626696,0.7015707,-0.1973047,-0.37953135,-0.7877249,-1.2134613,0.27681,0.63042146,-0.12520939,0.54584825,-0.2258779,-0.5579933,0.53865474,0.4827642,-0.24925408,0.09645376,-0.42925996,1.2435504,0.09353354,-0.090091124,-0.10730635,-0.55833024,0.3205474,-0.3713737,0.7009603,-0.45013246,0.1665327,0.47924826,0.38042733,-0.090180546,-0.023780614,0.5439923,0.39214194,-0.4209149,0.15833394,-0.2690752,0.70144653,0.18019448,0.6863688,0.33509484,-0.5513915,-0.46081662],"result":{"type":"object","properties":{"memeUrl":{"description":"The URL of the generated meme image","type":"string"}},"required":["memeUrl"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}