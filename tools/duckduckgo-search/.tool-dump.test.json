{"type":"Deno","content":[{"name":"DuckDuckGo Search","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"/// <reference lib=\"deno.ns\" />\n/// <reference lib=\"dom\" />\nimport { URL } from 'npm:whatwg-url@14.0.0';\nimport axios from 'npm:axios@1.7.7';\nimport process from 'node:process';\nimport puppeteer from \"https://deno.land/x/puppeteer@16.2.0/mod.ts\";\nimport chromePaths from \"npm:chrome-paths@1.0.1\"\n\ntype Configurations = {\n  chromePath?: string;\n};\ntype Parameters = {\n  message: string;\n};\ntype Result = { message: string, puppeteer: boolean };\n\ninterface SearchResult {\n  title: string;\n  description: string;\n  url: string;\n}\n\n// Custom function to build query string\nfunction buildQueryString(params: Record<string, string>): string {\n  return Object.keys(params)\n    .map(\n      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`,\n    )\n    .join('&');\n}\n\nconst getVQD = async (keywords: string): Promise<string> => {\n  const body = buildQueryString({ q: keywords });\n  await process.nextTick(() => {});\n  const response = await axios.post('https://duckduckgo.com', body, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n  });\n  const text = response.data;\n  // console.log('DuckDuckGo response HTML:', text);\n\n  // Extract vqd token using a regular expression\n  const vqdMatch = text.match(/vqd=\\\\?\"([^\\\\\"]+)\\\\?\"/);\n  // console.log('vqdMatch: ', vqdMatch);\n  if (!vqdMatch || vqdMatch.length < 2) {\n    throw new Error('Failed to retrieve vqd token');\n  }\n  const vqd = vqdMatch[1];\n  // console.log('vqd: ', vqd);\n  return vqd;\n};\n\nconst parseDuckDuckGoResponse = (response: string): SearchResult[] => {\n  // Regex to extract the JSON content\n  const jsonPattern = /DDG\\.pageLayout\\.load\\('d',(\\[\\{\\\"a\\\".*?\\}\\])\\);/;\n  const match = response.match(jsonPattern);\n\n  if (!match) {\n    throw new Error('JSON content not found in the response.');\n  }\n\n  // Extracted JSON content as string\n  const jsonString = match[1];\n\n  // Parse JSON string\n  const jsonData = JSON.parse(jsonString);\n\n  // Extract search results\n  const results: SearchResult[] = jsonData\n    .map((item: any) => ({\n      title: item.t,\n      description: item.a,\n      url: item.u,\n    }))\n    .filter(\n      (result: SearchResult) =>\n        result.title && result.description && result.url,\n    );\n\n  // console.log('results: ', results);\n  // Convert to JSON string\n  return results;\n};\n\nconst textSearch = async (keywords: string): Promise<any[]> => {\n  console.log('textSearch: ', keywords);\n  const vqd = await getVQD(keywords);\n  console.log('vqd: ', vqd);\n  const url = new URL('https://links.duckduckgo.com/d.js');\n  console.log('before url.searchParams.append');\n  url.searchParams.append('q', keywords);\n  url.searchParams.append('vqd', vqd);\n  url.searchParams.append('kl', 'wt-wt');\n  url.searchParams.append('l', 'wt-wt');\n  url.searchParams.append('p', '');\n  url.searchParams.append('s', '0');\n  url.searchParams.append('df', '');\n  url.searchParams.append('ex', '-1');\n\n  console.log('before urlString');\n  const urlString = url.toString();\n  console.log('urlString: ', urlString);\n\n  await process.nextTick(() => {});\n  const response = await axios.get(url.toString(), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  console.log('response: ', response);\n  const text = response.data;\n  console.log('DuckDuckGo search response:', text);\n\n  // Parse the response using the custom parser\n  const results = parseDuckDuckGoResponse(text);\n  if (results.length === 0) {\n    throw new Error('Failed to extract search results');\n  }\n\n  return results;\n};\n\n\nasync function searchDuckDuckGoWithPuppeteer(\n  searchQuery: string,\n  chromePath: string,\n  numResults = 10\n): Promise<SearchResult[]> {\n  // Add random delay between requests\n  const randomDelay = (min: number, max: number) =>\n    new Promise((resolve) => setTimeout(resolve, Math.random() * (max - min) + min));\n\n  const browser = await puppeteer.launch({\n    executablePath: chromePath,\n    headless: true,\n    defaultViewport: {\n      width: 1920,\n      height: 1080\n    }\n  });\n\n  try {\n    const page = await browser.newPage();\n    // Set a realistic user agent\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');\n    // Add random delay before loading page\n    await randomDelay(1000, 3000);\n    \n    await page.goto('https://duckduckgo.com/', {\n      waitUntil: 'networkidle0',\n      timeout: 30000\n    });\n\n    // Type search query with random delays between keystrokes\n    for (const char of searchQuery) {\n      await page.type('#searchbox_input', char, { delay: Math.random() * 100 + 50 });\n    }\n\n    await Promise.all([\n      page.keyboard.press('Enter'),\n      page.waitForNavigation({ waitUntil: 'networkidle0' })\n    ]);\n\n    // Wait for results to load\n    await page.waitForSelector('.react-results--main');\n    const pageContent = await page.$('.react-results--main');\n    let results: SearchResult[] = []\n    if (pageContent) {\n      // Process each `li` element inside the container\n      results = await page.evaluate((container) => {\n        // Query all `li` elements within the container\n        const listItems = container.querySelectorAll('li[data-layout=\"organic\"]');\n        // Map each `li` to extract title, snippet, and URL\n        return Array.from(listItems).map((item) => {\n          // Extract the title\n          const title = (item as HTMLElement).querySelector('article')?.children[2]?.querySelector('a')?.textContent?.trim() || 'No title';\n          // Extract the snippet (if there's more descriptive text inside the article)\n          const description = (item as HTMLElement).querySelector('article')?.children[3]?.textContent?.trim() || 'No snippet';\n          // Extract the URL (inside the <a> tag in the third child of <article>)\n          const url = (item as HTMLElement).querySelector('article')?.children[2]?.querySelector('a')?.href || 'No URL';\n          return { title, description, url };\n        });\n      }, pageContent);\n    \n      // Log the extracted results\n      results.forEach((result, index) => {\n        console.log(`Result ${index + 1}:`);\n        console.log(`  Title: ${result.title}`);\n        console.log(`  Description: ${result.description}`);\n        console.log(`  URL: ${result.url}`);\n      });\n    }\n    // Extract search results\n    await browser.close();\n    return results;\n  } catch (error) {\n    console.error('Error during scraping:', error);\n    await browser.close();\n    throw error;\n  }\n}\n\n\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (config: C, inputs: I) => Promise<R>;\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters,\n): Promise<Result> => {\n  let puppeteer = false\n  console.log('run duckduckgo search from js', 4);\n  console.log('second message', 4);\n  console.log('params: ', params);\n  try {\n    let results;\n    try {\n      results = await textSearch(params.message);\n    } catch (textSearchError) {\n      console.error('Text search failed', textSearchError);\n      console.log('Text search failed, falling back to puppeteer search');\n      puppeteer = true\n      const chromePath = configurations?.chromePath || \n        Deno.env.get('CHROME_PATH') ||\n        chromePaths.chrome || \n        chromePaths.chromium;\n      results = await searchDuckDuckGoWithPuppeteer(params.message, chromePath, 10);\n    }\n    console.log('results: ', results);\n    return { message: JSON.stringify(results), puppeteer };\n  } catch (error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    return { message: `Error: ${errorMessage}`, puppeteer };\n  }\n};","tools":[],"config":[{"BasicConfig":{"key_name":"chromePath","description":"The path to the Chrome executable. If not provided, the tool will use the CHROME_PATH environment variable or the default paths for Chrome and Chromium.","required":false,"type":null,"key_value":null}}],"description":"Searches the DuckDuckGo search engine. Example result: [{\"title\": \"IMDb Top 250 Movies\", \"description\": \"Find out which <b>movies</b> are rated as the <b>best</b> <b>of</b> <b>all</b> <b>time</b> by IMDb users. See the list of 250 titles sorted by ranking, genre, year, and rating, and learn how the list is determined.\", \"url\": \"https://www.imdb.com/chart/top/\"}]","keywords":["duckduckgo","search","shinkai"],"input_args":{"type":"object","properties":{"message":{"type":"string","description":"The search query to send to DuckDuckGo"}},"required":["message"]},"output_arg":{"json":""},"activated":false,"embedding":[0.16100998,-0.2972865,0.28343144,-0.28365922,0.18388914,-0.10808957,-0.8465683,-0.3023304,-0.06627547,0.29369032,0.3792466,-0.026051588,0.9681844,0.26845336,0.087322995,0.3903487,0.19291508,-0.01427158,-1.4823675,0.34444538,-0.22677879,0.6350529,0.5179565,0.16200225,0.14319092,-0.4128651,-0.5530627,-0.2230467,-1.4606562,-1.9088771,0.08900065,0.7296856,-0.3763809,-0.3156501,-0.09912226,-0.37506193,-0.07656356,-0.29206514,-0.81782377,-0.36994267,-0.9311228,0.4442602,0.32343307,-0.23644,-0.7575461,-0.2733088,0.8816913,-0.74153614,0.92402446,0.5694767,-0.66190016,-0.32893935,-0.44491023,-0.3451094,-0.5399374,1.2048315,-0.2909421,0.09793821,-0.15910481,-0.020140955,0.52650577,0.37241346,-3.2526927,0.31358433,1.1328849,0.6933904,0.68959427,0.091064654,0.1752654,-0.17398101,-0.18825978,-0.95673066,0.08014356,0.5557213,-0.7291533,-0.4783758,-0.12110171,0.17002639,0.38462222,-0.4842066,-0.19895557,-0.40634358,-0.2235034,0.11947982,-0.019322712,0.09932092,-0.3561139,-0.50609237,0.23464955,0.2506013,-0.61640763,-0.342651,-0.15674643,-0.22247696,-0.4245773,0.2267943,-0.3672269,0.2471618,0.3100941,3.5156467,0.34841216,0.1691641,0.4347128,-0.6274498,0.32555953,-0.20060848,-0.10614532,0.0679254,-0.13983274,0.50158745,-0.41802564,-0.24861914,0.36218542,0.14241442,-0.09090933,0.2561499,-0.26644385,0.2048601,0.12794764,0.15674706,-0.6449895,0.20134896,0.22811231,-0.15089744,-0.25931486,-0.1079388,-0.06875345,0.7953877,0.8425982,-0.11068615,0.35999143,-0.06753436,-1.3181609,0.6654049,0.0924684,0.24928874,-0.21873577,-0.66857755,0.46082357,-0.9986448,-0.7352612,-2.201773,1.1708877,0.47718638,0.76848406,-0.19161728,0.5031302,0.1496108,-0.6871553,0.17788763,0.41312823,-0.27841973,-0.44984117,0.18768121,0.62232244,-0.27507222,-0.28421694,0.6173232,-0.3947987,0.33405873,-1.0166829,0.3498147,0.5643429,0.6584611,-0.26877767,-0.29665112,-0.06166935,-0.16454384,0.48936158,-0.16242494,0.03428185,-0.24469805,0.523948,0.15534118,-0.4980276,0.28629124,0.13548969,0.18829426,-0.34546155,-1.1742584,0.26293284,0.6188773,0.12168458,-0.9323635,-0.26437372,-0.5892253,0.87057513,-0.6930339,0.50639945,0.80643785,0.0721452,0.8741952,-0.3274488,-0.42315227,-0.028165666,-0.592457,0.5175379,-0.059659854,0.12053746,-0.34061345,-0.6350129,0.16020003,0.15547402,-0.25673482,-0.7515326,-0.18881358,0.67522943,-0.6291586,0.5432324,-0.42265645,-0.3676717,-0.22558251,0.48577705,0.57183105,0.5349101,-0.3302961,0.6377336,-0.06351334,0.07104214,0.20489165,-1.014705,-0.3050776,-0.17635067,-0.8968951,0.29497743,-0.09858127,-0.45740026,-0.4069575,-0.5764778,-0.1508638,0.36897415,0.76126826,0.6924632,0.70853436,0.9247515,-0.17850634,-0.7721554,0.39465597,0.5619705,-0.8520909,0.74479973,-0.35380796,-0.039454237,0.013987482,1.0746634,-0.9367546,-0.02619151,0.23540804,-0.39120156,1.4433355,1.1657283,0.03284259,0.49836537,0.039773144,0.37719935,0.46682304,-1.6488383,0.21773447,-0.028232016,-0.22527152,-0.274859,-0.3425998,0.08941034,0.16945142,0.32578465,0.12483849,-0.41204578,-0.15444897,-0.691932,-0.15048423,0.54621094,0.991256,0.064518765,-0.025952421,0.3010644,1.0258135,-0.5665125,0.36733598,-0.45978212,-0.1464995,-0.41809174,0.44612837,0.26964265,0.8931821,-0.64659214,-0.009961138,-0.035986423,0.7815215,0.043738656,0.8328073,-0.25942641,-0.19111067,-0.18388048,0.20066437,1.144121,0.2505986,0.10948497,0.53195864,0.21859469,0.45678484,-0.4809166,-0.68843496,0.4476377,-0.006927535,-0.06847776,-0.40996197,0.61482847,-0.47733283,-0.11494335,-0.2483201,-1.1314368,-0.32275876,0.66809225,-0.5196115,1.6186441,-0.63046914,0.7337374,-0.070139706,0.46422538,-1.3247093,-0.13143204,0.19517592,-0.16072859,0.0046488047,0.2975949,0.2100708,0.20840794,-0.13572873,-0.54246527,1.3882924,0.36270496,0.23885682,-0.5642762,0.28673038,0.38420507,0.0007627439,0.9563615,-0.12331989,-0.60005033,0.6672105,0.6659407,1.0922046,0.9381502,0.25429425,0.18985675,0.3571467,-1.126372,-1.1870406,0.2297789,0.03585553,0.14784983,0.5716978,-0.16998038,-0.116081126,0.9463949,0.37174714,-0.89691967,0.09882557,-0.5518772,0.6476752,-0.13004614,0.49607557,-0.2541792,-0.17316863,1.0959044,0.48697007,0.60795015,-0.23220503,0.13188173,-0.76364,-0.30256245,-0.21257344,0.05254751,0.051760208,0.09228458,0.35372865,-0.12407258,0.81559,-0.052715406,-0.14442651,-0.08288829,-0.38582665,-0.44459823,-0.31732184],"result":{"type":"object","properties":{"message":{"description":"The search results from DuckDuckGo in JSON format, containing title, description, and URL for each result","type":"string"},"puppeteer":{"description":"Whether the search was performed using Puppeteer","type":"boolean"}},"required":["message"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}