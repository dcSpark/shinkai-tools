{"type":"Python","content":[{"version":"1.0.0","name":"Email Fetcher","homepage":null,"author":"@@official.shinkai","mcp_enabled":null,"py_code":"from typing import Any, Optional, List, Dict\nimport imaplib\nimport email\nfrom datetime import datetime\n\nclass CONFIG:\n    imap_server: str\n    username: str\n    password: str\n    port: int = 143  # Default port for IMAPS\n    ssl: bool = True  # New flag to specify SSL usage\n\nclass INPUTS:\n    from_date: Optional[str]\n    to_date: Optional[str]\n\nclass OUTPUT:\n    emails: List[Dict[str, Any]]\n    login_status: str\n\nclass Email:\n    subject: str\n    date: datetime\n    sender: str\n    text: str\n\n# Function to validate date format\ndef validate_date_format(date_str):\n    try:\n        # Attempt to parse the date string in the expected format\n        datetime.strptime(date_str, '%d-%b-%Y')  # Expected format: DD-Mon-YYYY\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {date_str}. Expected format is DD-Mon-YYYY. Example: 10-Jan-2025\")\n\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    output = OUTPUT()\n    output.login_status = \"N/A\"\n    output.emails = []\n    try:\n        # Use SSL if the ssl flag is set to True\n        if config.ssl:\n            imap = imaplib.IMAP4_SSL(config.imap_server, config.port)\n        else:\n            imap = imaplib.IMAP4(config.imap_server, config.port)  # Use config port\n    except Exception as ee:\n        output.login_status = 'IMAP4 INIT FAILED - ' + str(ee)\n        return output\n\n    try:\n        login_status, login_response = imap.login(config.username, config.password)\n        if login_status == \"OK\":\n            print(\"Login successful\")\n        else:\n            raise Exception(\"Login failed\")\n\n        imap.select(\"INBOX\")\n\n        # Validate the input dates\n        if inputs.from_date:\n            validate_date_format(inputs.from_date)\n        if inputs.to_date:\n            validate_date_format(inputs.to_date)\n\n        # Construct the search criteria\n        search_criteria = 'ALL'\n        if inputs.from_date and inputs.to_date:\n            search_criteria = f'SINCE \"{inputs.from_date}\" BEFORE \"{inputs.to_date}\"'\n        elif inputs.from_date:\n            search_criteria = f'SINCE \"{inputs.from_date}\"'\n        elif inputs.to_date:\n            search_criteria = f'BEFORE \"{inputs.to_date}\"'\n\n        print(\"Search Criteria:\", search_criteria)\n        _, data = imap.search(None, search_criteria)\n        mail_ids = data[0].split()\n\n        for mail_id in mail_ids:\n            _, data = imap.fetch(mail_id, '(RFC822)')\n            raw_email = data[0][1]\n            email_message = email.message_from_bytes(raw_email)\n\n            email_obj = Email()\n            email_obj.subject = email_message.get('Subject', '')\n            email_obj.sender = email_message.get('From', '')\n            try:\n                email_obj.date = datetime.strptime(email_message['Date'], '%a, %d %b %Y %H:%M:%S %z')  # Example format, adjust as needed\n            except ValueError:\n                email_obj.date = None  # Handle parsing error\n\n            email_obj.text = \"\"\n            if email_message.is_multipart():\n                for part in email_message.walk():\n                    content_type = part.get_content_type()\n                    content_disposition = str(part.get(\"Content-Disposition\"))\n                    try:\n                        body = part.get_payload(decode=True).decode()\n                        if content_type == \"text/plain\" and \"attachment\" not in content_disposition:\n                            email_obj.text += body\n                    except Exception as e:\n                        print(f\"Error decoding email part: {e}\")\n            else:\n                try:\n                    email_obj.text = email_message.get_payload(decode=True).decode()\n                except Exception as e:\n                    print(f\"Error decoding email payload: {e}\")\n\n            output.emails.append(email_obj.__dict__)  # Append as dictionary to match OUTPUT type\n\n        imap.close()\n        imap.logout()\n\n    except Exception as e:\n        output.login_status = str(e)\n        print(f\"An error occurred: {e}\")\n\n    return output","tools":[],"config":[{"BasicConfig":{"key_name":"imap_server","description":"The IMAP server address","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"username","description":"The username for the IMAP account","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"password","description":"The password for the IMAP account","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"port","description":"The port number for the IMAP server (defaults to 993 for IMAPS)","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"ssl","description":"Whether to use SSL for the IMAP connection (defaults to true)","required":false,"type":null,"key_value":null}}],"description":"Fetches emails from an IMAP server and returns their subject, date, sender, and text content.","keywords":["email","imap","fetch","parser"],"input_args":{"type":"object","properties":{"from_date":{"type":"string","description":"The start date for the email search (optional)"},"to_date":{"type":"string","description":"The end date for the email search (optional)"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.547825,0.7763532,0.026621616,-0.16742462,0.5363501,-0.41623288,-0.18900466,-0.054491863,-0.29632044,0.28631622,-0.47354397,0.36377707,-0.028270837,-0.044752464,0.4598795,0.18579054,0.7827984,-0.77143216,-1.6328549,-0.87774205,-0.048036832,1.129127,0.7665729,-0.29735118,-0.078825206,-0.11793244,-0.015131995,-0.5916688,-1.2383013,-1.5989122,0.13623375,0.6136344,-0.0753767,0.062940225,-0.11921882,-0.27151665,-0.0483975,0.12579335,-0.75149834,-0.08899507,0.37147063,0.11845923,-0.17727326,0.009968601,-0.109837346,0.010696229,-0.37393498,-0.05795137,0.44736722,1.2348632,0.26105267,-0.1797416,-0.0031100735,0.62004757,-0.24461213,-0.065568164,-0.10922094,-0.2525326,-0.3444411,-0.043661594,0.30548617,0.06346987,-3.444009,0.71739566,0.2170403,-0.74578375,-0.024420839,-0.19640416,-0.11624952,-0.61793983,0.18903759,-0.044761002,-0.7836871,0.9991939,0.72043306,-1.0187103,0.24254869,0.26216757,0.71537846,-0.05655922,0.32169172,1.0128175,-0.38183197,0.19401343,-1.0504446,0.58386683,-0.45771945,-0.041332997,0.044002872,0.092680305,0.1354109,-0.5482102,-0.00034871325,-0.1128827,-0.3910442,-0.57775617,-0.54814494,0.2200948,-0.1592246,2.8423285,0.8001823,0.20776834,-0.32845137,-1.0237064,-0.31725302,-0.8533628,-0.30074513,-0.55808693,-0.54973066,-0.047450908,-0.10828863,0.24652848,0.16023016,0.22223017,0.5258318,-0.4536317,-0.57558495,0.077368125,0.37586716,0.9193448,0.009741262,-0.059930425,-0.1870119,-0.27929384,-0.29590052,0.15154395,0.0846335,0.41032633,-0.06427196,-0.6377539,0.9386263,-0.89514303,-0.96377486,0.14578483,-0.069333665,0.14901617,0.050950624,-0.5653025,-0.11822098,-0.4457376,-0.3442979,-1.8895242,0.8572732,0.5053427,0.5639311,0.9606396,-0.10405078,-0.14251855,-0.36347964,0.5462002,-0.12402327,0.21493068,-0.4565773,0.5294371,0.4222303,-0.11488414,-0.1231443,-0.16663799,0.08705149,-0.18368277,-0.35441098,0.11381331,0.656644,0.23528714,-0.2714433,-0.42813388,0.32652298,0.70821756,-0.024257943,-0.078729406,0.71440077,0.14723068,-0.48036402,0.7253272,0.24474883,-0.055211216,0.019060276,0.10375187,0.2994299,-0.7679447,0.7942064,0.8091074,-0.15825287,-0.6662559,0.1775543,0.6389247,0.19478124,-0.33573306,1.2522506,0.47938672,-0.49940953,1.6452137,-0.894529,-1.4491674,0.09577056,-0.23257712,-0.28079027,0.6380004,0.6830098,-0.042975534,-0.76156795,-0.21436772,-0.051380564,-0.09578116,0.42743143,0.039956346,0.1570992,-0.51595354,0.071171686,-0.64096344,0.12953208,-0.25348976,-0.12308408,0.06847477,0.60569024,-0.11684096,-0.19024584,-0.08365686,-0.1630361,0.28829426,-0.0706527,-0.020708263,-0.15469201,-0.6647431,-0.22094972,0.5692031,-0.9427877,0.29101086,-0.21962705,-0.26830658,1.0584314,1.15535,0.44262978,0.703463,1.2415994,-0.1735698,-0.89479506,1.0501078,0.42468223,-0.017725198,0.43843818,-0.039523877,-0.20882174,0.27868682,-0.17453444,0.18512553,0.23107648,-0.030774027,0.081444785,1.4430559,1.1375151,0.5362187,-0.23669866,0.34724107,0.030284872,-0.44386885,-1.2673447,-0.11114209,-0.33929765,0.60902786,0.5000654,-0.31302404,1.0179405,0.54995096,0.08032552,-0.31719863,-0.8771773,-0.631436,-0.18156284,-0.0074221417,-0.86660486,0.2270305,-0.63057196,-0.3403089,-0.20115668,-0.24481227,0.29771075,0.44515228,-0.41521415,-0.3876309,-0.16971236,0.11759487,0.6373347,0.11120323,-0.29255593,-0.9508938,-0.08499007,-0.76885325,-0.5931569,0.31093988,0.19677895,-0.837163,-0.6370549,-0.05266212,1.5352062,0.37871552,0.21009792,0.38105005,0.28190044,0.5901883,0.00011049956,0.090642944,-0.3220634,-0.40665036,-0.8613243,-0.43987507,0.20883659,-0.25116783,-0.27164534,0.32481384,-0.4858238,0.11994259,0.3227346,-0.45641953,0.5500252,-0.44642252,0.654148,0.5738553,0.31553224,-1.932135,0.021627946,-0.13862917,0.4722705,-0.04793854,-1.1882099,0.37934166,-0.5503476,-0.59482247,-0.6036436,0.80964184,0.033350706,-0.19003999,0.213158,-0.41630727,0.60617554,0.48486373,0.04047949,-0.4142667,-0.84958494,-0.07107858,0.46428818,2.0541635,0.0035759564,0.17048763,0.2290501,0.4635513,-0.6023546,-1.7569188,0.3607372,-0.13440503,-0.11990354,0.7720167,0.33440024,0.24908093,0.27170894,1.1957113,-0.48629373,-0.27594033,-0.97149724,1.4232637,0.22669317,0.25707972,-0.5674725,-0.30079204,0.038736776,0.4656371,0.7123592,-0.039908327,-0.18819284,-0.01250463,-0.13735683,0.31886283,0.41265473,0.5485489,0.15146682,0.14453538,0.27183324,0.35082662,0.88441867,0.6669105,0.5370144,1.1670591,-0.20822982,0.19040939],"result":{"type":"object","properties":{"emails":{"description":"A list of email objects","items":{"properties":{"date":{"description":"The date and time the email was sent","format":"date-time","type":"string"},"sender":{"description":"The sender of the email","type":"string"},"subject":{"description":"The subject of the email","type":"string"},"text":{"description":"The text content of the email","type":"string"}},"required":["subject","date","sender","text"],"type":"object"},"type":"array"},"login_status":{"description":"Indicates if login was successful or not","type":"string"}},"required":["emails","login_status"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}