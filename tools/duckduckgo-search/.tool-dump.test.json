{"type":"Deno","content":[{"name":"DuckDuckGo Search","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"/// <reference lib=\"deno.ns\" />\n/// <reference lib=\"dom\" />\nimport { URL } from 'npm:whatwg-url@14.0.0';\nimport axios from 'npm:axios@1.7.7';\nimport process from 'node:process';\nimport puppeteer from \"https://deno.land/x/puppeteer@16.2.0/mod.ts\";\nimport chromePaths from \"npm:chrome-paths@1.0.1\"\n\ntype Configurations = {\n  chromePath?: string;\n};\ntype Parameters = {\n  message: string;\n};\ntype Result = { message: string, puppeteer: boolean };\n\ninterface SearchResult {\n  title: string;\n  description: string;\n  url: string;\n}\n\n// Custom function to build query string\nfunction buildQueryString(params: Record<string, string>): string {\n  return Object.keys(params)\n    .map(\n      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`,\n    )\n    .join('&');\n}\n\nconst getVQD = async (keywords: string): Promise<string> => {\n  const body = buildQueryString({ q: keywords });\n  await process.nextTick(() => {});\n  const response = await axios.post('https://duckduckgo.com', body, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n  });\n  const text = response.data;\n  // console.log('DuckDuckGo response HTML:', text);\n\n  // Extract vqd token using a regular expression\n  const vqdMatch = text.match(/vqd=\\\\?\"([^\\\\\"]+)\\\\?\"/);\n  // console.log('vqdMatch: ', vqdMatch);\n  if (!vqdMatch || vqdMatch.length < 2) {\n    throw new Error('Failed to retrieve vqd token');\n  }\n  const vqd = vqdMatch[1];\n  // console.log('vqd: ', vqd);\n  return vqd;\n};\n\nconst parseDuckDuckGoResponse = (response: string): SearchResult[] => {\n  // Regex to extract the JSON content\n  const jsonPattern = /DDG\\.pageLayout\\.load\\('d',(\\[\\{\\\"a\\\".*?\\}\\])\\);/;\n  const match = response.match(jsonPattern);\n\n  if (!match) {\n    throw new Error('JSON content not found in the response.');\n  }\n\n  // Extracted JSON content as string\n  const jsonString = match[1];\n\n  // Parse JSON string\n  const jsonData = JSON.parse(jsonString);\n\n  // Extract search results\n  const results: SearchResult[] = jsonData\n    .map((item: any) => ({\n      title: item.t,\n      description: item.a,\n      url: item.u,\n    }))\n    .filter(\n      (result: SearchResult) =>\n        result.title && result.description && result.url,\n    );\n\n  // console.log('results: ', results);\n  // Convert to JSON string\n  return results;\n};\n\nconst textSearch = async (keywords: string): Promise<any[]> => {\n  console.log('textSearch: ', keywords);\n  const vqd = await getVQD(keywords);\n  console.log('vqd: ', vqd);\n  const url = new URL('https://links.duckduckgo.com/d.js');\n  console.log('before url.searchParams.append');\n  url.searchParams.append('q', keywords);\n  url.searchParams.append('vqd', vqd);\n  url.searchParams.append('kl', 'wt-wt');\n  url.searchParams.append('l', 'wt-wt');\n  url.searchParams.append('p', '');\n  url.searchParams.append('s', '0');\n  url.searchParams.append('df', '');\n  url.searchParams.append('ex', '-1');\n\n  console.log('before urlString');\n  const urlString = url.toString();\n  console.log('urlString: ', urlString);\n\n  await process.nextTick(() => {});\n  const response = await axios.get(url.toString(), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  console.log('response: ', response);\n  const text = response.data;\n  console.log('DuckDuckGo search response:', text);\n\n  // Parse the response using the custom parser\n  const results = parseDuckDuckGoResponse(text);\n  if (results.length === 0) {\n    throw new Error('Failed to extract search results');\n  }\n\n  return results;\n};\n\n\nasync function searchDuckDuckGoWithPuppeteer(\n  searchQuery: string,\n  chromePath: string,\n  numResults = 10\n): Promise<SearchResult[]> {\n  // Add random delay between requests\n  const randomDelay = (min: number, max: number) =>\n    new Promise((resolve) => setTimeout(resolve, Math.random() * (max - min) + min));\n\n  const browser = await puppeteer.launch({\n    executablePath: chromePath,\n    headless: true,\n    defaultViewport: {\n      width: 1920,\n      height: 1080\n    }\n  });\n\n  try {\n    const page = await browser.newPage();\n    // Set a realistic user agent\n    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');\n    // Add random delay before loading page\n    await randomDelay(1000, 3000);\n    \n    await page.goto('https://duckduckgo.com/', {\n      waitUntil: 'networkidle0',\n      timeout: 30000\n    });\n\n    // Type search query with random delays between keystrokes\n    for (const char of searchQuery) {\n      await page.type('#searchbox_input', char, { delay: Math.random() * 100 + 50 });\n    }\n\n    await Promise.all([\n      page.keyboard.press('Enter'),\n      page.waitForNavigation({ waitUntil: 'networkidle0' })\n    ]);\n\n    // Wait for results to load\n    await page.waitForSelector('.react-results--main');\n    const pageContent = await page.$('.react-results--main');\n    let results: SearchResult[] = []\n    if (pageContent) {\n      // Process each `li` element inside the container\n      results = await page.evaluate((container) => {\n        // Query all `li` elements within the container\n        const listItems = container.querySelectorAll('li[data-layout=\"organic\"]');\n        // Map each `li` to extract title, snippet, and URL\n        return Array.from(listItems).map((item) => {\n          // Extract the title\n          const title = (item as HTMLElement).querySelector('article')?.children[2]?.querySelector('a')?.textContent?.trim() || 'No title';\n          // Extract the snippet (if there's more descriptive text inside the article)\n          const description = (item as HTMLElement).querySelector('article')?.children[3]?.textContent?.trim() || 'No snippet';\n          // Extract the URL (inside the <a> tag in the third child of <article>)\n          const url = (item as HTMLElement).querySelector('article')?.children[2]?.querySelector('a')?.href || 'No URL';\n          return { title, description, url };\n        });\n      }, pageContent);\n    \n      // Log the extracted results\n      results.forEach((result, index) => {\n        console.log(`Result ${index + 1}:`);\n        console.log(`  Title: ${result.title}`);\n        console.log(`  Description: ${result.description}`);\n        console.log(`  URL: ${result.url}`);\n      });\n    }\n    // Extract search results\n    await browser.close();\n    return results;\n  } catch (error) {\n    console.error('Error during scraping:', error);\n    await browser.close();\n    throw error;\n  }\n}\n\n\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (config: C, inputs: I) => Promise<R>;\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters,\n): Promise<Result> => {\n  let puppeteer = false\n  console.log('run duckduckgo search from js', 4);\n  console.log('second message', 4);\n  console.log('params: ', params);\n  try {\n    let results;\n    try {\n      results = await textSearch(params.message);\n    } catch (textSearchError) {\n      console.error('Text search failed', textSearchError);\n      console.log('Text search failed, falling back to puppeteer search');\n      puppeteer = true\n      const chromePath = configurations?.chromePath || \n        Deno.env.get('CHROME_PATH') ||\n        chromePaths.chrome || \n        chromePaths.chromium;\n      results = await searchDuckDuckGoWithPuppeteer(params.message, chromePath, 10);\n    }\n    console.log('results: ', results);\n    return { message: JSON.stringify(results), puppeteer };\n  } catch (error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    return { message: `Error: ${errorMessage}`, puppeteer };\n  }\n};","tools":[],"config":[{"BasicConfig":{"key_name":"chromePath","description":"The path to the Chrome executable. If not provided, the tool will use the CHROME_PATH environment variable or the default paths for Chrome and Chromium.","required":false,"type":null,"key_value":null}}],"description":"Searches the DuckDuckGo search engine. Example result: [{\"title\": \"IMDb Top 250 Movies\", \"description\": \"Find out which <b>movies</b> are rated as the <b>best</b> <b>of</b> <b>all</b> <b>time</b> by IMDb users. See the list of 250 titles sorted by ranking, genre, year, and rating, and learn how the list is determined.\", \"url\": \"https://www.imdb.com/chart/top/\"}]","keywords":["duckduckgo","search","shinkai"],"input_args":{"type":"object","properties":{"message":{"type":"string","description":"The search query to send to DuckDuckGo"}},"required":["message"]},"output_arg":{"json":""},"activated":false,"embedding":[0.16101864,-0.29721755,0.28325427,-0.28358504,0.1837037,-0.108056985,-0.8464145,-0.3020938,-0.066303246,0.29359478,0.37911907,-0.025946505,0.9679656,0.26816177,0.087525055,0.39079264,0.1927906,-0.014284436,-1.4825366,0.3446011,-0.22675028,0.6351647,0.5177695,0.16223754,0.14320345,-0.41298884,-0.5528681,-0.22282808,-1.4607236,-1.9088366,0.08871041,0.72984034,-0.37637126,-0.31547385,-0.0992106,-0.37486306,-0.07667866,-0.29187986,-0.8176387,-0.37006497,-0.93108153,0.4441509,0.3234241,-0.2364814,-0.75730145,-0.27358103,0.88160574,-0.741537,0.9242191,0.5696489,-0.6617419,-0.329119,-0.44477236,-0.34521374,-0.53985876,1.2048281,-0.29137167,0.09810601,-0.1589754,-0.020118793,0.5264363,0.37243629,-3.2530777,0.31357694,1.1327494,0.693443,0.68952084,0.09107933,0.17533183,-0.17400658,-0.18803564,-0.95674497,0.08032135,0.5557485,-0.72900856,-0.4784966,-0.12113464,0.16978657,0.38451892,-0.48414686,-0.19893885,-0.40642172,-0.22382791,0.11936685,-0.019173134,0.09939018,-0.35608017,-0.5059598,0.2345663,0.2507241,-0.616371,-0.3427209,-0.15680824,-0.22243214,-0.4244057,0.22669676,-0.36724126,0.2469961,0.31033015,3.5157666,0.3483981,0.16895323,0.4348074,-0.6276377,0.32558322,-0.20071812,-0.10624625,0.067884855,-0.13959736,0.50161415,-0.41820973,-0.2484689,0.36226794,0.14241716,-0.09088603,0.2562226,-0.26628846,0.2048683,0.12783748,0.15685864,-0.6449173,0.20131102,0.22813708,-0.15076476,-0.25935155,-0.108024165,-0.068625964,0.7950986,0.8426544,-0.11044187,0.3601759,-0.0672341,-1.3182368,0.6653715,0.092445046,0.24934533,-0.21868785,-0.6686977,0.46089002,-0.99840003,-0.735185,-2.2018533,1.1710248,0.4771344,0.7686014,-0.19178045,0.5033361,0.14964998,-0.68731093,0.17796294,0.41312197,-0.27811062,-0.44977686,0.18752949,0.6224018,-0.27502087,-0.28429806,0.6172708,-0.39468297,0.33427557,-1.0166702,0.34965134,0.56435287,0.6584908,-0.26894918,-0.2965649,-0.06161937,-0.16446823,0.4895646,-0.16233365,0.03446161,-0.24469057,0.52393824,0.15534616,-0.4981486,0.2862222,0.13553266,0.18816984,-0.3454461,-1.174426,0.2627282,0.61901,0.121751234,-0.93233055,-0.26442003,-0.5888394,0.87060887,-0.69302654,0.5063638,0.80660486,0.07203133,0.87411004,-0.32742763,-0.42321506,-0.02801801,-0.59226876,0.51746184,-0.059632227,0.12041333,-0.3405414,-0.63522524,0.15984596,0.15549117,-0.25667447,-0.75161546,-0.18896215,0.6753655,-0.6291592,0.5430224,-0.42277446,-0.367623,-0.22562543,0.48556218,0.57191086,0.5348293,-0.33021253,0.6376727,-0.06287624,0.071177945,0.20482966,-1.0149095,-0.3050892,-0.17653556,-0.8966403,0.29512593,-0.098541796,-0.45743555,-0.4069999,-0.5763089,-0.15109153,0.368753,0.7611863,0.6924484,0.7086118,0.92488813,-0.17847162,-0.7722037,0.39470088,0.56197405,-0.8520799,0.7449661,-0.3537367,-0.039316528,0.013730414,1.0748503,-0.93677235,-0.026142575,0.23514172,-0.3911617,1.4429321,1.1656698,0.03281475,0.49851972,0.03981107,0.37711772,0.46700895,-1.6488731,0.21760423,-0.028365172,-0.2252543,-0.27484542,-0.3426494,0.08938375,0.16932274,0.32552522,0.124710485,-0.412006,-0.15442431,-0.6920633,-0.15064606,0.5461247,0.9915005,0.06441189,-0.025922075,0.30090353,1.0256001,-0.5665824,0.367404,-0.4599441,-0.14662582,-0.4180492,0.44609866,0.26956096,0.89306134,-0.64684683,-0.010258459,-0.036091305,0.7817472,0.04387518,0.832679,-0.25963947,-0.19120407,-0.18400285,0.2006108,1.1440985,0.2504792,0.10988511,0.53189176,0.21857218,0.4568857,-0.4810366,-0.6884316,0.44773504,-0.0068961605,-0.06834147,-0.4101306,0.61492956,-0.47736204,-0.115061425,-0.24841833,-1.1316432,-0.3229173,0.6682534,-0.5195112,1.618829,-0.63042563,0.7336781,-0.070199326,0.46422672,-1.3246447,-0.13136715,0.19486621,-0.16063155,0.0047658235,0.2975502,0.21023029,0.20835796,-0.13591325,-0.5423575,1.3883576,0.36258894,0.23911259,-0.56404823,0.28660515,0.38429493,0.0007876558,0.95624703,-0.12308846,-0.60003906,0.66712445,0.6658809,1.0923629,0.93823373,0.25433072,0.18968455,0.3571108,-1.1263928,-1.1870302,0.22975272,0.035988376,0.14789958,0.57135695,-0.17011371,-0.11628113,0.94628,0.37176898,-0.8969188,0.09843273,-0.55180424,0.6475933,-0.12996891,0.49612805,-0.254188,-0.17324866,1.0960541,0.48708034,0.6081528,-0.23217347,0.13169707,-0.76361114,-0.30260518,-0.2124573,0.052386403,0.05187999,0.092526354,0.3537233,-0.123940736,0.8156092,-0.05278404,-0.14439408,-0.08282305,-0.38565427,-0.44481298,-0.31704915],"result":{"type":"object","properties":{"message":{"description":"The search results from DuckDuckGo in JSON format, containing title, description, and URL for each result","type":"string"},"puppeteer":{"description":"Whether the search was performed using Puppeteer","type":"boolean"}},"required":["message"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}