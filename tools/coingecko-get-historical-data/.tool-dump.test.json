{"type":"Python","content":[{"name":"coingecko-get-historical-data","tool_router_key":"local:::__official_shinkai:::coingecko_get_historical_data","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"requests\",\n#   \"tenacity\",\n# ]\n# ///\n\nfrom typing import Dict, Any, Optional, List, Tuple\nfrom datetime import datetime\nimport re\nimport time\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass CONFIG:\n    api_key: Optional[str]\n\nclass INPUTS:\n    id: str\n    vs_currency: str\n    from_date: str\n    to_date: str\n    interval: Optional[str]\n\nclass PricePoint:\n    timestamp: int\n    datetime: str\n    price_usd: float\n    market_cap_usd: float\n    volume_usd: float\n\nclass OUTPUT:\n    from_date: str\n    to_date: str\n    interval: Optional[str]\n    currency: str\n    coin_id: str\n    data_points: List[PricePoint]\n    summary: Dict[str, Any]\n\ndef validate_date_format(date: str) -> None:\n    if not re.match(r'^\\d{4}-\\d{2}-\\d{2}$', date):\n        raise ValueError(f\"Invalid date format: {date}. Use YYYY-MM-DD\")\n\ndef format_timestamp(ts_ms: int) -> str:\n    \"\"\"Convert millisecond timestamp to readable datetime string\"\"\"\n    return datetime.fromtimestamp(ts_ms / 1000).strftime('%Y-%m-%d %H:%M:%S UTC')\n\ndef calculate_summary(data_points: List[PricePoint]) -> Dict[str, Any]:\n    if not data_points:\n        return {\n            \"price_change\": 0.0,\n            \"price_change_percentage\": 0.0,\n            \"highest_price\": 0.0,\n            \"lowest_price\": 0.0,\n            \"average_price\": 0.0,\n            \"highest_volume\": 0.0,\n            \"total_volume\": 0.0,\n            \"number_of_data_points\": 0\n        }\n\n    prices = [point.price_usd for point in data_points]\n    volumes = [point.volume_usd for point in data_points]\n    \n    first_price = prices[0]\n    last_price = prices[-1]\n    price_change = last_price - first_price\n    price_change_pct = (price_change / first_price) * 100 if first_price > 0 else 0\n\n    return {\n        \"price_change\": round(price_change, 2),\n        \"price_change_percentage\": round(price_change_pct, 2),\n        \"highest_price\": round(max(prices), 2),\n        \"lowest_price\": round(min(prices), 2),\n        \"average_price\": round(sum(prices) / len(prices), 2),\n        \"highest_volume\": round(max(volumes), 2),\n        \"total_volume\": round(sum(volumes), 2),\n        \"number_of_data_points\": len(data_points)\n    }\n\n@retry(\n    stop=stop_after_attempt(3),\n    wait=wait_exponential(multiplier=1, min=4, max=10),\n    reraise=True\n)\ndef make_coingecko_request(url: str, params: Dict[str, Any], headers: Dict[str, str]) -> Dict:\n    import requests\n    \n    try:\n        # First check API status\n        ping_url = url.split('/coins')[0] + '/ping'\n        ping_response = requests.get(ping_url, headers=headers)\n        if ping_response.status_code != 200:\n            raise Exception(f\"CoinGecko API is not available. Status code: {ping_response.status_code}\")\n            \n        response = requests.get(url, params=params, headers=headers)\n        \n        # Handle rate limiting\n        if response.status_code == 429:\n            retry_after = int(response.headers.get('Retry-After', 60))\n            time.sleep(retry_after)\n            response = requests.get(url, params=params, headers=headers)\n            \n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        if e.response is not None:\n            error_message = f\"API Error: {str(e)}\"\n            try:\n                error_json = e.response.json()\n                if 'error' in error_json:\n                    error_message = f\"API Error: {error_json['error']}\"\n            except:\n                pass\n            if e.response.status_code == 401:\n                raise Exception(f\"{error_message} (Status code: {e.response.status_code})\")\n            elif e.response.status_code == 429:\n                raise Exception(f\"{error_message} (Status code: {e.response.status_code})\")\n            elif e.response.status_code == 403:\n                raise Exception(f\"{error_message} (Status code: {e.response.status_code})\")\n            elif e.response.status_code >= 500:\n                raise Exception(f\"{error_message} (Status code: {e.response.status_code})\")\n        raise Exception(f\"Request failed: {str(e)}\")\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    # Validate required inputs\n    if not all([inputs.id, inputs.vs_currency, inputs.from_date, inputs.to_date]):\n        raise ValueError(\"Missing required parameters: id, vs_currency, from_date, to_date\")\n\n    # Validate date formats\n    validate_date_format(inputs.from_date)\n    validate_date_format(inputs.to_date)\n\n    # Convert dates to UNIX timestamps\n    from_timestamp = int(datetime.strptime(inputs.from_date, '%Y-%m-%d').timestamp())\n    to_timestamp = int(datetime.strptime(inputs.to_date, '%Y-%m-%d').timestamp())\n\n    # Setup API endpoint\n    api_key = config.api_key if hasattr(config, 'api_key') else None\n    base_url = 'https://pro-api.coingecko.com/api/v3' if api_key else 'https://api.coingecko.com/api/v3'\n    \n    # Build URL and params\n    url = f\"{base_url}/coins/{inputs.id}/market_chart/range\"\n    params = {\n        'vs_currency': inputs.vs_currency,\n        'from': from_timestamp,\n        'to': to_timestamp\n    }\n    \n    if hasattr(inputs, 'interval') and inputs.interval:\n        if inputs.interval not in ['5m', 'hourly', 'daily']:\n            raise ValueError(\"interval must be one of: '5m', 'hourly', 'daily'\")\n        params['interval'] = inputs.interval\n\n    # Setup headers\n    headers = {\n        'Accept': 'application/json',\n        'User-Agent': 'Shinkai-Tool/1.0'\n    }\n    if api_key:\n        headers['X-Cg-Pro-Api-Key'] = api_key\n\n    try:\n        # Make API request with retry logic\n        data = make_coingecko_request(url, params, headers)\n\n        # Validate response format\n        required_fields = ['prices', 'market_caps', 'total_volumes']\n        if not all(field in data for field in required_fields):\n            raise ValueError(f\"Missing required fields in response\")\n\n        # Process and combine the data points\n        data_points = []\n        for i in range(len(data['prices'])):\n            point = PricePoint()\n            point.timestamp = int(data['prices'][i][0])\n            point.datetime = format_timestamp(point.timestamp)\n            point.price_usd = float(data['prices'][i][1])\n            point.market_cap_usd = float(data['market_caps'][i][1])\n            point.volume_usd = float(data['total_volumes'][i][1])\n            data_points.append(point)\n\n        # Calculate summary statistics\n        summary = calculate_summary(data_points)\n\n        # Prepare output\n        output = OUTPUT()\n        output.from_date = inputs.from_date\n        output.to_date = inputs.to_date\n        output.interval = inputs.interval if hasattr(inputs, 'interval') else None\n        output.currency = inputs.vs_currency\n        output.coin_id = inputs.id\n        output.data_points = data_points\n        output.summary = summary\n\n        return output\n\n    except Exception as e:\n        # Return the exception with the error message for any exception\n        output = OUTPUT()\n        output.error = str(e)\n        return output","tools":[],"config":[{"BasicConfig":{"key_name":"api_key","description":"Optional. If provided, uses pro-api.coingecko.com for requests.","required":false,"type":null,"key_value":null}}],"description":"Retrieves historical price, market-cap, and volume data for a coin over a date range (from_date to to_date).","keywords":["coingecko","cryptocurrency","historical","shinkai"],"input_args":{"type":"object","properties":{"to_date":{"type":"string","description":"End date in YYYY-MM-DD format"},"from_date":{"type":"string","description":"Start date in YYYY-MM-DD format"},"id":{"type":"string","description":"Coin ID from CoinGecko, e.g. 'bitcoin'"},"interval":{"type":"string","description":"Optional. '5m', 'hourly', or 'daily'. Controls the data granularity."},"vs_currency":{"type":"string","description":"Fiat or crypto currency symbol, e.g. 'usd'"}},"required":["id","vs_currency","from_date","to_date"]},"output_arg":{"json":""},"activated":false,"embedding":[0.4972422,0.44902647,-0.77905804,0.05690466,-0.047408327,-0.66648674,0.37850988,0.23663032,-0.6293389,-0.21293736,0.014408907,-0.5292271,0.37798345,0.43325117,0.47571605,-0.25445557,0.04401648,-0.37010965,-1.6318002,-0.44817087,-0.24166353,0.12243809,0.018973194,0.62499166,-0.02256928,0.02577366,-0.5114221,-0.009029701,-1.5079323,-1.5344278,0.112648234,0.34481493,-0.045636974,-0.24107465,-0.5024794,0.220211,0.23459244,0.19662264,-0.8775823,-0.16577053,-0.1865831,0.44506365,-0.59356165,0.011868503,0.15629682,-0.13586265,0.07028163,-0.3199444,0.18201835,0.7662103,0.38430873,0.41287506,-0.7583046,-0.25756016,-0.09496545,-0.096156865,0.063750565,-0.42399612,0.23023042,0.45431188,0.32748923,0.44320807,-3.5576582,0.548184,1.0989666,0.22240612,-0.30545625,0.80576664,-0.093338355,0.23433277,0.07077404,-0.08073081,-0.44302243,0.11741341,0.27742746,0.2891794,0.85618514,0.24567889,0.39805996,0.08879088,-0.35864824,0.465727,-0.39654633,-0.0749727,-0.44001207,0.7125137,-0.20526993,-0.18611383,0.33708978,-0.032742184,0.124828815,-0.009371854,0.13525435,0.13601446,-0.82044727,-0.11068688,0.27449188,-0.32519096,-0.4721678,3.2570477,0.7845159,0.44498023,-0.030990325,-1.6346217,0.45309842,-0.34492248,-0.118241996,0.23518842,0.4213196,0.08220031,0.7550038,-0.33290493,0.781634,0.47637448,1.0363178,0.21309428,-0.9027844,-0.48350945,-0.7132907,0.043062128,-0.52441716,-0.16102345,-0.30598325,-0.66731644,-0.016549403,-0.26519316,-0.08960138,0.69258314,-0.3360538,-0.68836087,0.39628765,-0.7384526,-0.49991676,0.14978205,0.028440153,0.30435356,-0.41204733,-0.49558887,0.339499,-0.49413195,-0.6212662,-1.4971484,0.6287234,0.043015294,0.863064,0.51042414,1.0461366,0.46322516,-0.05626246,0.5341378,0.3483866,-0.120122984,-0.011120948,0.59444946,0.9235568,-0.09078355,0.6112862,0.19539514,-0.98443645,0.42598864,-0.706535,-0.6830914,0.035155915,0.7447117,-0.09913195,-0.8634115,0.4736725,0.21886095,-0.13654579,-0.39285684,0.17707807,-0.18788293,-0.5940723,0.4933283,-0.4151634,-0.2878941,0.39240268,-0.03735783,0.22493817,-0.66816103,-0.20420252,0.9386202,-0.36867985,-0.24755287,0.27094752,-0.20945871,0.22029853,-0.045756064,0.4725831,1.1175458,0.46363726,2.0878472,-0.32377946,-0.22749503,-0.3317886,-0.49304825,-0.6201861,0.28297994,1.059782,0.028636312,-0.47097284,-0.12740865,0.090873405,-0.32219377,0.073992796,0.34340551,0.4916306,-0.11099477,0.3616253,-0.6943977,0.3741245,-0.25378114,0.13331965,0.1014168,-0.0019039437,-0.35497332,0.9414373,-0.40627778,0.6207515,0.711167,-0.7952959,0.7363858,-0.59984183,-0.6850729,-0.9336557,0.60319626,0.0832561,0.3317126,-0.1254911,-0.03135403,-0.013548009,-0.111515515,0.7362675,1.2123598,0.7894457,-0.25630122,-1.0743335,0.33289778,0.5016632,-0.25442246,-0.10475267,0.58151305,-0.51511145,0.12831911,-0.24775487,-0.5617913,-0.7578122,0.2810194,-0.18376887,1.2249918,0.5895416,0.048227336,0.22209388,0.7043347,-0.11058312,-0.31201714,-1.1065849,-0.4808377,-0.06433584,0.3486719,0.1647366,-0.6659735,0.4646607,-0.018856969,0.10612596,-0.1277066,-0.76893955,0.14203475,0.3692891,-0.026600726,0.3641269,0.520925,0.4926784,-0.36045623,0.061393447,0.472696,0.40856212,0.3593419,-0.6234079,0.4334332,0.6587539,0.41842675,0.53462553,0.16826108,-0.47917446,-0.36705416,0.35738736,0.034723874,-0.955326,0.17655745,-0.34446245,-0.41549572,-0.37150007,-0.09366205,2.3866193,-0.22851485,0.012588456,-0.092925556,0.14134751,0.097144544,-0.78634506,0.22802818,-0.274798,-0.25607154,-0.43410912,-0.86114466,0.930289,-0.21926771,-1.1584988,0.08791171,-0.59047806,-0.07850144,-0.5179175,0.19859871,0.07299357,-1.0663407,0.4495326,0.16685262,-0.66803914,-1.648654,-0.123796776,-0.44767267,0.06657612,-0.20970958,-0.7365252,0.7064956,-0.5087054,0.26426888,0.2589739,2.032577,0.5905534,0.39914754,-0.43065718,-0.019409515,1.023125,0.16737774,0.07094256,-0.6752474,-0.8045261,0.6619283,0.1610848,0.788053,0.09063524,-0.23014614,-0.1923406,0.20517987,0.011879712,-0.43626824,0.64193404,-0.13061748,-0.09320501,0.57275695,-0.13488737,-0.08965579,1.1516749,0.80907005,-0.97434014,0.13570215,-0.22683355,0.7852994,-0.43093005,-0.39486945,-0.14309931,-0.5291398,0.448573,0.4524374,-0.76263976,0.26359934,0.48463273,-0.4430668,0.052875735,-0.7825765,0.42547923,0.054687873,0.94739586,0.85801464,0.10174711,0.72584975,1.0676997,-0.28836972,0.20036173,0.41381678,-1.2409834,-0.20035256],"result":{"type":"object","properties":{"data":{"properties":{"market_caps":{"items":{"items":[{"type":"number"},{"type":"number"}],"maxItems":2,"minItems":2,"type":"array"},"type":"array"},"prices":{"items":{"items":[{"type":"number"},{"type":"number"}],"maxItems":2,"minItems":2,"type":"array"},"type":"array"},"total_volumes":{"items":{"items":[{"type":"number"},{"type":"number"}],"maxItems":2,"minItems":2,"type":"array"},"type":"array"}},"required":["prices","market_caps","total_volumes"],"type":"object"},"from_date":{"type":"string"},"interval":{"type":"string"},"to_date":{"type":"string"}},"required":["from_date","to_date","data"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}