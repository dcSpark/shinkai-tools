{"type":"Deno","content":[{"name":"PDF Text Extractor","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { getDocument, GlobalWorkerOptions } from \"npm:pdfjs-dist\";\nimport { getHomePath } from './shinkai-local-support.ts';\n\n/* Configure PDF.js worker source */\nconst workerPath = `${await getHomePath()}/pdf.worker.mjs`\nGlobalWorkerOptions.workerSrc = workerPath;\n\n/**\n * Ensures the local presence of the PDF.js worker file.\n * Downloads it if not present.\n */\nexport async function ensureLocalPdfWorker(\n  localPath = workerPath,\n  remoteUrl = \"https://mozilla.github.io/pdf.js/build/pdf.worker.mjs\",\n): Promise<void> {\n  try {\n    // Check if the worker file already exists\n    await Deno.stat(localPath);\n  } catch (error) {\n    // If the file does not exist, download it\n    if (error instanceof Deno.errors.NotFound) {\n      const response = await fetch(remoteUrl);\n      if (!response.ok) {\n        throw new Error(\n          `Failed to fetch PDF worker from \"${remoteUrl}\". HTTP status: ${response.status}`,\n        );\n      }\n      const workerScript = (await response.text()).replace(/5\\.[0-9]+\\.[0-9]+/g,'4.10.38');\n      await Deno.writeTextFile(localPath, workerScript);\n    } else {\n      throw error;\n    }\n  }\n}\n\ntype CONFIG = {};\ntype INPUTS = {\n  url: string;\n};\ntype OUTPUT = {\n  text: string;\n};\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { url } = inputs;\n  await ensureLocalPdfWorker();\n\n  // Fetch the PDF as an ArrayBuffer\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch PDF from ${url}: ${response.statusText}`);\n  }\n  const arrayBuffer = await response.arrayBuffer();\n  const fileName = `${await getHomePath()}/${Date.now()}.pdf`;\n  await Deno.writeFile(fileName, new Uint8Array(arrayBuffer));\n\n  // Load the PDF via PDF.js\n  const loadingTask = getDocument(fileName);\n  const pdf = await loadingTask.promise;\n\n  let allText = \"\";\n\n  // Loop through each page and extract text\n  for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {\n    const page = await pdf.getPage(pageNumber);\n    const textContent = await page.getTextContent();\n\n    // Convert text items into one readable string\n    const pageText = textContent.items\n      .map((item) => (item as any).str || \"\")\n      .join(\" \");\n\n    allText += pageText + \"\\n\";\n  }\n\n  // Clean the extracted text\n  let cleanedText = allText;\n\n  // Remove any bracketed content\n  cleanedText = cleanedText.replace(/<[^>]*>/g, \"\");\n\n  // Remove extra whitespace/newlines\n  cleanedText = cleanedText\n    .replace(/\\r\\n|\\r|\\n/g, \" \") // unify newlines\n    .replace(/\\s\\s+/g, \" \")     // collapse multiple spaces\n    .trim();\n\n  return { text: cleanedText };\n}","tools":[],"config":[],"description":"Extracts clean text from PDFs by fetching them using a URL and processing each page.","keywords":["PDF","text extraction","document processing","clean text"],"input_args":{"type":"object","properties":{"url":{"type":"string","description":"The URL from which to download the PDF"}},"required":["url"]},"output_arg":{"json":""},"activated":false,"embedding":[0.47950196,-0.23720612,-0.4739095,-0.057572156,-0.22289145,-0.12215724,-1.1232032,-0.114632085,0.74540067,0.46500957,0.51691747,1.2157003,0.2685607,-0.18258205,0.3347037,0.2532164,-0.12849566,-0.47357702,-1.3661141,0.16411316,0.48260593,1.1053368,-0.029245593,-0.12029722,-0.19155613,0.07244736,-0.5709995,-0.86572844,-1.0604583,-1.5045444,0.6979069,0.96138495,-0.5959788,0.21472988,-0.41086066,-0.28240418,0.09921712,0.55692565,-0.035034407,-0.66291815,-0.25153676,-0.15362054,-0.4215922,0.32764232,0.050686695,0.0782375,0.25011736,-0.073207885,1.000853,1.1700422,-0.2891622,-0.20139877,0.25305042,-0.6145823,0.06280497,-0.5746865,-0.4347064,0.16066779,0.22904496,-0.09159894,-0.6476473,-0.17992347,-3.2483056,0.22410105,-0.010248607,0.22703445,-0.17313196,-0.25682652,-0.013457381,-0.27382433,-0.3237611,-0.032700576,-0.12025654,0.41375706,-0.21861467,-0.9301615,0.45608702,0.47004503,0.43157184,-0.849333,-0.4888681,1.178178,0.15340966,0.86916643,-0.7459181,0.8308149,-0.31840503,-0.3375388,0.2803176,0.21171194,0.23623382,-0.6738885,-0.3721835,0.2867513,-0.29887673,-0.20950218,-0.19086692,0.29039064,0.36921328,2.782228,0.38068318,0.68414605,0.006166391,-1.0541565,-0.33318695,-0.4817376,-0.12953524,-0.05687356,0.75140804,-0.022987211,0.16246018,-0.71455234,0.116426095,-0.29189512,-0.3454529,-0.54950315,-0.8175067,0.017835677,0.4101861,0.501908,0.07450095,0.38344252,-0.7775648,-0.97264713,0.06850061,-0.32256582,0.10990454,0.20043811,-0.06089422,-0.37432954,0.4744514,0.04706418,-1.4279135,0.62477803,-0.00088026,0.20442298,0.4924034,-0.5633193,0.41962025,0.07414221,0.37424588,-1.1699717,0.036268175,0.5919384,1.0787461,0.6412598,-0.1750173,-0.40990877,-0.04663465,0.49451593,0.37946522,0.39652517,-0.3700946,-0.27366185,0.41324043,0.17484066,-0.13148336,-0.2741853,-0.68669707,-0.29950714,-0.10169993,-0.332683,0.7854814,0.73153657,0.22064868,-0.58538514,0.18852873,0.2632215,0.3801682,0.08383156,0.92218935,-0.35376495,0.30919847,0.19948536,-0.45978826,-0.47107196,-0.31300566,-0.29762217,0.25636944,-0.47295517,1.1247565,0.47577083,-0.822506,-0.45051524,-0.5027582,0.62787956,-0.2534867,-0.17605561,0.8311156,1.1630596,-0.1905635,1.5743812,-0.8366021,-0.26960278,-0.040840395,-0.2403498,0.1624502,0.44952744,0.29546103,0.37128815,0.44061524,-0.59974015,-0.1686828,0.2109614,0.24465102,0.20422322,0.30742988,0.057840317,-0.49500054,-0.77164024,-0.2543415,-0.15323575,0.6430116,0.20518693,-0.03750205,-0.10194548,-0.5432967,0.08711964,-0.9966396,0.32268864,0.1838578,-0.34216473,-0.544464,-0.45991477,-0.8132705,0.8853987,0.30727723,0.28571844,-0.61779463,0.25951275,0.8809538,1.1338533,1.237843,1.4545444,1.0668154,-0.016126998,0.043073718,0.2786877,-0.0063531734,-0.059609827,0.97045755,-0.16826303,-0.30103835,0.21317734,-0.74566275,-0.7986319,0.20377856,0.07031648,0.30087754,1.5970867,0.35365412,0.0038065128,0.20580918,0.88697344,0.13643485,-0.041293047,-2.1390455,0.8189618,0.1419737,0.1792746,0.47045666,0.009204105,0.9533357,0.6316117,0.17689562,-0.5522349,-1.0226551,-0.7110119,-0.20278701,0.4080111,-0.24757059,0.560663,-0.043828443,-0.59059715,-0.404879,0.10577241,-0.04123819,0.038764026,-0.74717355,-0.93174005,0.4172794,0.012636526,-0.029905573,0.052580692,-0.57956475,0.33240777,0.05124646,-0.13313362,-0.37442774,1.1050551,-0.6497398,-0.7828791,-0.78243166,0.8027905,1.7154152,-0.23472264,0.46506697,0.29824853,-0.24557492,0.03664676,0.22853062,0.42163223,-0.7505829,-0.07960555,-0.019846715,-0.8190336,0.42343783,0.20334198,-0.77962255,0.14979826,-1.2549033,-0.018049516,0.58382505,-0.07663351,1.0662156,-0.14766884,0.26235652,-0.083747566,-0.22945072,-1.6846793,-0.24061072,0.059644964,0.5114838,-0.31563464,-0.024218883,1.1123962,-0.26439792,-0.65116656,-0.7292308,0.9626895,0.079173476,0.12281543,-0.112107575,-0.31702867,0.8684839,0.021466304,-0.056579776,-0.54263,-0.54572135,-0.07264054,0.4478262,0.8747079,0.24202472,-0.22940788,0.22682548,0.121613756,-0.16013917,-1.8160944,0.32065016,-0.4993313,-0.8018098,0.8681984,-0.24999574,-0.2793875,0.9513959,0.6856862,0.5121059,-0.37338242,-0.8987479,2.19133,-0.2398705,-0.75438744,-0.9445168,-0.5094822,-0.05471289,0.0092737,0.9541127,-0.24029693,-0.51365143,0.08389147,0.6447866,-0.23838335,0.36564142,0.19768806,0.68368405,0.30193162,0.33568695,0.33847088,0.12825163,0.2612636,0.938457,0.095568284,-0.395398,0.33624518],"result":{"type":"object","properties":{"text":{"description":"The extracted and cleaned text from the PDF","type":"string"}},"required":["text"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}