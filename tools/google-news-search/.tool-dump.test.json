{"type":"Python","content":[{"version":"1.0.0","name":"Google News Search","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#   \"requests>=2.28.0\"\n# ]\n# ///\n\nimport requests\nimport os\nimport json\nfrom typing import List, Dict, Optional\nimport time\n\nclass CONFIG:\n    \"\"\"\n    Config holds optional parameters for SerpAPI or environment usage.\n    \"\"\"\n    SERP_API_KEY: str  # SerpAPI key for authentication\n\nclass INPUTS:\n    \"\"\"\n    The user inputs for this tool.\n    \"\"\"\n    query: str                   # The user's search query\n    gl: Optional[str] = \"us\"     # Geolocation (country code)\n    hl: Optional[str] = \"en\"     # Language code\n    num_results: Optional[int] = 10  # Max news results to return\n\nclass OUTPUT:\n    \"\"\"\n    The JSON output from the tool. \n    We'll unify each search result, returning them in a structured list.\n    \"\"\"\n    results: List[Dict[str, str]]\n    query: str\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    # Validate config\n    if not c.SERP_API_KEY:\n        raise ValueError(\"SERP_API_KEY not provided in config.\")\n\n    # Validate input\n    if not p.query or not p.query.strip():\n        raise ValueError(\"No search query provided.\")\n\n    # Build request to SerpAPI \"google_news\" engine\n    url = \"https://serpapi.com/search\"\n    params = {\n        \"engine\": \"google_news\",\n        \"q\": p.query.strip(),\n        \"api_key\": c.SERP_API_KEY,\n        \"hl\": p.hl or \"en\",   # language\n        \"gl\": p.gl or \"us\",   # geolocation/country code\n        \"num\": p.num_results if p.num_results else 10,\n    }\n\n    start_time = time.time()\n    resp = requests.get(url, params=params)\n    elapsed = time.time() - start_time\n\n    if resp.status_code != 200:\n        raise RuntimeError(\n            f\"Google News search failed with HTTP {resp.status_code}: {resp.text}\"\n        )\n\n    data = resp.json()\n\n    # In SerpAPI's response, we expect a top-level \"news_results\" key\n    raw_results = data.get(\"news_results\", [])\n    # Convert them to a simpler structure\n    articles = []\n    for item in raw_results[: p.num_results]:\n        # Items typically contain:\n        #   \"title\", \"link\", \"source\" => { \"name\": str }, \"snippet\", \"date\", ...\n        # We'll unify them into a consistent structure\n        article = {\n            \"title\": item.get(\"title\", \"Untitled\"),\n            \"link\": item.get(\"link\", \"\"),\n            \"source\": item.get(\"source\", {}).get(\"name\", \"Unknown\"),\n            \"snippet\": item.get(\"snippet\", \"\"),\n            \"date\": item.get(\"date\", \"\"),\n        }\n        articles.append(article)\n\n    # Prepare our result object\n    output = OUTPUT()\n    output.results = articles\n    output.query = p.query.strip()\n\n    # (optional) some debug prints or logging\n    print(f\"[google-news-search] Found {len(articles)} articles in {elapsed:.2f} seconds.\")\n    return output ","tools":[],"config":[{"BasicConfig":{"key_name":"SERP_API_KEY","description":"Your SerpAPI key for authentication","required":true,"type":null,"key_value":null}}],"description":"Searches Google News for headlines and articles via SerpAPI. Requires SERP_API_KEY in configuration.","keywords":["google-news","serpapi","news","search"],"input_args":{"type":"object","properties":{"hl":{"type":"string","description":"Language code. E.g. 'en', 'zh', 'es', 'fr'..."},"num_results":{"type":"number","description":"Number of results to return"},"query":{"type":"string","description":"The search query to look up in Google News"},"gl":{"type":"string","description":"Geolocation (country code). E.g. 'us', 'uk', 'au', ..."}},"required":["query"]},"output_arg":{"json":""},"activated":false,"embedding":[0.30300695,0.96105754,-0.089330256,-0.24290669,-0.35754716,-0.5456005,-0.13923922,-0.22873786,-0.65981054,-0.34181273,-0.6089842,0.398749,-0.1568277,0.023563959,0.24318016,0.022704683,0.17127179,0.014599344,-0.8312644,-0.15826267,0.73821384,0.594094,0.34571284,0.02123965,-0.17415425,0.072422445,-0.28573573,-0.5429258,-1.0956556,-1.9694613,0.3973645,0.36382145,0.27675655,0.052531555,-0.5698511,-0.33560845,-0.039988652,-0.29301962,-0.4839713,0.04807262,0.08266612,0.06456261,-0.5364021,0.17302117,-0.32042038,0.08729016,0.5494179,-0.153521,0.7215163,0.6226882,0.15232682,0.3927179,-0.8523861,0.27510545,-0.10380891,0.23976174,-0.443868,0.24694376,0.22706988,0.17149396,0.62396216,0.3761238,-4.20067,-0.19873127,0.43058816,0.5886432,0.0299225,-0.36377618,0.094900995,0.3367836,0.34386033,0.27564624,0.3349681,0.58344597,-0.33871412,-0.9716096,0.1452784,0.15148574,-0.116497084,-0.7466118,0.29464364,-0.06981975,-1.0075992,-0.2078874,-0.34312302,0.46824253,-0.45503032,0.06838027,0.45722255,-0.056607667,-0.20906861,-0.1480053,0.24265908,-0.7716443,-0.7068419,-0.2456914,0.06689942,0.36328202,0.50314033,3.2431626,0.53567386,0.048342723,0.554727,-0.6137927,0.6006792,-0.5108483,0.38109002,-0.20392835,-0.19680013,0.36171812,-0.3009695,0.5991129,0.36374748,-0.30028892,0.0051793884,0.3342936,-0.5138369,0.045334168,0.37520382,1.2146078,-0.20687829,-0.47420394,-0.9863534,0.31781307,0.008434504,0.021734223,-0.5892662,0.47134858,0.32889166,-0.21854964,0.38522223,-0.92070806,-0.752111,-0.13168667,0.07435612,0.38180494,0.28219366,-0.5847166,0.046635654,-0.77427423,-0.32156283,-0.93293077,0.91401803,-0.10714826,0.4732029,0.46777144,0.17241031,0.47317842,-0.8305264,-0.3142319,0.12150709,0.117044464,0.586781,0.118813604,0.45305586,-0.20752661,-0.2787793,0.36670506,-0.7773842,-0.12851623,-0.13315804,-0.051338486,0.3167472,-0.32908452,0.11204744,-0.12619892,0.35923424,0.17975602,0.41853017,0.1019233,0.41122353,0.27344903,0.34286854,0.5435678,0.00065461453,-0.010967076,-0.7710066,-0.5951605,0.905092,-0.75765,-0.5343801,0.55771554,0.089466944,-0.5903426,-0.62760025,0.49571294,0.07878231,-0.037144408,0.88884836,0.7347244,-0.6695338,1.9856272,-0.59463495,-0.8260239,0.52393985,0.024317235,-0.67584604,0.2778252,0.46241453,-0.2558844,-0.40309808,-0.11888327,0.15870589,-0.5708803,-0.30320036,-0.4112346,0.34094566,-0.30636275,0.34011936,-0.30568245,0.20861273,-0.69729257,0.32351318,0.17564943,0.054449715,-0.15329058,-0.28299886,0.33089414,-0.41547725,0.5354465,0.10300405,0.31519803,-0.78140676,-0.77649003,-0.5122154,-0.1002778,-0.055661794,0.19184418,-0.90383846,-0.070705995,0.40124592,1.2905726,-0.35271356,0.9294828,0.47941938,0.10162025,0.5567068,0.37049872,0.52636087,-0.70702255,0.54165924,-0.401703,-0.42642313,-0.7257861,0.47509754,-0.76641953,0.004282996,0.6881572,0.42267826,1.454294,1.3900048,0.19030297,0.20534202,0.12920523,0.18959236,0.095249124,-1.2069026,0.061893154,-0.47346315,-0.13986981,-0.009858556,-0.2877513,0.5267324,0.37844834,0.51299083,-0.38796258,0.26115376,-0.70544124,0.015790172,-0.5419482,0.13767488,0.48618573,0.2633006,0.05555039,-0.13647492,-0.22952773,-0.31317168,-0.05333867,-0.6499032,-0.2860552,0.49384427,-0.3723062,0.079470396,-0.1853091,-0.6253829,-0.4099806,-0.45140013,0.84906375,-0.32583648,0.756953,-0.471223,-0.08902159,0.1235369,0.14480871,1.5133095,-0.9378648,0.17505625,0.659975,-0.30343312,0.07176516,-0.48775452,-0.052916095,-0.027382376,0.16967946,-0.39675507,-0.43229648,0.59248173,-0.19114538,0.20889246,0.57460105,-0.6132918,0.42300975,-0.012897886,-0.6906876,0.6319764,-0.7117497,0.16501656,0.71234107,-0.09693125,-1.9725952,-0.01941828,0.020468846,0.15466438,-0.26082903,-1.1355869,0.34978145,0.0018009339,0.103138864,-0.3272871,1.4706942,0.19500297,-0.20350067,-0.49618632,0.34388348,0.10498218,-0.37936333,0.22474502,-0.21342605,-0.66587156,-0.627221,0.14875299,1.5400586,1.0976909,-0.0892815,0.36132443,0.47728142,-0.63186026,-0.9136919,0.52074647,0.5000414,-0.5784508,0.72371525,-0.4100742,-0.4886499,0.38512918,0.9123719,0.8057004,0.26258796,0.041908722,1.1740253,0.023144392,0.4656806,-0.16866246,0.5826923,-0.0017654821,0.38743407,0.3205532,-0.34011373,0.24103175,-0.2896349,0.15979928,-0.27350512,0.8936987,-0.17506944,-0.004211396,0.6701429,0.6714522,0.42119336,0.55140454,0.22857063,0.043316327,0.17861429,-0.90980095,0.38353717],"result":{"type":"object","properties":{"query":{"description":"The original query string","type":"string"},"results":{"description":"List of search results","items":{"properties":{"date":{"type":"string"},"link":{"type":"string"},"snippet":{"type":"string"},"source":{"type":"string"},"title":{"type":"string"}},"type":"object"},"type":"array"}},"required":["results","query"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}