{"type":"Deno","content":[{"name":"ElevenLabs Isolate Voice","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { writeAll, readAll } from \"https://deno.land/std/io/mod.ts\";\nimport { getHomePath } from \"../shinkai-local-support.ts\";\nimport { youtubeDownloadMp3 } from \"../shinkai-local-tools.ts\";\n\ntype CONFIG = {\n  ELEVENLABS_API_KEY: string;\n};\n\ntype INPUTS = {\n  audio_file?: string;\n  youtube_url?: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audio_file: string;\n  characters_used: number;\n  characters_remaining: number;\n};\n\nasync function getUsage(config: CONFIG): Promise<any> {\n  const usageURL = \"https://api.elevenlabs.io/v1/user/subscription\";\n  const usageResponse = await fetch(usageURL, {\n    headers: {\n      \"xi-api-key\": config.ELEVENLABS_API_KEY,\n    },\n  });\n  if (!usageResponse.ok) {\n    throw new Error(\n      `Failed to fetch usage: ${usageResponse.status} ${usageResponse.statusText}`,\n    );\n  }\n  return await usageResponse.json();\n}\n\nasync function isolateVoiceFromYoutube(\n  youtubeUrl: string,\n  config: CONFIG,\n): Promise<Uint8Array> {\n  try {\n    // Create a temporary file name with .mp3 suffix\n    const originalAudioFile = await youtubeDownloadMp3({youtubeUrl, outputFileName: 'original_audio.mp3'});\n\n    // Read the downloaded MP3 file into a Uint8Array\n    const audioData = await Deno.readFile(originalAudioFile.audiofile);\n\n    // Prepare the FormData for the ElevenLabs API call\n    const formData = new FormData();\n    const blob = new Blob([audioData], { type: \"audio/mpeg\" });\n    formData.append(\"audio\", blob, originalAudioFile.audiofile);\n\n    // Call the ElevenLabs API for voice isolation\n    const response = await fetch(\n      \"https://api.elevenlabs.io/v1/audio-isolation\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"audio/mpeg\",\n          \"xi-api-key\": config.ELEVENLABS_API_KEY,\n        },\n        body: formData,\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `ElevenLabs API error: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    // Convert the response into a Uint8Array and return it\n    const arrayBuffer = await response.arrayBuffer();\n    return new Uint8Array(arrayBuffer);\n  } catch (error: any) {\n    console.error(\"Error processing audio:\", error);\n    throw error;\n  }\n}\n\nexport async function run(\n  config: CONFIG,\n  inputs: INPUTS,\n): Promise<OUTPUT> {\n  const homePath = await getHomePath();\n  if (!config.ELEVENLABS_API_KEY) {\n    throw new Error(\"ELEVENLABS_API_KEY is not set\");\n  }\n  if (!inputs.audio_file && !inputs.youtube_url) {\n    throw new Error(\"Either audio_file or youtube_url must be provided\");\n  }\n\n  let audioData: Uint8Array;\n  if (inputs.youtube_url) {\n    audioData = await isolateVoiceFromYoutube(inputs.youtube_url, config);\n  } else if (inputs.audio_file) {\n    const file = await Deno.open(inputs.audio_file, { read: true });\n    const fileData = await readAll(file);\n    file.close();\n\n    const formData = new FormData();\n    const blob = new Blob([fileData], { type: \"audio/mpeg\" });\n    formData.append(\"audio\", blob, inputs.audio_file);\n\n    const response = await fetch(\n      \"https://api.elevenlabs.io/v1/audio-isolation\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"audio/mpeg\",\n          \"xi-api-key\": config.ELEVENLABS_API_KEY,\n        },\n        body: formData,\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `ElevenLabs API error: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const arrayBuffer = await response.arrayBuffer();\n    audioData = new Uint8Array(arrayBuffer);\n  } else {\n    throw new Error(\"No audio file or YouTube URL provided\");\n  }\n\n  // Determine the output file name\n  const fileName = `${homePath}/${inputs.fileName ?? crypto.randomUUID() + \".mp3\"}`;\n  const outputFile = await Deno.open(fileName, { write: true, create: true });\n  await writeAll(outputFile, audioData);\n  outputFile.close();\n\n  // Get usage information from ElevenLabs API (if available)\n  let usage: any;\n  try {\n    usage = await getUsage(config);\n    return {\n      audio_file: fileName,\n      characters_used: usage.character_count,\n      characters_remaining: usage.character_limit - usage.character_count,\n    };\n  } catch (error) {\n    console.error(\"Error getting usage:\", error);\n    return {\n      audio_file: fileName,\n      characters_used: -1,\n      characters_remaining: -1,\n    };\n  }\n}\n","tools":["local:::__official_shinkai:::youtube_download_mp3"],"config":[{"BasicConfig":{"key_name":"ELEVENLABS_API_KEY","description":"The API key for accessing ElevenLabs services","required":true,"type":null,"key_value":null}}],"description":"Isolates audio from YouTube videos or processes local audio files using ElevenLabs API.","keywords":["youtube","audio","isolation","elevenlabs"],"input_args":{"type":"object","properties":{"fileName":{"type":"string","description":"The desired name for the output audio file"},"audio_file":{"type":"string","description":"The path to the local audio file to process"},"youtube_url":{"type":"string","description":"The URL of the YouTube video to download audio from"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[-0.2562434,-0.0067567974,-0.29983857,-0.43505841,-1.0242133,0.06661889,-0.53605866,-0.3230707,-0.14034763,0.124455914,0.052975222,0.42764032,-0.2341847,-0.34350348,0.08837783,-0.24250692,0.2629064,-0.46512556,-1.0586774,-0.5189658,0.0360504,0.75315815,0.2639478,0.3483252,0.33064675,0.28296736,-0.26283348,-0.56828964,-0.5709201,-2.1565034,0.86364746,0.91455925,0.253825,-0.769115,0.06244101,-0.7555227,0.075020485,0.7805717,-0.61388445,-0.79457486,0.20354901,0.12311732,-0.015963227,0.06501671,0.011764269,-0.54542685,0.89890766,0.26081845,1.0975919,0.15101488,0.34160808,-0.51328975,0.28304532,-0.089787126,-0.28361636,-0.6945943,-0.19403249,0.41587326,0.25904357,0.012579124,0.11705798,0.33363557,-3.433911,-0.18079929,0.13218236,0.3958419,0.35912985,-0.27818745,-0.13142604,-0.008354716,0.1528919,0.16594392,-0.8212559,0.23975894,-0.033857033,-0.87535495,0.17705727,-0.30066517,-0.036871158,-0.4685064,0.8929107,0.8747796,0.09097415,-0.39193833,-0.008529494,0.57310295,-0.7561132,0.24395508,-0.1381476,0.08057586,-0.7341852,0.1895842,0.24419203,0.07581279,-0.02447167,-0.51664776,0.505628,0.6026726,0.9177392,2.99451,0.5723134,-0.42511868,0.3796583,-1.0299188,-0.27918684,-0.57087034,0.2559367,-0.21900383,0.31240287,0.19997346,0.15237947,-0.8051612,-0.052623525,0.092492096,0.23626061,0.059111036,-0.41213948,0.56390154,0.35151204,0.6612531,-0.4818554,-0.018495493,-1.0693878,-0.14994037,-0.316178,-0.22384313,-0.7908277,0.36997676,0.1411719,0.062209994,0.1513062,-0.36392203,-0.28494686,0.04693146,0.03011361,-0.31111112,1.0458133,-0.5757925,-0.2641718,-0.5791852,-0.070932806,-1.216664,0.40415734,-0.24961999,0.322638,-0.12185478,-0.43683997,-0.20193997,-0.3162501,0.30402836,0.29777092,0.5650633,0.33763763,-0.31056827,1.3965446,0.12763527,0.5695045,-0.5488208,-0.73600584,-0.4615078,-0.05712434,0.23161487,0.5406085,0.6567684,0.63165116,0.7529599,0.13330996,-0.43512335,0.58296174,0.586754,-0.0063729584,-0.33941224,0.43602762,0.37666327,-0.90217686,-0.5349878,-1.3972869,-0.1548368,0.332718,-0.31649745,0.43735003,1.1454926,-0.28169087,-0.3217937,-0.2223597,0.057537407,-0.42273116,-0.04956086,1.1125712,1.0933008,-0.72657543,1.8997244,-1.1898738,-0.11396211,0.02864094,-0.12719434,-0.1271083,0.43245113,0.33953062,-0.048859205,-0.23632085,-0.5627971,-0.07672405,0.26678902,-0.3909463,-0.78998214,-0.14633313,0.582212,-0.15525989,-0.6818097,0.1506487,-0.5138582,-0.51618594,0.44547868,-0.026621655,0.40156984,-0.048335843,-0.56703806,-0.55223674,0.35647357,0.3496779,0.053296626,-1.1107686,-0.82125205,-0.16673706,0.025514118,-0.5170641,0.043855093,-0.17746037,-0.1559967,1.0413464,1.3722949,1.2975528,0.96454567,0.82740885,0.1807707,-0.057162978,0.4623276,0.3660685,-0.4108282,-0.08274775,-0.028249227,-0.014558226,0.2997225,0.5432144,-0.505655,0.42025983,-0.6185377,-0.72795457,1.7827225,1.1444253,0.29938012,0.8866597,0.2931447,-0.18900198,0.021429203,-1.1141083,0.14585093,0.0141111165,0.5818597,-0.068531565,-0.037470344,0.2993112,0.4729751,-0.3891652,0.7041352,-1.3640909,-0.2193309,-0.024842635,0.32294756,0.94387656,0.5466608,-0.54884285,0.11207963,0.19601801,0.25403208,-0.018227382,0.17209071,-0.7012136,-0.1773847,0.5468966,-0.21868743,0.53736323,0.32288855,-0.66170996,-0.74946445,-0.5649267,-0.18943605,-0.9293664,0.49832916,-1.0983964,-0.27971724,-0.23344356,0.10173148,0.9015809,0.6872256,0.28636518,0.5290017,-0.21888305,-0.292022,-0.7264114,0.37914765,0.19470732,-0.3372535,-0.35668576,0.13538203,0.52853376,0.20948675,-0.15023243,0.8556654,0.043661423,0.61412317,-0.114927456,0.09052005,1.2126714,-0.03202577,-0.23409387,0.8179636,0.21225889,-1.7291996,-0.50263375,-0.14521173,0.23355831,0.07663575,0.2221796,0.030023485,-0.44273022,-0.046094585,-0.5648873,0.8355526,0.31839782,-0.39610186,-0.40438166,0.4650571,0.47500303,-0.0761198,0.054620393,-0.067826234,-0.805382,-0.5309844,0.06821992,1.2715502,-0.37675205,-0.14560364,-0.016057264,0.45546934,-0.19748561,-1.3171179,0.7306707,0.313861,-0.6479486,1.0978073,-0.53460735,-0.5241186,0.9341622,0.4389665,-0.16258799,-0.00045278575,-0.42927852,1.0506561,-0.097871825,0.24640997,0.1896205,0.8254027,0.26343217,0.17326376,-0.051190257,-1.0710484,0.30380082,0.09597372,-0.12842903,-0.69226545,0.07716146,0.5040664,0.5675272,0.046937633,0.058598217,0.79952216,-0.010697864,0.40475023,0.3758864,0.24120522,-0.3339652,-0.26543534],"result":{"type":"object","properties":{"audio_file":{"description":"The path to the output audio file","type":"string"},"characters_remaining":{"description":"The number of characters remaining in the ElevenLabs API limit","type":"number"},"characters_used":{"description":"The number of characters used in the ElevenLabs API","type":"number"}},"required":["audio_file"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}