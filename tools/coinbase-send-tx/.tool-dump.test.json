{"type":"Deno","content":[{"name":"Coinbase Transaction Sender","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { Coinbase, CoinbaseOptions, Transfer } from 'npm:@coinbase/coinbase-sdk@0.0.16';\n\ntype Configurations = {\n  name: string;\n  privateKey: string;\n  walletId?: string;\n  seed?: string;\n  useServerSigner?: string;\n};\ntype Parameters = {\n  recipient_address: string;\n  assetId: string;\n  amount: string;\n};\ntype Result = {\n  transactionHash: string;\n  transactionLink: string;\n  status: string;\n};\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (config: C, inputs: I) => Promise<R>;\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters,\n): Promise<Result> => {\n  const coinbaseOptions: CoinbaseOptions = {\n    apiKeyName: configurations.name,\n    privateKey: configurations.privateKey,\n    useServerSigner: configurations.useServerSigner === 'true',\n    debugging: true,\n  };\n  const coinbase = new Coinbase(coinbaseOptions);\n  console.log(`Coinbase configured: `, coinbase);\n  const user = await coinbase.getDefaultUser();\n  console.log(`User: `, user);\n\n  // Check if seed exists or useServerSigner is true, but not both\n  if (!configurations.seed && configurations.useServerSigner !== 'true') {\n    throw new Error(\n      'Either seed must be provided or useServerSigner must be true',\n    );\n  }\n  if (configurations.seed && configurations.useServerSigner === 'true') {\n    throw new Error(\n      'Both seed and useServerSigner cannot be true at the same time',\n    );\n  }\n\n  // Prioritize walletId from Params over Config\n  const walletId = configurations.walletId;\n  let wallet;\n\n  if (configurations.useServerSigner === 'true') {\n    // Use getWallet if useServerSigner is true\n    if (!walletId) {\n      throw new Error('walletId must be provided when useServerSigner is true');\n    }\n    wallet = await user.getWallet(walletId);\n    console.log(`Wallet retrieved using server signer: `, wallet.toString());\n  } else {\n    if (walletId) {\n      // Retrieve existing Wallet using walletId\n      wallet = await user.importWallet({\n        walletId,\n        // it's not going to be empty but to quiet the type error\n        seed: configurations.seed || '',\n      });\n      console.log(`Wallet retrieved: `, wallet.toString());\n    } else {\n      // Create a new Wallet for the User\n      wallet = await user.createWallet({\n        networkId: Coinbase.networks.BaseSepolia,\n      });\n      console.log(`Wallet successfully created: `, wallet.toString());\n    }\n  }\n\n  // Retrieve the list of balances for the wallet\n  let balances = await wallet.listBalances();\n  console.log(`Balances: `, balances);\n\n  // If no balances, call the faucet and then list balances again\n  if (balances.size === 0) {\n    const faucetTransaction = await wallet.faucet();\n    console.log(\n      `Faucet transaction completed successfully: `,\n      faucetTransaction.toString(),\n    );\n\n    // Retrieve the list of balances again\n    balances = await wallet.listBalances();\n    console.log(`Balances after faucet: `, balances);\n  }\n\n  // Convert amount from string to number\n  const amount = parseFloat(params.amount);\n  if (isNaN(amount)) {\n    throw new Error('Invalid amount provided');\n  }\n\n  // Convert assetId to have only the first letter capitalized\n  const formattedAssetId = params.assetId.toLowerCase();\n\n  // Create and send the transfer\n  let transfer: Transfer;\n  try {\n    transfer = await wallet.createTransfer({\n      amount,\n      assetId: Coinbase.toAssetId(formattedAssetId),\n      destination: params.recipient_address,\n      // gasless: true,\n    });\n    console.log(`Transfer successfully completed: `, transfer.toString());\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error during transfer:', error);\n      throw new Error(`Transfer failed: ${error.message}`);\n    } else {\n      console.error('Unknown error during transfer:', error);\n      throw new Error('Transfer failed due to an unknown error');\n    }\n  }\n\n  return {\n    transactionHash: transfer.getTransactionHash() || '',\n    transactionLink: transfer.getTransactionLink() || '',\n    status: transfer.getStatus() || '',\n  };\n};\n","tools":[],"config":[{"BasicConfig":{"key_name":"name","description":"The name of the Coinbase wallet","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"privateKey","description":"The private key of the Coinbase wallet","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"walletId","description":"Optional wallet ID for specific wallet selection","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"seed","description":"Optional seed phrase for wallet recovery","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"useServerSigner","description":"Optional flag to use server-side signing","required":false,"type":null,"key_value":null}}],"description":"Tool for restoring a Coinbase wallet and sending a transaction","keywords":["coinbase","transaction","shinkai"],"input_args":{"type":"object","properties":{"assetId":{"type":"string","description":"The ID of the asset/token to send"},"recipient_address":{"type":"string","description":"The destination address for the transaction"},"amount":{"type":"string","description":"The amount of tokens to send"}},"required":["recipient_address","assetId","amount"]},"output_arg":{"json":""},"activated":false,"embedding":[-0.10630014,0.31212676,-0.20968504,-0.19728221,-0.2825503,-0.14200157,0.18421392,0.6051932,0.0070748064,-0.23644988,-0.21508339,0.06602022,-0.08799311,0.33520272,0.05262446,-0.8619032,0.19149578,-0.5426763,-1.4286537,0.26885417,0.070588514,0.74827653,-0.6612336,0.3288139,-0.37279356,-0.09198312,0.050032604,-0.27617294,-1.332882,-2.5483098,0.22380641,1.3727521,-0.75865924,-0.26391053,0.02575048,-0.15721598,0.19381005,0.5935394,-0.8159131,-0.4400466,0.35633042,-0.21274251,-0.78440195,0.12480489,-0.07406603,-0.52726996,0.36909246,-0.4293858,0.3135796,0.48838353,-0.2017935,0.14486338,0.46544418,-0.04776167,-0.11148047,-0.04463344,-0.08736634,-0.4005738,0.06416139,0.37336615,-0.29301426,0.20144498,-3.811761,0.2485498,1.1512653,-0.35432354,0.35796613,0.32007536,-0.3965409,0.40618378,-0.04593475,-0.27962667,-0.48348868,0.34719124,0.77586955,-0.38815984,0.63936865,0.449188,0.41841304,-0.073083945,-0.029904839,0.9687823,0.058367237,0.15572332,-0.7845195,0.3508165,0.08181092,-0.35858044,0.05156576,0.14195774,0.07986194,0.2578853,0.29509813,-0.4328652,-0.32384324,-0.18450633,0.11726515,1.0828655,0.13301295,2.9922109,0.2923969,0.50456005,0.3039748,-0.87054944,0.560252,-0.48552132,-0.20804165,-0.66759086,0.047905758,-0.25330704,0.8754593,-0.24802661,0.73752666,0.035375476,0.15104994,0.24459462,-0.48016548,-0.116491765,-0.32644558,0.59698194,-0.6201564,0.5231533,-0.69008094,0.17859831,-0.6306981,0.15108976,-0.08971138,0.32077315,-0.1481643,0.073784605,0.5414025,-0.5307409,-0.40010625,-0.24809282,0.043298613,0.049363755,0.12625732,-0.7809833,-0.73391515,-0.48771286,0.17947307,-1.0176954,0.79205066,0.018399237,0.39569446,-0.5432125,0.3234162,-0.40785646,-0.5095536,-0.29317793,-0.14222139,0.20897487,0.26621228,-0.101210475,0.574804,-0.4614279,0.17990892,-0.38041094,-0.48562828,0.036709815,-0.3665902,-0.08503309,0.6344163,0.8937586,0.8901044,-0.80506796,0.69958156,0.012222938,0.18268496,-0.40818712,0.11860351,0.1913365,-0.14134397,-0.047828555,-0.7528521,-0.13940808,0.054148108,-0.21230236,0.2619693,-0.26462936,-0.63157195,0.8528477,-0.5042952,-1.0094715,-0.12215158,-0.09052036,0.40748066,-0.123072825,0.7986023,0.21546784,-1.1047413,1.6519278,-0.2741962,0.25665244,-0.16939715,-0.16845311,-0.2125227,0.30311194,0.3179199,-0.22322765,-0.046486266,0.081921235,-0.04047773,0.43934715,-0.8087084,-0.3667623,0.33285323,0.93495625,-0.42322582,-0.3565469,0.3280334,0.13185185,0.6080792,0.43253887,0.7096839,-0.31160378,0.027768813,0.22488067,0.8099746,0.1750813,0.91152555,0.40269035,-0.5621129,-0.5243563,-1.0292709,-0.086410016,0.2829317,0.5490511,0.27239317,-0.31958216,0.44189078,0.6911246,0.71461797,0.5726941,1.0976824,0.1591869,-0.3511519,0.38273773,0.46744707,-0.88245654,0.27249816,0.24841759,-0.3852402,-0.39505315,-0.24139261,-0.4726926,0.57380605,-0.1455108,0.23517129,1.6491663,0.4363939,-0.10178873,0.5556193,-0.4228636,0.04809311,0.056794994,-1.1756485,-0.017969182,-0.61885494,0.4689859,-0.05825821,0.16990104,0.56973207,0.34454623,0.023135748,-0.44387564,-0.95120764,0.7069696,0.06278684,0.08745941,-0.18539697,1.2510468,1.0460876,0.30879724,-0.47238186,-0.32846528,0.68559027,-0.007741511,-0.21676052,0.02798667,0.06892003,-0.3690192,0.9072951,0.30558327,0.27019227,-0.5891037,0.3103054,-0.15924269,-0.90355057,-0.18092951,0.068867125,-0.6529006,-0.807926,1.0735916,2.1423545,1.064935,0.33742297,0.11641807,0.11760219,0.21973233,-0.34297758,0.615275,-0.28078014,0.26880556,-1.000701,-0.36105633,0.563491,-0.9529051,-0.0169072,0.0137800425,0.29198688,0.81197447,-0.058648553,0.4823076,-0.098806016,-0.5554749,-0.52055395,0.17212223,-0.2621253,-2.109459,0.25932738,-0.6977003,-0.58639294,-0.06102313,-0.077163845,0.48113644,-0.13215125,0.17619501,-0.22058514,1.6442033,0.18219975,-0.8350094,-0.52396643,0.0888465,0.7222663,0.20095208,0.07325864,-0.17531508,-0.6995229,-0.04955905,0.061133675,0.9162495,-0.15233876,-0.029521551,-0.32691446,0.17967391,-0.3111742,-1.0303295,-0.036147952,-0.71459883,-0.1509239,-0.088531196,0.25378528,0.077575184,1.0497247,0.45726216,-0.6345893,-0.21586668,-0.39404985,1.3175865,0.13741075,-0.32433647,-0.590827,-0.37337023,-0.090205446,-0.16891153,0.24158068,-0.28512365,-0.34426397,0.3725451,0.114503324,-0.4072912,0.40981978,0.02948223,0.7331892,0.32463253,-0.08861975,0.5925969,1.0360391,0.5128991,0.08236236,0.27797675,-0.6015355,0.15565985],"result":{"type":"object","properties":{"status":{"description":"The status of the transaction (e.g., 'success', 'pending', 'failed')","type":"string"},"transactionHash":{"description":"The hash of the completed transaction","type":"string"},"transactionLink":{"description":"A link to view the transaction on a block explorer","type":"string"}},"required":["transactionHash","transactionLink","status"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}