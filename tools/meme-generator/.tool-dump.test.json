{"type":"Deno","content":[{"name":"Meme Generator","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { smartSearchEngine } from './shinkai-local-tools.ts';\nimport { getHomePath, getAssetPaths } from './shinkai-local-support.ts';\nimport axios from 'npm:axios';\nimport * as path from \"jsr:@std/path\";\n\ntype Run<C, P, R> = (configurations: C, parameters: P) => Promise<R>;\n\ninterface Configurations {\n  username: string;\n  password: string;\n}\n\ninterface Parameters {\n  joke: string;\n}\n\ninterface Result {\n  memeUrl: string;\n}\n\ninterface MemeTemplate {\n  id: string;\n  name: string;\n  description: string;\n  url: string;\n  width: number;\n  height: number;\n  box_count: number;\n}\n\n// Split joke into two parts intelligently\nasync function splitJoke(joke: string, parts: number = 2): Promise<[string, string]> {\n    let retries = 0;\n    while (retries < 3) {\n    const result = await shinkaiLlmPromptProcessor({ prompt: `\n<rules>\n* split the joke into ${parts} lines, so its writable in a meme image.\n* write no additional text or comments\n* output EXACTLY JUST the EXACT text and nothing else, any other data will make the output invalid\n</rules>\n\n<joke>\n${joke}\n</joke>\n`});\n    console.log('[MEME GENERATOR] Joke parts', result);\n    const split_parts = result.message.split('\\n');\n    if (split_parts.length !== parts) {\n      retries++;\n      continue;\n    }\n    return split_parts;\n  }\n  throw new Error('Failed to split joke');\n}\n\nconst checkIfExists = async (path: string) => {\n  try {\n    await Deno.lstat(path);\n    return true;\n  } catch (err) {\n    if (!(err instanceof Deno.errors.NotFound)) {\n      throw err;\n    }\n    return false;\n  }\n}\n\nlet memes: MemeTemplate[] = [];\n// Get popular meme templates from Imgflip API\nasync function getMemeTemplates(): Promise<MemeTemplate[]> {\n  if (memes.length > 0) {\n    return memes;\n  }\n  const response = await fetch('https://api.imgflip.com/get_memes');\n  const data = await response.json();\n  if (!data.success) {\n    throw new Error('Failed to fetch meme templates');\n  }\n  memes = data.data.memes;\n\n  // We search for the meme in the local database, or else we do a smart search and create the new entry\n  const final_memes: MemeTemplate[] = [];\n  const asset_database = await getAssetPaths();\n  const home_path = await getHomePath();\n\n  for (const meme of memes) {\n    const name = meme.name.replace(\"/\", \"_\").replace(\",\", \"_\");\n    const name_encoded = encodeURIComponent(name);\n    \n    /**\n     * We check if the meme is already in the asset database\n     * Names are URL encoded when stored in the asset folder.\n     * \n     * If not found, we search for it in the local database\n     * Names are not URL encoded when stored in the local database.\n     * \n     * If not found, we search for it in the smart search engine\n     * And we store the result in the local database\n     */\n    const assetExists = asset_database.find(a => {\n      const parts = a.split('/');\n      const file_name = parts[parts.length - 1];\n      return file_name === `${name_encoded}.json` || file_name === `${name}.json`;\n    })\n\n    const filePath = path.join(home_path, `${name}.json`);\n    const exists = await checkIfExists(filePath);\n    \n    let memeData = '';\n    if (exists) {\n      memeData = await Deno.readTextFile(filePath);\n    }\n    else if (assetExists) {\n      memeData = await Deno.readTextFile(assetExists);    \n    }\n    else {\n      console.log(`[MEME GENERATOR] Meme ${meme.name} not found in local database, searching...`);\n      const memeData = await smartSearchEngine({ question: `Describe this meme, and how its used: '${meme.name}'`});\n      Deno.writeFile(filePath, new TextEncoder().encode(memeData.response));\n    } \n    \n    final_memes.push({\n      ...meme,\n      description: memeData,\n    });\n  }\n  \n  return final_memes;\n}\n\n// Select the best template based on joke content and template characteristics\nasync function selectTemplate(joke: string): Promise<MemeTemplate> {\n  let retries = 0;\n  while (retries < 3) {\n    const templates = await getMemeTemplates();\n    const list = templates.map(m => m.name).join('\\\n');\n\n    const descriptions = templates.map(m => `\n<template_description=${m.name}>\n${m.description}\n</template_description=${m.name}>`).join('\\\n');\n    const prompt = `\n${descriptions}\n\n<rules>\n* templates tag is a list of meme templates names. \n* write no additional text or comments\n* output EXACTLY JUST the EXACT template line and nothing else, any other data will make the output invalid\n* output the line that matches best the joke tag\n</rules>\n\n<templates>\n${list}\n</templates>\n\n<joke>\n${joke}\n</joke>\n\n`;\n    const result = await shinkaiLlmPromptProcessor({ prompt, format: 'text' });\n    console.log('[MEME GENERATOR] prompt', prompt);\n    console.log('[MEME GENERATOR] result:', result);\n    const meme = templates.find(m => m.name.toLowerCase().match(result.message.toLowerCase()))\n    if (meme) {\n      return meme;\n    }\n    retries++;\n  }\n  throw new Error('Failed to select template');\n}\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations,\n  parameters,\n): Promise<Result> => {\n  try {\n    // Select best template based on joke content\n    const template = await selectTemplate(parameters.joke);\n    console.log(`[MEME GENERATOR] Selected template: ${template.name}`);\n    // Split the joke into two parts\n    const parts = await splitJoke(parameters.joke);\n\n    const params = new URLSearchParams();\n    params.append('template_id', template.id);\n    params.append('username', configurations.username);\n    params.append('password', configurations.password);\n    for (let i = 0; i < parts.length; i += 1) {\n      params.append('text' + i, parts[i]);\n    }\n    console.log('[MEME GENERATOR] Sending request to Imgflip API...');\n    const response = await axios.post('https://api.imgflip.com/caption_image', params);\n    console.log('[MEME GENERATOR] Response from Imgflip API:', response.data);\n    return { memeUrl: response.data.data.url };\n  } catch (error) {\n    if (error instanceof Error) {\n      console.log('[MEME GENERATOR]', error);\n      throw new Error(`Failed to generate meme: ${error.message}`);\n    }\n    throw error;\n  }\n};\n","tools":["local:::__official_shinkai:::shinkai_llm_prompt_processor","local:::__official_shinkai:::smart_search_engine"],"config":[{"BasicConfig":{"key_name":"username","description":"The username for the Imgflip API","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"password","description":"The password for the Imgflip API","required":true,"type":null,"key_value":null}}],"description":"Generates a meme image based on a joke by selecting a template and splitting the joke into appropriate parts.","keywords":["meme","generator","joke","image"],"input_args":{"type":"object","properties":{"joke":{"type":"string","description":"The joke to create the meme from"}},"required":["joke"]},"output_arg":{"json":""},"activated":false,"embedding":[0.07770462,0.84290165,-0.38971272,-0.52935266,-0.57442975,-0.02301599,-0.79770994,-0.20670265,0.45485917,0.4900688,-0.83260924,0.68175036,0.42029244,-0.021393724,0.56853694,-0.18581532,0.2587295,-0.18381637,-1.5447137,-0.83882564,-0.51236284,0.79209775,0.24866354,-0.18286534,-0.3201249,0.12541209,0.26691213,-0.38793832,-0.80777246,-1.622237,0.643129,0.76524657,-0.40012032,-0.5716081,0.3723563,-0.54502726,-0.101562135,-0.17352197,0.07279132,0.23861875,0.77975833,-0.22264598,-0.38271362,-0.3174745,-0.16885109,-0.23159567,0.98375255,0.12411848,0.59308666,0.89764416,-0.61956483,-0.53776044,0.65445757,-0.3080749,-0.4905625,0.44920188,-0.5125317,-0.4115791,0.29938203,-0.1728169,-0.17256615,0.18572643,-3.273985,0.12016618,1.1618897,-0.048071258,0.09329646,-0.15361561,-0.0986444,0.07410586,0.46765968,0.06611385,-0.84506863,0.8110884,-0.35661486,-0.21006203,0.014664064,-0.0032753907,0.8426369,-0.19805922,0.33745393,-0.13224831,0.43411598,-0.0254139,-0.7612562,0.68194354,-0.25672516,-0.15237853,0.113407806,0.14972158,-0.3596226,-0.63957876,0.3792916,0.025751159,-0.39673588,0.14252666,-0.16023614,-0.498626,0.28709656,2.903584,1.0877717,0.069851115,0.7953701,-0.62874085,0.54505134,-0.25492752,0.29871804,-0.2715704,0.2381739,0.21566541,0.38904405,-0.40352944,-0.6441679,0.25506255,0.7339529,0.0721661,-1.1502624,-0.37983498,0.33590436,0.2779944,-0.17535034,0.25671136,-1.3590001,-0.33449274,-0.10388684,0.31514102,-0.26972783,0.2906064,-0.023636924,0.029315637,0.4173423,-0.21434814,-0.5221496,0.074507676,0.018440947,0.26529947,0.5032882,-0.772811,0.23105913,-0.3718848,0.16517934,-0.91500294,0.2750445,0.13683811,0.90574044,0.40742466,-0.15847239,0.20905429,-0.6844956,-0.7549691,0.49417153,-0.3450128,0.023315739,0.07946309,1.2020411,-0.27541655,-0.12851837,-0.17050856,0.16362661,0.6442627,0.26775324,-0.009873655,0.26958543,0.48151374,-0.13145119,-0.00313529,-0.09958592,0.035817217,0.40098906,-0.47461772,0.4744976,0.0039388686,0.21975338,0.2269569,0.38956964,-0.62533534,-0.23481034,0.0027663335,0.6313913,-0.38799465,0.61983764,0.6319353,-0.03384192,-0.8264582,-0.2669925,0.0348989,0.2262696,-0.23507282,0.63482106,0.26270226,-0.09246224,1.2241862,-0.7428956,-0.20833349,0.28455558,0.35220665,1.0130937,0.61068386,1.0411919,-0.25468394,-0.8105228,0.14316028,0.030566081,-0.24305674,-0.27712014,-0.29290634,-0.12040393,0.1110494,-0.31645238,-1.0506703,-0.05897979,-0.109363586,0.67470896,0.56649005,0.98419595,0.01260728,0.082965024,-0.18842852,0.19837068,0.09308792,0.5756054,0.2857569,-0.36898047,-0.40622047,-0.5630294,0.48310423,-0.6397886,-0.43850052,-0.55736655,-0.19363557,0.7279634,0.8925584,-0.16702157,1.3978695,0.3869308,0.5305815,-0.2760066,0.22669727,0.02390296,-0.910067,0.6366215,-0.6450572,-0.15581405,-0.30412403,-0.25869542,-0.80276716,-0.1464723,-0.4791968,0.074729145,1.6448712,0.5367733,-0.24627888,0.71359414,0.11432497,-0.37614375,0.104347676,-2.4054878,-0.38464087,-0.45809084,0.27521178,-0.21320236,-0.6307088,0.4653099,-0.13895075,-0.7100424,-0.13842268,-0.8090505,-1.2633275,0.09259922,-0.15826818,0.5426781,0.3073169,-0.3106928,0.3572636,-0.2039256,-0.050589085,0.6394125,0.4221891,-0.30065337,-0.63090456,-0.20879826,0.5433313,-0.24148473,0.42012703,-0.79451495,-0.072197,-0.4462848,0.1528351,0.23574126,0.43338814,0.073133804,-0.3224336,0.35992762,0.022428125,2.0722675,0.16733077,0.79306936,0.5512098,-0.3434232,-0.28289026,0.57379735,0.32006282,0.059979703,-1.2982321,-1.3745315,-0.61686754,0.060152728,-0.14790341,-0.5816348,-0.48598945,-0.06631937,-0.7181487,0.24183547,0.35406896,-0.030313864,0.15686572,0.30483177,0.6865519,0.17249072,-2.2495277,-0.10283475,0.713389,0.116344035,-0.32712105,0.33908576,0.30763644,-0.25070885,0.69356406,-0.07898367,1.3463818,0.4810569,0.03876197,-0.0021644644,0.12625271,1.0383128,0.34445384,-0.24992438,-0.8732724,-0.71987605,-0.09642674,0.68360645,1.8044105,0.30619872,0.70151573,-0.19714585,-0.37972227,-0.7878241,-1.2132559,0.27668476,0.63051534,-0.1252994,0.54594815,-0.22575185,-0.5578884,0.5384561,0.48284194,-0.24947259,0.09662707,-0.42920431,1.2436106,0.09349191,-0.0901229,-0.107433215,-0.5584467,0.32059017,-0.37133753,0.7009931,-0.45025662,0.16668099,0.47932082,0.38071656,-0.09012289,-0.023923457,0.54390204,0.39207742,-0.42102444,0.15822689,-0.269121,0.7017496,0.18026619,0.6864376,0.3351004,-0.55121535,-0.4608196],"result":{"type":"object","properties":{"memeUrl":{"description":"The URL of the generated meme image","type":"string"}},"required":["memeUrl"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}