{"type":"Deno","content":[{"name":"ElevenLabs Isolate Voice","tool_router_key":"local:::__official_shinkai:::elevenlabs_isolate_voice","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { writeAll, readAll } from \"https://deno.land/std/io/mod.ts\";\nimport { getHomePath } from \"../shinkai-local-support.ts\";\nimport { youtubeDownloadMp3 } from \"../shinkai-local-tools.ts\";\n\ntype CONFIG = {\n  ELEVENLABS_API_KEY: string;\n};\n\ntype INPUTS = {\n  audio_file?: string;\n  youtube_url?: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audio_file: string;\n  characters_used: number;\n  characters_remaining: number;\n};\n\nasync function getUsage(config: CONFIG): Promise<any> {\n  const usageURL = \"https://api.elevenlabs.io/v1/user/subscription\";\n  const usageResponse = await fetch(usageURL, {\n    headers: {\n      \"xi-api-key\": config.ELEVENLABS_API_KEY,\n    },\n  });\n  if (!usageResponse.ok) {\n    throw new Error(\n      `Failed to fetch usage: ${usageResponse.status} ${usageResponse.statusText}`,\n    );\n  }\n  return await usageResponse.json();\n}\n\nasync function isolateVoiceFromYoutube(\n  youtubeUrl: string,\n  config: CONFIG,\n): Promise<Uint8Array> {\n  try {\n    // Create a temporary file name with .mp3 suffix\n    const originalAudioFile = await youtubeDownloadMp3({youtubeUrl, outputFileName: 'original_audio.mp3'});\n\n    // Read the downloaded MP3 file into a Uint8Array\n    const audioData = await Deno.readFile(originalAudioFile.audiofile);\n\n    // Prepare the FormData for the ElevenLabs API call\n    const formData = new FormData();\n    const blob = new Blob([audioData], { type: \"audio/mpeg\" });\n    formData.append(\"audio\", blob, originalAudioFile.audiofile);\n\n    // Call the ElevenLabs API for voice isolation\n    const response = await fetch(\n      \"https://api.elevenlabs.io/v1/audio-isolation\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"audio/mpeg\",\n          \"xi-api-key\": config.ELEVENLABS_API_KEY,\n        },\n        body: formData,\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `ElevenLabs API error: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    // Convert the response into a Uint8Array and return it\n    const arrayBuffer = await response.arrayBuffer();\n    return new Uint8Array(arrayBuffer);\n  } catch (error: any) {\n    console.error(\"Error processing audio:\", error);\n    throw error;\n  }\n}\n\nexport async function run(\n  config: CONFIG,\n  inputs: INPUTS,\n): Promise<OUTPUT> {\n  const homePath = await getHomePath();\n  if (!config.ELEVENLABS_API_KEY) {\n    throw new Error(\"ELEVENLABS_API_KEY is not set\");\n  }\n  if (!inputs.audio_file && !inputs.youtube_url) {\n    throw new Error(\"Either audio_file or youtube_url must be provided\");\n  }\n\n  let audioData: Uint8Array;\n  if (inputs.youtube_url) {\n    audioData = await isolateVoiceFromYoutube(inputs.youtube_url, config);\n  } else if (inputs.audio_file) {\n    const file = await Deno.open(inputs.audio_file, { read: true });\n    const fileData = await readAll(file);\n    file.close();\n\n    const formData = new FormData();\n    const blob = new Blob([fileData], { type: \"audio/mpeg\" });\n    formData.append(\"audio\", blob, inputs.audio_file);\n\n    const response = await fetch(\n      \"https://api.elevenlabs.io/v1/audio-isolation\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"audio/mpeg\",\n          \"xi-api-key\": config.ELEVENLABS_API_KEY,\n        },\n        body: formData,\n      },\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `ElevenLabs API error: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const arrayBuffer = await response.arrayBuffer();\n    audioData = new Uint8Array(arrayBuffer);\n  } else {\n    throw new Error(\"No audio file or YouTube URL provided\");\n  }\n\n  // Determine the output file name\n  const fileName = `${homePath}/${inputs.fileName ?? crypto.randomUUID() + \".mp3\"}`;\n  const outputFile = await Deno.open(fileName, { write: true, create: true });\n  await writeAll(outputFile, audioData);\n  outputFile.close();\n\n  // Get usage information from ElevenLabs API (if available)\n  let usage: any;\n  try {\n    usage = await getUsage(config);\n    return {\n      audio_file: fileName,\n      characters_used: usage.character_count,\n      characters_remaining: usage.character_limit - usage.character_count,\n    };\n  } catch (error) {\n    console.error(\"Error getting usage:\", error);\n    return {\n      audio_file: fileName,\n      characters_used: -1,\n      characters_remaining: -1,\n    };\n  }\n}\n","tools":["local:::__official_shinkai:::youtube_download_mp3"],"config":[{"BasicConfig":{"key_name":"ELEVENLABS_API_KEY","description":"The API key for accessing ElevenLabs services","required":true,"type":null,"key_value":null}}],"description":"Isolates audio from YouTube videos or processes local audio files using ElevenLabs API.","keywords":["youtube","audio","isolation","elevenlabs"],"input_args":{"type":"object","properties":{"fileName":{"type":"string","description":"The desired name for the output audio file"},"audio_file":{"type":"string","description":"The path to the local audio file to process"},"youtube_url":{"type":"string","description":"The URL of the YouTube video to download audio from"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[-0.2561748,-0.0066863894,-0.30004984,-0.4351605,-1.0239403,0.06652062,-0.5359306,-0.32306993,-0.1404613,0.12426727,0.05297125,0.4274952,-0.23427555,-0.34362715,0.088360004,-0.24240789,0.2629556,-0.46531028,-1.0586919,-0.51888174,0.03589536,0.75306004,0.26414162,0.34819192,0.33061272,0.28303683,-0.26279578,-0.5682099,-0.57118773,-2.1566384,0.8637319,0.91460764,0.25375208,-0.7691183,0.06264579,-0.7552138,0.0751224,0.78060305,-0.6138119,-0.7946592,0.20351462,0.12320984,-0.015878595,0.06522432,0.011751249,-0.5452676,0.89876753,0.26079747,1.0973724,0.15092595,0.34178293,-0.5133753,0.2831412,-0.08984439,-0.2834677,-0.6947553,-0.19408593,0.41570002,0.25923032,0.0124555975,0.11698308,0.3334934,-3.4340363,-0.18073918,0.13220721,0.39591748,0.35934114,-0.27813765,-0.13143332,-0.008459315,0.15290743,0.16581424,-0.8210208,0.23970857,-0.033634536,-0.87548405,0.17737858,-0.30089033,-0.036773287,-0.46858844,0.89290476,0.87453955,0.09086564,-0.39206994,-0.00842578,0.57308406,-0.7561051,0.24394262,-0.13797988,0.080703706,-0.73436004,0.18960044,0.24414846,0.07581216,-0.024334967,-0.5165468,0.5053997,0.60256827,0.917692,2.9946442,0.5723198,-0.42503196,0.3798496,-1.0297835,-0.2793412,-0.5707366,0.25587285,-0.21904388,0.31239238,0.19991602,0.15240234,-0.805076,-0.052607685,0.09239911,0.2361781,0.059123285,-0.41223264,0.56402886,0.35143438,0.6611976,-0.48171517,-0.018550523,-1.0695066,-0.14979705,-0.31632078,-0.22391093,-0.7907506,0.3699181,0.14135507,0.06217757,0.15123592,-0.36382726,-0.28505757,0.046846174,0.03017893,-0.31112573,1.0459199,-0.5757531,-0.26418903,-0.57917947,-0.070889294,-1.2166964,0.40422732,-0.24964914,0.3225288,-0.121993646,-0.43672398,-0.20189473,-0.31628752,0.30405876,0.2978353,0.5649797,0.33778214,-0.31051946,1.396501,0.12758239,0.56957823,-0.54872024,-0.7358613,-0.46161425,-0.057125907,0.23171398,0.54056823,0.65697366,0.6313859,0.7529046,0.13321498,-0.43495172,0.5826218,0.5867153,-0.0065106302,-0.3394566,0.43600217,0.37641674,-0.90225416,-0.5350079,-1.3971913,-0.15494561,0.33259398,-0.31636524,0.43739358,1.1455789,-0.28148878,-0.32176718,-0.22266433,0.057841845,-0.4227815,-0.049588338,1.1127173,1.0932344,-0.72647333,1.8998711,-1.1899477,-0.11403701,0.028390026,-0.12741804,-0.12717716,0.4324414,0.33947125,-0.04887196,-0.23639789,-0.5630711,-0.07644932,0.26667553,-0.39090666,-0.78991485,-0.14627947,0.5823495,-0.15534684,-0.6818714,0.15082924,-0.5135714,-0.5161115,0.44549236,-0.026547387,0.401672,-0.048419654,-0.56691957,-0.5519927,0.35632133,0.34967095,0.053375512,-1.1108335,-0.8211972,-0.16686225,0.025410108,-0.5171354,0.043893572,-0.17739674,-0.15612602,1.0412972,1.372121,1.297479,0.9644741,0.82740134,0.18077487,-0.057225488,0.4622498,0.36629283,-0.4107709,-0.08268582,-0.028435275,-0.014693573,0.2995475,0.5433147,-0.5056254,0.420233,-0.61846685,-0.7278837,1.7826939,1.1443894,0.29948312,0.8866126,0.29315662,-0.18899813,0.02150628,-1.1139114,0.14569755,0.014004663,0.5818541,-0.06850462,-0.037326653,0.2992466,0.47292742,-0.38910767,0.70410085,-1.364465,-0.21927677,-0.025047187,0.32296333,0.94384134,0.5467163,-0.54864115,0.112099946,0.19593571,0.25411004,-0.018104533,0.1721436,-0.70113724,-0.1775399,0.54686797,-0.21867783,0.5373867,0.32276237,-0.6616198,-0.7493929,-0.56492734,-0.18912748,-0.92935973,0.4985268,-1.0981439,-0.2795086,-0.23343074,0.10185225,0.90171134,0.6873003,0.28629056,0.52863765,-0.218701,-0.29200482,-0.7265011,0.3790309,0.19460514,-0.33716103,-0.3567264,0.13562596,0.52869326,0.20954308,-0.15017524,0.8557385,0.04385931,0.6142392,-0.114973426,0.090367265,1.2126918,-0.031961873,-0.23417705,0.8179854,0.21210729,-1.729214,-0.50250065,-0.14530045,0.23341972,0.07644099,0.2220035,0.029912323,-0.44281024,-0.04594488,-0.56467503,0.8355659,0.31872085,-0.39619803,-0.4044326,0.4649987,0.47500458,-0.0763407,0.054708004,-0.0677905,-0.8053961,-0.53100145,0.068231255,1.2715344,-0.3767224,-0.14562999,-0.015870288,0.4556519,-0.1976018,-1.3170521,0.73093605,0.31423098,-0.6479872,1.0977144,-0.5348069,-0.5241821,0.9339097,0.43892202,-0.16254185,-0.00057166815,-0.4293119,1.0506392,-0.097957656,0.24648196,0.18991688,0.82537436,0.2635484,0.1732144,-0.051478103,-1.071041,0.30397236,0.09605829,-0.12863314,-0.6924322,0.07713996,0.50428826,0.56734043,0.046733648,0.058633227,0.7996787,-0.0104923025,0.4045545,0.37557906,0.24101122,-0.33368108,-0.26544052],"result":{"type":"object","properties":{"audio_file":{"description":"The path to the output audio file","type":"string"},"characters_remaining":{"description":"The number of characters remaining in the ElevenLabs API limit","type":"number"},"characters_used":{"description":"The number of characters used in the ElevenLabs API","type":"number"}},"required":["audio_file"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}