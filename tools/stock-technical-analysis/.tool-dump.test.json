{"type":"Python","content":[{"version":"1.0.0","name":"Stock Technical Analysis","homepage":null,"author":"@@official.shinkai","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"pandas>=2.2.0\",\n#   \"numpy>=1.26.0\",\n#   \"aiohttp>=3.8.0\",\n#   \"requests\",\n#   \"python-dotenv>=0.21.0\",\n#   \"setuptools>=65.0.0\",\n#   \"pandas-ta>=0.3.14b\"\n# ]\n# ///\n\nimport os\nimport aiohttp\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom dotenv import load_dotenv\nfrom typing import Dict, Any, Optional, List\n\n# Ensure numpy nan is available for pandas-ta\nnp.NaN = np.nan\n\nimport pandas_ta as ta\n\n# Load environment variables from .env if present\nload_dotenv()\n\nclass CONFIG:\n    tiingo_api_key: str = \"\"  # If empty, we'll default to TIINGO_API_KEY env var\n\nclass INPUTS:\n    symbol: str\n    lookback_days: int = 365\n\nclass OUTPUT:\n    analysis: dict\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    if not p.symbol or not p.symbol.strip():\n        raise ValueError(\"Missing 'symbol' in parameters\")\n\n    api_key = c.tiingo_api_key.strip() if c.tiingo_api_key else os.getenv(\"TIINGO_API_KEY\", \"\").strip()\n    if not api_key:\n        raise ValueError(\"No Tiingo API key found. Provide it in 'tiingo_api_key' config or TIINGO_API_KEY env var\")\n\n    # Prepare date range\n    end_date = datetime.utcnow()\n    start_date = end_date - timedelta(days=p.lookback_days)\n\n    # Build the Tiingo URL\n    base_url = \"https://api.tiingo.com/tiingo/daily\"\n    url = (\n        f\"{base_url}/{p.symbol}/prices?\"\n        f\"startDate={start_date.strftime('%Y-%m-%d')}&\"\n        f\"endDate={end_date.strftime('%Y-%m-%d')}&\"\n        \"format=json\"\n    )\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Token {api_key}\"\n    }\n\n    # Fetch data asynchronously\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url, headers=headers) as resp:\n            if resp.status == 404:\n                raise ValueError(f\"Symbol not found: {p.symbol}\")\n            resp.raise_for_status()\n            data = await resp.json()\n\n    if not data:\n        raise ValueError(f\"No data returned for symbol {p.symbol}\")\n\n    # Convert to DataFrame\n    df = pd.DataFrame(data)\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True)\n\n    # Use adjusted price columns if present\n    df[\"open\"] = df.get(\"adjOpen\", df[\"open\"]).round(2)\n    df[\"high\"] = df.get(\"adjHigh\", df[\"high\"]).round(2)\n    df[\"low\"] = df.get(\"adjLow\", df[\"low\"]).round(2)\n    df[\"close\"] = df.get(\"adjClose\", df[\"close\"]).round(2)\n    df[\"volume\"] = df.get(\"adjVolume\", df[\"volume\"]).astype(int)\n\n    # Basic sanity check: must have enough rows\n    if len(df) < 10:\n        raise ValueError(f\"Not enough data points to calculate indicators for {p.symbol}\")\n\n    # Calculate indicators using pandas_ta\n    # Moving Averages\n    df.ta.sma(length=20, append=True, col_names=(\"sma_20\",))\n    df.ta.sma(length=50, append=True, col_names=(\"sma_50\",))\n    df.ta.sma(length=200, append=True, col_names=(\"sma_200\",))\n\n    # RSI\n    df.ta.rsi(length=14, append=True, col_names=(\"rsi\",))\n\n    # MACD\n    df.ta.macd(append=True)\n\n    # ATR\n    df.ta.atr(length=14, append=True, col_names=(\"atr\",))\n\n    # Average Daily Range\n    df[\"daily_range\"] = df[\"high\"] - df[\"low\"]\n    df[\"adr\"] = df[\"daily_range\"].rolling(window=20).mean()\n    df[\"adrp\"] = (df[\"adr\"] / df[\"close\"]) * 100\n\n    # Volume\n    df[\"avg_20d_vol\"] = df[\"volume\"].rolling(window=20).mean()\n\n    # Get latest values\n    latest = df.iloc[-1]\n\n    # Build an output dict\n    analysis_dict = {\n        \"latestClose\": float(latest[\"close\"]),\n        \"aboveSma20\": bool(latest[\"close\"] > latest[\"sma_20\"]),\n        \"aboveSma50\": bool(latest[\"close\"] > latest[\"sma_50\"]),\n        \"aboveSma200\": bool(latest[\"close\"] > latest[\"sma_200\"]),\n        \"sma20OverSma50\": bool(latest[\"sma_20\"] > latest[\"sma_50\"]),\n        \"sma50OverSma200\": bool(latest[\"sma_50\"] > latest[\"sma_200\"]),\n        \"rsi\": float(latest[\"rsi\"]) if not np.isnan(latest[\"rsi\"]) else None,\n        \"macdBullish\": bool(latest[\"MACD_12_26_9\"] > latest[\"MACDs_12_26_9\"]),\n        \"atr\": float(latest[\"atr\"]) if not np.isnan(latest[\"atr\"]) else None,\n        \"adrPercent\": float(latest[\"adrp\"]) if not np.isnan(latest[\"adrp\"]) else None,\n        \"avg20dVolume\": float(latest[\"avg_20d_vol\"]) if not np.isnan(latest[\"avg_20d_vol\"]) else None,\n    }\n\n    # Build final OUTPUT\n    out = OUTPUT()\n    out.analysis = analysis_dict\n    return out ","tools":[],"config":[{"BasicConfig":{"key_name":"tiingo_api_key","description":"Your Tiingo API key. If not provided, we will check the TIINGO_API_KEY environment variable.","required":false,"type":null,"key_value":null}}],"description":"Fetches historical stock data from Tiingo and calculates basic technical indicators (SMA, RSI, MACD, ATR, etc.), then returns a structured analysis of the trend.","keywords":["stock","analysis","technical-indicators","tiingo"],"input_args":{"type":"object","properties":{"lookback_days":{"type":"number","description":"How many days of historical data to fetch."},"symbol":{"type":"string","description":"The stock symbol to fetch data for."}},"required":["symbol"]},"output_arg":{"json":""},"activated":false,"embedding":[0.588086,0.11139601,-0.22002943,-0.025360242,-0.20829879,-0.19341567,0.14649837,0.3325745,-0.63615036,-0.13336834,0.050763756,0.35944632,-0.1271824,-0.32941845,0.20058887,-0.6069608,0.59970826,-0.8242586,-1.3290992,-0.5288693,0.33453065,-0.17192903,-0.0111875385,0.59751534,0.3193918,-0.28922018,-0.31827724,0.19479425,-0.755629,-1.7738234,0.08778837,0.3242501,-0.17548314,-0.0073091313,-0.05531933,-0.11224078,0.36795026,0.4361935,-0.29181057,-0.25830823,0.37766135,0.051577277,-0.02086934,-0.60061336,0.3781467,0.17444894,0.30238256,0.30704182,0.46487656,0.8399762,-0.40812713,0.13619332,0.118463606,-0.79635644,-0.53356665,-0.14644131,0.28755265,-0.59815776,0.0076700915,-0.5383948,0.15281488,0.23973233,-2.8444853,-0.2612996,0.22548644,-0.05062288,0.4112679,0.49572793,-0.37391558,-0.07361518,-0.28484362,-0.13731472,0.59632796,-0.0711885,-0.0996322,0.30627254,0.023870945,0.3115185,0.46289474,-0.9065033,-0.31855568,0.5504025,0.022228416,0.09976353,-1.1117159,0.55614245,0.2592809,-0.38279733,0.6374847,0.39030707,0.07758345,0.16303897,0.9993102,0.08094673,-0.1616815,0.30740896,-0.2858101,0.8519413,-0.7246807,3.504431,0.7761895,0.16397136,-0.16726261,-1.463553,-0.4412198,-0.63713723,0.10423218,-0.23840807,0.0886207,0.74000233,-0.09649332,0.4173338,-0.20486557,-0.047097437,0.36057064,0.66818714,-0.75686485,-0.25083637,-0.5793625,-0.13674408,-1.189945,0.03304594,-0.59296954,-0.26829976,0.17674696,0.037889704,-0.38272431,0.67375696,0.3894625,-0.15628485,0.5116194,0.19376664,-0.9435863,0.5401365,0.02769944,0.2450554,-0.64169264,-0.042084623,0.27583334,-1.0311537,-0.72930855,-1.2188536,0.72218454,-0.36493805,0.9674733,0.13532984,0.50818104,0.024124287,-0.18767649,-0.33845124,0.12013546,0.15981728,-0.21847464,0.72527194,1.0576231,0.4235904,-0.4764276,0.32215914,0.083153345,0.07006661,-0.80826944,0.064238645,0.17608821,-0.03975819,0.24014357,-0.1331444,0.2230784,0.5277175,0.676855,0.59310615,0.3870271,-0.45849702,-0.0648579,0.71765876,-0.12572622,0.41192704,0.0706189,-0.12616491,-0.48125863,-0.8153095,0.15284224,0.38152462,0.21182062,-0.22071049,0.54050213,-0.081276506,0.10565006,-0.24004969,0.4184522,1.0972632,-0.5612748,1.0630974,-0.6638462,-0.6555206,0.012238591,0.14588587,-0.75431174,0.6639319,0.7027383,-0.19503196,-0.19031578,0.17637402,-0.20835564,-0.25607732,-0.747745,-0.11123552,0.24317142,-0.68402654,0.53102213,-0.2896281,0.1068811,-0.14556631,0.6935855,-0.34642243,0.13050419,0.25190043,0.19815415,-0.31521088,-0.12718052,0.47653708,0.08682226,0.040706944,0.19996874,-0.8710941,-0.7907535,0.8352735,0.21077377,-0.047517534,-0.5189194,-0.9515838,0.2730491,0.6210835,1.0825163,1.9121441,1.4841967,-0.4347366,-0.36639225,0.8295562,0.5791991,-0.25550854,0.7058572,0.14566764,-0.13265985,0.08012806,-0.47432345,0.07931419,-0.74948424,0.73396677,0.40188253,1.9649456,0.2586079,0.11022474,-0.08620247,0.870823,0.15004107,-0.26801324,-0.79727536,0.067097075,-0.69986075,0.5811456,0.12622452,-0.07722341,1.2125292,0.4203737,-0.16197109,0.14388523,-0.5819018,-0.40372556,0.16610262,0.3223844,-0.14671868,0.13064535,-0.5735333,-0.24660277,0.14337784,0.37458533,0.45621175,-0.08771827,-0.98203975,0.19763014,0.028564103,0.43922365,0.3497582,0.200275,-0.5121318,0.06694374,-0.2623231,-0.45300764,-0.35219815,0.26687577,0.1862914,-0.576877,-0.7122079,0.37970304,1.3720522,0.038202047,-0.34312204,0.74001753,0.31133112,0.39284635,-0.59204227,0.09667468,-0.17303525,0.3405166,-0.64181894,-0.96044093,0.73137224,0.0024095252,-0.39262608,0.3335858,-1.4846665,0.34027466,0.59058994,-0.34424853,0.66136867,-0.08512595,0.7803199,0.314199,-0.53216887,-1.7556847,0.053506255,-0.537954,0.39509758,-0.27795377,-0.37479535,0.4839155,-0.2899102,-0.24697748,-0.3817047,0.9075736,0.1973304,0.20398282,-1.0240593,-0.0813825,0.6898917,-0.644764,-0.12873691,-0.05952353,-0.9735811,-0.06815235,-0.026236087,0.9153312,-0.14725357,1.1226836,0.5774415,0.1375182,-0.42427564,-0.7784824,0.7117132,0.49956018,-0.4806746,0.83004034,0.17826419,-0.4031879,0.02080993,0.5473806,-0.8256467,0.3175609,-0.4371351,1.2563854,-0.044757385,-0.38827968,-0.43754932,-0.023972593,0.15706533,0.7514846,-0.039604835,-0.38977957,-0.1644595,-0.077810116,0.20907152,0.104130425,0.233937,-0.103127465,0.44076616,0.358607,0.15495194,0.70579743,-0.258889,-0.32200515,0.019684486,-0.7773053,-1.570646,-0.8220707],"result":{"type":"object","properties":{"analysis":{"description":"Contains various technical analysis indicators and booleans describing the trend.","properties":{"aboveSma20":{"type":"boolean"},"aboveSma200":{"type":"boolean"},"aboveSma50":{"type":"boolean"},"adrPercent":{"type":"number"},"atr":{"type":"number"},"avg20dVolume":{"type":"number"},"latestClose":{"type":"number"},"macdBullish":{"type":"boolean"},"rsi":{"type":"number"},"sma20OverSma50":{"type":"boolean"},"sma50OverSma200":{"type":"boolean"}},"required":["latestClose"],"type":"object"}},"required":["analysis"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}