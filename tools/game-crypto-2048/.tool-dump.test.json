{"type":"Deno","content":[{"name":"Play Crypto 2048","tool_router_key":"local:::__official_shinkai:::play_crypto_2048","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { shinkaiTypescriptUnsafeProcessor } from \"./shinkai-local-tools.ts\";\n\nconst get_ts_code = () => {\n  return `\nimport { Stagehand } from \"@browserbasehq/stagehand\";\nimport { z } from \"zod\";\nconst randomTimer = (min: number = 0, max: number = 1500) => {\n  const timeAmount = Math.floor(Math.random() * (max - min + 1)) + min;\n  return new Promise((resolve) => setTimeout(resolve, timeAmount));\n};\nexport async function run(config: any, inputs: any) {\n  console.log(\"🎮 Starting 2048 bot...\");\n  const stagehand = new Stagehand({\n    env: \"LOCAL\",\n    modelName: \"gpt-4o\",\n    modelClientOptions: {\n        apiKey: process.env.OPENAI_KEY,\n    },\n    verbose: 1,\n    debugDom: true,\n    domSettleTimeoutMs: 100,\n    executablePath: process.env.CHROME_PATH,\n  });\n  try {\n    console.log(\"🌟 Initializing Stagehand...\");\n    await stagehand.init();\n    console.log(\"🌐 Navigating to 2048...\");\n    await stagehand.page.goto(\"https://micro2048.pages.dev/events\");\n    try {\n      await stagehand.page.locator('#username').fill('walalo');\n      await randomTimer(100);\n      await stagehand.page.locator('#password').fill('c0rder00');\n      await randomTimer(100);\n      await stagehand.page.keyboard.press('Enter');\n    } catch (error) {\n      console.error(\"❌ Error logging in:\", error);\n    }\n    console.log(\"🖱️ clicking on the first event...\");\n    await stagehand.page.act({\n      action: \"click the first event\",\n    });\n    console.log(\"Clicking on New Game Button at the top right corner...\");\n    await stagehand.page.act({\n      action: \"click the new game button\",\n    });\n    await randomTimer(1000);\n    console.log(\"⌛ Waiting for game to initialize...\");\n    await stagehand.page.waitForSelector(\".game-board\", { timeout: 10000 });\n    // Main game loop\n    let moveKey = \"ArrowDown\";\n    while (true) {\n      console.log(\"🔄 Game loop iteration...\");\n      // Add a small delay for UI updates\n      await randomTimer(100, 300);\n      // Get current game state\n      const gameState = await stagehand.page.extract({\n        instruction: \\`Extract the current game state:\n          1. Score from the score counter\n          2. All tile values in the 4x4 grid (empty spaces as 0)\n          3. Highest tile value present\\`,\n        schema: z.object({\n          score: z.number(),\n          highestTile: z.number(),\n          grid: z.array(z.array(z.number())),\n        }),\n      });\n      const transposedGrid = gameState.grid[0].map((_, colIndex) =>\n        gameState.grid.map((row) => row[colIndex]),\n      );\n      const grid = transposedGrid.map((row, rowIndex) => ({\n        [\\`row\\${rowIndex + 1}\\`]: row,\n      }));\n      console.log(\"Game State:\", {\n        score: gameState.score,\n        highestTile: gameState.highestTile,\n        grid: grid,\n      });\n      // Analyze board and decide next move\n      const analysis = await stagehand.page.extract({\n        instruction: \\`Based on the current game state:\n          - Score: \\${gameState.score}\n          - Highest tile: \\${gameState.highestTile}\n          - Grid: This is a 4x4 matrix ordered by row (top to bottom) and column (left to right). The rows are stacked vertically, and tiles can move vertically between rows or horizontally between columns:\\n\\${grid\n            .map((row) => {\n              const rowName = Object.keys(row)[0];\n              return \\`             \\${rowName}: \\${row[rowName].join(\", \")}\\`;\n            })\n            .join(\"\\\\n\")}\n          What is the best move (up/down/left/right)? Consider:\n          1. Keeping high value tiles in corners (bottom left, bottom right, top left, top right)\n          2. Maintaining a clear path to merge tiles\n          3. Avoiding moves that could block merges\n          4. Only adjacent tiles of the same value can merge\n          5. Making a move will move all tiles in that direction until they hit a tile of a different value or the edge of the board\n          6. Tiles cannot move past the edge of the board\n          7. Each move must move at least one tile\\`,\n        schema: z.object({\n          move: z.enum([\"up\", \"down\", \"left\", \"right\"]),\n          confidence: z.number(),\n          reasoning: z.string(),\n        }),\n      });\n      console.log(\"Move Analysis:\", analysis);\n      let moveKey = {\n        up: \"ArrowUp\",\n        down: \"ArrowDown\",\n        left: \"ArrowLeft\",\n        right: \"ArrowRight\",\n      }[analysis.move];\n      let random = false;\n      if (!moveKey) {\n        moveKey = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"][Math.floor(Math.random() * 4)];\n        random = true;\n      }\n      await stagehand.page.keyboard.press(moveKey);\n      await randomTimer(100, 300);\n      console.log(\"🎯 Executed move:\", moveKey);\n      console.log(\"🎯🎯 Random:\", random);\n    }\n  } catch (error) {\n    console.error(\"❌ Error in game loop:\", error);\n    const isGameOver = await stagehand.page.evaluate(() => {\n      return document.querySelector(\".game-over\") !== null;\n    });\n    if (isGameOver) {\n      console.log(\"🏁 Game Over!\");\n      return;\n    }\n    throw error; // Re-throw non-game-over errors\n  }\n}\n`;\n}\n\nconst get_ts_package = () => {\n  return JSON.stringify({\n    \"name\": \"standalone\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.ts\",\n    \"scripts\": {},\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"description\": \"\",\n    \"dependencies\": {\n      \"@browserbasehq/stagehand\": \"https://github.com/dcspark/stagehand\",\n      \"sharp\": \"^0.33.5\",\n      \"json-schema-to-zod\": \"^2.6.0\",\n      \"zod\": \"^3.24.1\"\n    }\n  }, null, 2);\n}\n\nexport async function run(config: any, parameters: any) {\n    return await shinkaiTypescriptUnsafeProcessor({\n        code: get_ts_code(),\n        package: get_ts_package(),\n        parameters,\n        config,\n    });\n}","tools":["local:::__official_shinkai:::shinkai_typescript_unsafe_processor"],"config":[],"description":"Automatically play Crypto 2048","keywords":[],"input_args":{"type":"object","properties":{},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.009706622,-0.049975052,0.185031,-1.0483211,-1.0780885,0.21492255,0.121860586,0.03524965,-0.23312047,-0.009012954,-0.027621549,0.5861988,-0.06285708,0.114706695,0.67110753,-0.39012203,0.042424858,-0.41582298,-1.4746244,0.32862484,-0.095617265,0.28966314,-0.27396265,0.57471824,0.24023148,0.53820115,0.26411483,-0.07334431,-0.9669184,-1.9006122,0.15938169,0.16948213,-0.7316236,0.11889164,0.0072248727,-0.04090804,-0.3669036,0.60181797,-0.515666,-0.72442955,0.024987055,0.52778286,-0.025657784,-0.5974402,0.18647029,-0.8516407,0.24278621,0.29778355,0.3236462,-0.0058683306,-0.5315332,-0.044236116,0.19925891,-0.35730624,-0.38779122,-0.19027269,-0.6199486,-0.23708038,-0.039018992,0.62763536,0.053997017,-0.09136951,-3.941408,-0.09979513,1.2276819,-0.0025049597,1.0070903,-0.5667672,0.045004256,0.21430561,0.7286767,0.24995641,-0.6325086,-0.4354811,0.41222957,0.07399046,-0.13424787,0.27305692,0.36824042,0.30650076,0.7061449,0.95314026,-0.311457,-0.003763291,-0.06361437,0.31574243,-0.62389165,-0.7716298,-0.004303977,0.39364436,-0.405898,0.23024604,0.31639734,-0.007644277,-0.92802596,0.27861798,0.016912412,0.091150865,0.42579868,2.7567756,0.5402373,0.18548337,0.23629412,-0.7391849,1.2249769,-0.10410705,-0.4422757,-0.24656643,0.071508065,-0.22403781,-0.41470718,-0.32530135,0.510815,-0.50544566,0.8767809,0.66020685,-0.31924313,-0.1472755,-0.53324735,0.3869704,0.10482523,0.19242924,-0.6779328,-0.11263206,-0.26345983,0.3971352,-0.57227445,0.3526615,-0.16307981,-0.039036628,0.80441046,-0.71943223,-0.7120773,0.036659323,0.09239122,0.60611206,0.0044887736,-0.6451159,-0.212114,0.006548524,0.6970285,-1.0255586,0.7067552,-0.6245611,0.5509954,-0.71679235,0.24767217,-0.21316001,-0.106959835,0.06492102,-0.07101959,0.48588315,0.15450965,0.18142185,1.4496715,-0.49276054,0.52364844,-0.3074446,-0.45045164,0.09567617,-0.5844162,-0.7647417,0.19786523,1.1532793,0.68790513,-0.35919625,-0.66205484,0.50428116,0.16511014,-0.17617507,0.560717,-0.11336248,0.21385807,-0.2023226,0.06668601,-0.1839347,-0.039631527,0.51510084,0.44724584,-0.49448365,-0.288147,0.3710939,-0.29543412,-1.0146668,-0.32886118,0.30923915,0.26796055,0.02160713,0.3552119,0.124691084,-0.013170905,1.1710063,-1.0502576,-0.22393443,0.21089402,0.3951733,-0.047345906,-0.07905775,-0.1747751,-1.0185845,-0.5270816,-0.28932196,-0.07143496,0.20071247,-0.8842023,-0.3834886,1.110974,0.3488327,0.2005344,-0.1894359,0.48882538,0.58968294,0.8420459,0.327363,0.38289836,0.09305763,0.24432512,0.38958466,0.89981043,0.22828183,0.6889959,0.55141145,-0.63662106,-0.48450047,-0.97279984,-0.39195567,0.20624611,-0.17415252,-0.13774972,-0.109124586,0.37076685,0.05614633,0.5681933,1.0114987,0.92481726,0.3230991,0.54021895,0.44672763,0.39047328,-0.7116873,-0.09037616,-0.17848161,-0.018506773,-1.0011041,0.118402444,-0.70070994,-0.029445656,-0.09924466,-0.6488284,1.517364,0.6800068,-0.17279713,1.0064927,0.58108735,0.20254484,0.75059843,-1.4927684,-0.4092746,0.020295508,-0.068992525,-0.5248804,0.029992178,0.30257937,0.30061212,-0.44022435,-0.1494345,-0.7950185,0.037774436,0.0152460635,-0.042164855,0.12770712,0.61469966,-0.45891547,1.0205554,0.17039835,-0.2379732,0.5322056,-0.11196584,-0.9315095,0.52948207,-0.7175127,-0.004219887,0.74332535,0.29554605,0.53362185,-0.6683955,-0.23867337,0.2072623,-0.14090154,0.6770796,-0.5516142,-0.24686635,-0.25745896,-0.16317499,1.4948967,0.0725286,1.1243721,0.4780702,-0.13961734,0.9694799,-0.9393671,0.5460068,-0.013114042,-0.22472376,-1.678518,-0.15616179,0.3731801,-0.38426027,-0.7772533,0.2949399,-0.19793671,0.33452988,-0.081683174,0.07407423,0.1960985,-0.17124031,-0.31730542,0.35384387,-0.4824036,-2.167201,-0.38020694,-0.12858084,-0.26728246,-0.5588653,-0.3813449,0.47797072,0.21720728,-0.0533175,-0.25876182,1.9582024,0.5758092,-0.66610175,-0.518425,-0.09922421,1.209539,-0.1105577,0.414826,0.04647084,-0.311924,0.4692486,-0.384391,1.6955554,0.31030977,0.7454255,-0.40203357,0.14511107,-0.14787443,-1.0245699,-0.20164314,0.41665125,-0.55144584,0.057984143,0.112556964,-0.5992218,0.67158115,0.48235217,-0.07340595,-0.4942657,-0.058918525,0.96246606,0.21135718,-0.3816358,-0.11987561,0.21845967,0.047390833,0.5950158,0.012359537,-0.8397921,0.16921116,-0.24400258,-0.185565,-0.54067105,0.17871675,-0.13078563,1.0946791,0.542945,0.020054426,0.4034656,0.51604176,0.5905152,0.042796798,0.05600528,-0.7801264,-0.24353446],"result":{"type":"object","properties":{},"required":[]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}