{"type":"Deno","content":[{"name":"mermaid","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import axios from 'npm:axios@1.7.7';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { encodeBase64 } from \"https://deno.land/std@0.224.0/encoding/base64.ts\";\nimport { deflate } from \"https://deno.land/x/compress@v0.4.5/zlib/deflate.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n/**\n * Configuration for the tool.\n */\ntype CONFIG = {\n  /**\n   * How many times to attempt LLM fixes if Kroki fails to parse the Mermaid diagram.\n   */\n  maxRetries?: number;\n};\n\n/**\n * Inputs for the tool: a single textual description from the user.\n */\ntype INPUTS = {\n  description: string;\n};\n\n/**\n * Final output from the tool:\n * - The base64-encoded PNG\n * - The final (valid) Mermaid code that was successfully parsed.\n */\ntype OUTPUT = {\n  pngBase64: string;\n  finalMermaid: string;\n};\n\n/**\n * This function:\n * 1. Takes a textual description and asks an LLM to produce Mermaid code.\n * 2. Sends the Mermaid code to Kroki (https://kroki.io/) to validate and render a PNG.\n * 3. If Kroki fails to parse, it sends the error back to the LLM to refine the Mermaid code.\n * 4. Repeats up to `maxRetries` times. If still invalid, throws an error.\n */\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { description } = inputs;\n  const maxRetries = config.maxRetries ?? 5;\n\n  /**\n   * Helper: build the JSON payload Kroki expects to attempt rendering a Mermaid PNG.\n   */\n  function buildKrokiPayload(mermaidSource: string) {\n    return {\n      diagram_source: mermaidSource,\n      diagram_type: 'mermaid',\n      output_format: 'png',\n    };\n  }\n\n  /**\n   * Attempt to render with Kroki. On success: return { ok: true, data: Buffer }.\n   * On failure: return { ok: false, error: string }.\n   */\n  async function tryKrokiRender(mermaidCode: string) {\n    console.log('Attempting to render with Kroki:', { mermaidCode });\n    \n    // Basic validation before sending to Kroki\n    if (!mermaidCode.trim().startsWith('graph')) {\n      console.log('Basic validation failed: Code does not start with \"graph\"');\n      return { ok: false, error: 'Invalid Mermaid syntax: Must start with \"graph\"' };\n    }\n\n    try {\n      // First deflate the diagram\n      const encoder = new TextEncoder();\n      const compressed = deflate(encoder.encode(mermaidCode.trim()), { level: 9 });\n      // Then base64 encode it\n      const encodedDiagram = encodeBase64(compressed).replace(/\\+/g, '-').replace(/\\//g, '_');\n      console.log('Encoded diagram:', { encodedDiagram });\n      \n      console.log('Sending request to Kroki...');\n      const resp = await axios.get(`https://kroki.io/mermaid/png/${encodedDiagram}`, {\n        responseType: 'arraybuffer',\n        timeout: 30000,\n        headers: {\n          'Accept': 'image/png',\n        },\n        validateStatus: (status) => status === 200,\n      });\n      \n      console.log('Received successful response from Kroki');\n      return { ok: true, data: new Uint8Array(resp.data) };\n    } catch (err: any) {\n      console.log('Error from Kroki:', {\n        status: err.response?.status,\n        headers: err.response?.headers,\n        isAxiosError: err.isAxiosError,\n        message: err.message,\n        data: err.response?.data?.toString()\n      });\n\n      // Handle various error cases\n      if (err.response) {\n        const errorData = err.response.data;\n        let errorMessage = '';\n        \n        try {\n          // Try to parse error as JSON if it's not binary data\n          if (err.response.headers['content-type']?.includes('application/json')) {\n            const jsonError = JSON.parse(errorData.toString());\n            errorMessage = jsonError.error || jsonError.message || String(errorData);\n          } else {\n            errorMessage = errorData.toString();\n          }\n        } catch (parseErr) {\n          console.log('Error parsing error response:', parseErr);\n          errorMessage = errorData.toString();\n        }\n\n        console.log('Formatted error message:', errorMessage);\n        return {\n          ok: false,\n          error: `Kroki error (HTTP ${err.response.status}): ${errorMessage}`,\n        };\n      }\n\n      // Network or other errors\n      return { ok: false, error: `Request failed: ${err.message}` };\n    }\n  }\n\n  /**\n   * Validate Mermaid syntax before sending to Kroki\n   */\n  function validateMermaidSyntax(code: string): { isValid: boolean; error?: string } {\n    console.log('Validating Mermaid syntax for:', { code });\n    \n    const trimmed = code.trim();\n    \n    // Basic syntax checks\n    if (!trimmed.toLowerCase().startsWith('graph')) {\n      console.log('Validation failed: Does not start with \"graph\"');\n      return { isValid: false, error: 'Diagram must start with \"graph\"' };\n    }\n\n    const lines = trimmed.split('\\n').map(line => line.trim()).filter(line => line);\n    console.log('Processing lines:', { lines });\n    \n    const firstLine = lines[0];\n    \n    // Check graph direction\n    if (!firstLine.toLowerCase().match(/^graph\\s+(td|lr)$/)) {\n      console.log('Validation failed: Invalid graph direction:', { firstLine });\n      return { isValid: false, error: 'First line must be \"graph TD\" or \"graph LR\"' };\n    }\n\n    // Check for basic node definitions\n    const nodeLines = lines.slice(1);\n    for (const line of nodeLines) {\n      console.log('Checking node line:', { line });\n      // More lenient regex that allows various amounts of whitespace\n      if (!line.match(/^[A-Za-z0-9]+(?:\\[[^\\]]+\\])?\\s*(?:-->|---|==>)\\s*[A-Za-z0-9]+(?:\\[[^\\]]+\\])?$/)) {\n        console.log('Validation failed: Invalid node definition:', { line });\n        return { isValid: false, error: `Invalid node definition: ${line}` };\n      }\n    }\n\n    console.log('Validation successful');\n    return { isValid: true };\n  }\n\n  /**\n   * LLM prompt to request a new or revised Mermaid code from the LLM.\n   */\n  async function requestMermaid(\n    userDescription: string,\n    priorError?: string,\n    priorCode?: string\n  ): Promise<string> {\n    let prompt = '';\n    if (!priorError) {\n      // initial request\n      prompt = `Create a valid Mermaid.js diagram based on this description: \"${userDescription}\"\n\nRules:\n1. Start with either 'graph TD' (top-down) or 'graph LR' (left-right)\n2. Use simple node names (A, B, C, etc.) with descriptive labels in brackets\n3. Use standard arrows (-->)\n4. Avoid special characters in labels\n5. Return ONLY the Mermaid code, no explanations\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    } else {\n      // revise with specific guidance based on prior error\n      prompt = `The following Mermaid code needs correction:\n\\`\\`\\`\n${priorCode}\n\\`\\`\\`\n\nError received: ${priorError}\n\nPlease provide a corrected version following these rules:\n1. Keep the diagram simple and minimal\n2. Use only basic Mermaid syntax (graph TD/LR, basic nodes, arrows)\n3. Ensure all nodes are properly defined before being referenced\n4. Avoid special characters or complex styling\n5. Return ONLY the corrected Mermaid code\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    }\n    const resp = await shinkaiLlmPromptProcessor({ format: 'text', prompt });\n    \n    // Clean up the response to extract just the Mermaid code\n    let code = resp.message.trim();\n    // Remove any markdown code block markers\n    code = code.replace(/^```mermaid\\n/m, '').replace(/^```\\n/m, '').replace(/```$/m, '');\n    return code.trim();\n  }\n\n  // Main logic:\n  console.log('Starting Mermaid diagram generation for description:', { description });\n  let currentMermaid = await requestMermaid(description, undefined, undefined);\n  console.log('Initial Mermaid code generated:', { currentMermaid });\n\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    console.log(`Attempt ${attempt + 1}/${maxRetries}`);\n    \n    // Validate syntax before sending to Kroki\n    const validation = validateMermaidSyntax(currentMermaid);\n    if (!validation.isValid) {\n      console.log('Validation failed:', validation.error);\n      // If invalid syntax, try to get a new diagram\n      currentMermaid = await requestMermaid(\n        description,\n        `Invalid Mermaid syntax: ${validation.error}`,\n        currentMermaid\n      );\n      console.log('Generated new Mermaid code after validation failure:', { currentMermaid });\n      continue;\n    }\n\n    console.log('Validation passed, attempting to render');\n    const renderResult = await tryKrokiRender(currentMermaid);\n    if (renderResult.ok && renderResult.data) {\n      console.log('Successfully rendered diagram');\n      // Convert Uint8Array to base64 string\n      const pngBase64 = encodeBase64(renderResult.data);\n\n      await Deno.writeFile(await getHomePath() + '/mermaid.png', renderResult.data);\n\n      return {\n        pngBase64,\n        finalMermaid: currentMermaid,\n      };\n    } else {\n      console.log('Render failed:', renderResult.error);\n      // Some error from Kroki. Let's refine\n      const errorMessage = renderResult.error || 'Unknown error';\n      currentMermaid = await requestMermaid(description, errorMessage, currentMermaid);\n      console.log('Generated new Mermaid code after render failure:', { currentMermaid });\n    }\n  }\n\n  console.log('Exhausted all attempts, throwing error');\n  // If we've exhausted attempts, throw an error\n  throw new Error(\n    `Failed to produce a valid Mermaid diagram after ${maxRetries} attempts. Last code:\\n${currentMermaid}`\n  );\n}\n","tools":[],"config":[],"description":"Generate diagrams and flowcharts using Mermaid syntax","keywords":["mermaid","diagram","flowchart","visualization","markdown"],"input_args":{"type":"object","properties":{"format":{"type":"string","description":"Output format for the diagram"},"code":{"type":"string","description":"Mermaid diagram code"}},"required":["code"]},"output_arg":{"json":""},"activated":false,"embedding":[0.1473912,0.36406702,0.24798857,0.05517683,-0.23758852,0.31766725,-0.9442741,-0.09152071,0.43158403,0.09048249,-0.10609762,0.043438293,0.1974183,0.2783122,0.19550017,-0.19595842,0.05905332,-0.18937245,-2.212373,0.020709183,-0.1715963,0.9479416,0.41530016,0.48319244,-0.5284023,0.29979026,0.041523878,-0.14618349,-1.7634075,-2.2565815,-0.112814255,0.43914485,-0.64862233,-0.21588148,0.38341537,-0.40412337,-0.40247685,0.22471578,0.018786833,0.08157326,0.41439688,-0.29295558,-0.26741764,0.029494613,0.5486692,-0.20717761,0.1308718,-0.04691784,0.36253986,0.13766594,-0.9454837,-0.3266868,0.3907776,-0.1516826,-0.6514942,0.7840602,-0.08903274,-0.9424447,0.7647805,0.67088383,-0.5258522,0.6524534,-3.2103648,0.34606338,0.87732273,0.029979214,-0.33562797,0.5006071,-0.3831311,0.57543683,0.12988134,0.007905354,-0.7006522,0.7179582,-0.13243961,-0.2675042,0.24980497,-0.04588282,0.6120932,0.20340307,-0.1945184,0.29798266,-0.25447577,0.26754233,-0.39022923,1.0875311,-0.30278155,-0.9085751,0.1633961,0.023871869,-1.2239043,-0.057842046,0.2291022,0.35866636,0.26932886,0.38790894,-0.16463119,-0.49751395,0.17330551,2.966278,0.40172148,-0.17436385,0.49209163,-0.94033986,0.6818061,-0.01251309,0.15235227,-0.21079573,0.23657885,-0.28681812,0.27866676,-0.49020824,0.23189953,-0.16221803,0.63141066,0.3603446,-0.9812063,0.079525776,-0.1426379,0.2681985,-0.1940695,0.10439265,-0.21297863,0.10064064,-0.0420674,0.01678428,-0.6100499,0.29424965,-0.32914516,-0.6442842,0.44675136,-0.09038498,0.025420789,0.25750092,-0.18986809,-0.09291384,0.5112717,-0.8414801,0.09572275,0.040667973,-0.04495269,-1.7570028,0.87505764,-0.010821082,0.6146562,0.80155486,-0.74056214,-0.13051683,-0.41860208,0.38466272,-0.026645806,0.17715836,0.11098516,-0.15316992,0.7338679,0.5390421,-0.026015528,0.2523774,-0.005859092,0.10631031,-0.11694361,-0.53699464,0.4423865,0.52385944,-0.004380673,-0.74416983,0.61669886,0.47654808,0.30290782,-0.47438404,0.0480341,0.115666516,-0.1923919,0.27877498,0.006822598,-0.25898677,-0.10084274,-0.40727592,0.66133875,-0.61889863,0.9241396,0.6101793,0.19157897,-0.67782557,0.023767881,0.39409655,0.049611464,0.2743058,0.09419783,1.0975288,-0.25723916,1.7599672,-0.47419602,0.35989678,0.52736247,0.16662972,0.40834928,0.34863663,-0.09850061,0.69282734,-0.5584163,0.2350834,0.20987627,0.22339775,-0.8214581,-0.24234681,0.6509826,0.10917969,-0.52044386,-0.071916446,-0.28136313,0.23671661,1.1388695,0.16611798,0.47715202,0.3649478,0.5349823,-0.063040644,1.0256945,0.15170643,0.7414669,0.35544312,-0.4710166,-0.4224858,-0.5501358,0.105756685,-0.30163708,-0.0876851,-0.5584384,-0.54095435,0.7640435,1.2730305,0.7316835,0.356886,0.37499896,0.061434243,-0.14113194,0.0895073,-0.28113735,-0.7180706,0.6567962,0.054032966,-0.045852922,-0.4529665,0.061231602,-0.6611216,-0.43338796,-0.59777874,0.007466607,2.0789723,0.4325974,0.23413719,0.36820862,0.31731686,-0.3376354,-0.17246872,-1.4873859,-0.68798023,-0.8930444,0.3455004,-0.36450115,-0.6014951,0.51963544,-0.36778736,-0.615483,-0.2254496,-0.7348241,-0.22478046,-0.30588913,0.26548004,0.42877358,0.13148764,-0.286552,0.5907783,-0.28855103,0.01297601,0.3443238,0.023918886,-0.41945443,-0.52734953,0.51761234,0.08758695,-0.08634468,0.25092155,-0.8731309,-1.0187926,-0.29000425,-0.016473956,-0.32946596,0.38846704,-0.1490954,-0.46070662,-0.32940146,0.041321643,1.8415471,0.6712961,0.049420517,0.8738283,0.19419764,-0.06534444,-0.70870894,-0.10333706,0.1993129,0.32762948,-0.9336474,0.27108386,0.16452035,-0.88468605,-0.5424003,0.27914506,-0.82342255,-0.3287407,0.1375333,0.35165274,0.3680399,-0.27817208,-0.12716195,0.46119192,-0.16596831,-2.485107,-0.09492403,0.68950045,0.6493485,-0.4035331,0.009098196,1.0379596,0.12834346,0.13569193,-0.48097742,1.4876671,-0.077691734,0.10705424,-0.31643555,0.2365497,0.9095974,-0.11448567,0.53148603,0.12122449,0.053812094,-0.22692323,0.614267,1.2932987,-0.040044963,0.59552485,-0.26148376,-0.43797952,-0.71703714,-0.69660115,0.19741488,-0.11610314,-0.21665953,0.27214947,-0.32160679,0.31816706,0.33457533,0.89919096,-0.43822947,-0.08759401,-0.30317047,1.4043416,-0.3121923,-0.11629807,-0.28007346,-0.20771945,0.15413277,0.027530938,0.27183092,-1.1095555,-0.18684256,0.49353984,-0.2255183,-0.5553104,0.15169331,0.010851804,0.8218062,-0.09449203,0.21363671,0.18891317,0.42439884,0.3699801,-0.5394913,-0.2805903,-0.37897098,-0.3535766],"result":{"type":"object","properties":{"format":{"description":"Format of the generated image (svg or png)","type":"string"},"image":{"description":"Base64 encoded image data","type":"string"}},"required":["image","format"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}