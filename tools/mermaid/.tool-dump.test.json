{"type":"Deno","content":[{"name":"mermaid","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import axios from 'npm:axios@1.7.7';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { encodeBase64 } from \"https://deno.land/std@0.224.0/encoding/base64.ts\";\nimport { deflate } from \"https://deno.land/x/compress@v0.4.5/zlib/deflate.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n/**\n * Configuration for the tool.\n */\ntype CONFIG = {\n  /**\n   * How many times to attempt LLM fixes if Kroki fails to parse the Mermaid diagram.\n   */\n  maxRetries?: number;\n};\n\n/**\n * Inputs for the tool: a single textual description from the user.\n */\ntype INPUTS = {\n  description: string;\n};\n\n/**\n * Final output from the tool:\n * - The base64-encoded PNG\n * - The final (valid) Mermaid code that was successfully parsed.\n */\ntype OUTPUT = {\n  pngBase64: string;\n  finalMermaid: string;\n};\n\n/**\n * This function:\n * 1. Takes a textual description and asks an LLM to produce Mermaid code.\n * 2. Sends the Mermaid code to Kroki (https://kroki.io/) to validate and render a PNG.\n * 3. If Kroki fails to parse, it sends the error back to the LLM to refine the Mermaid code.\n * 4. Repeats up to `maxRetries` times. If still invalid, throws an error.\n */\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { description } = inputs;\n  const maxRetries = config.maxRetries ?? 5;\n\n  /**\n   * Helper: build the JSON payload Kroki expects to attempt rendering a Mermaid PNG.\n   */\n  function buildKrokiPayload(mermaidSource: string) {\n    return {\n      diagram_source: mermaidSource,\n      diagram_type: 'mermaid',\n      output_format: 'png',\n    };\n  }\n\n  /**\n   * Attempt to render with Kroki. On success: return { ok: true, data: Buffer }.\n   * On failure: return { ok: false, error: string }.\n   */\n  async function tryKrokiRender(mermaidCode: string) {\n    console.log('Attempting to render with Kroki:', { mermaidCode });\n    \n    // Basic validation before sending to Kroki\n    if (!mermaidCode.trim().startsWith('graph')) {\n      console.log('Basic validation failed: Code does not start with \"graph\"');\n      return { ok: false, error: 'Invalid Mermaid syntax: Must start with \"graph\"' };\n    }\n\n    try {\n      // First deflate the diagram\n      const encoder = new TextEncoder();\n      const compressed = deflate(encoder.encode(mermaidCode.trim()), { level: 9 });\n      // Then base64 encode it\n      const encodedDiagram = encodeBase64(compressed).replace(/\\+/g, '-').replace(/\\//g, '_');\n      console.log('Encoded diagram:', { encodedDiagram });\n      \n      console.log('Sending request to Kroki...');\n      const resp = await axios.get(`https://kroki.io/mermaid/png/${encodedDiagram}`, {\n        responseType: 'arraybuffer',\n        timeout: 30000,\n        headers: {\n          'Accept': 'image/png',\n        },\n        validateStatus: (status) => status === 200,\n      });\n      \n      console.log('Received successful response from Kroki');\n      return { ok: true, data: new Uint8Array(resp.data) };\n    } catch (err: any) {\n      console.log('Error from Kroki:', {\n        status: err.response?.status,\n        headers: err.response?.headers,\n        isAxiosError: err.isAxiosError,\n        message: err.message,\n        data: err.response?.data?.toString()\n      });\n\n      // Handle various error cases\n      if (err.response) {\n        const errorData = err.response.data;\n        let errorMessage = '';\n        \n        try {\n          // Try to parse error as JSON if it's not binary data\n          if (err.response.headers['content-type']?.includes('application/json')) {\n            const jsonError = JSON.parse(errorData.toString());\n            errorMessage = jsonError.error || jsonError.message || String(errorData);\n          } else {\n            errorMessage = errorData.toString();\n          }\n        } catch (parseErr) {\n          console.log('Error parsing error response:', parseErr);\n          errorMessage = errorData.toString();\n        }\n\n        console.log('Formatted error message:', errorMessage);\n        return {\n          ok: false,\n          error: `Kroki error (HTTP ${err.response.status}): ${errorMessage}`,\n        };\n      }\n\n      // Network or other errors\n      return { ok: false, error: `Request failed: ${err.message}` };\n    }\n  }\n\n  /**\n   * Validate Mermaid syntax before sending to Kroki\n   */\n  function validateMermaidSyntax(code: string): { isValid: boolean; error?: string } {\n    console.log('Validating Mermaid syntax for:', { code });\n    \n    const trimmed = code.trim();\n    \n    // Basic syntax checks\n    if (!trimmed.toLowerCase().startsWith('graph')) {\n      console.log('Validation failed: Does not start with \"graph\"');\n      return { isValid: false, error: 'Diagram must start with \"graph\"' };\n    }\n\n    const lines = trimmed.split('\\n').map(line => line.trim()).filter(line => line);\n    console.log('Processing lines:', { lines });\n    \n    const firstLine = lines[0];\n    \n    // Check graph direction\n    if (!firstLine.toLowerCase().match(/^graph\\s+(td|lr)$/)) {\n      console.log('Validation failed: Invalid graph direction:', { firstLine });\n      return { isValid: false, error: 'First line must be \"graph TD\" or \"graph LR\"' };\n    }\n\n    // Check for basic node definitions\n    const nodeLines = lines.slice(1);\n    for (const line of nodeLines) {\n      console.log('Checking node line:', { line });\n      // More lenient regex that allows various amounts of whitespace\n      if (!line.match(/^[A-Za-z0-9]+(?:\\[[^\\]]+\\])?\\s*(?:-->|---|==>)\\s*[A-Za-z0-9]+(?:\\[[^\\]]+\\])?$/)) {\n        console.log('Validation failed: Invalid node definition:', { line });\n        return { isValid: false, error: `Invalid node definition: ${line}` };\n      }\n    }\n\n    console.log('Validation successful');\n    return { isValid: true };\n  }\n\n  /**\n   * LLM prompt to request a new or revised Mermaid code from the LLM.\n   */\n  async function requestMermaid(\n    userDescription: string,\n    priorError?: string,\n    priorCode?: string\n  ): Promise<string> {\n    let prompt = '';\n    if (!priorError) {\n      // initial request\n      prompt = `Create a valid Mermaid.js diagram based on this description: \"${userDescription}\"\n\nRules:\n1. Start with either 'graph TD' (top-down) or 'graph LR' (left-right)\n2. Use simple node names (A, B, C, etc.) with descriptive labels in brackets\n3. Use standard arrows (-->)\n4. Avoid special characters in labels\n5. Return ONLY the Mermaid code, no explanations\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    } else {\n      // revise with specific guidance based on prior error\n      prompt = `The following Mermaid code needs correction:\n\\`\\`\\`\n${priorCode}\n\\`\\`\\`\n\nError received: ${priorError}\n\nPlease provide a corrected version following these rules:\n1. Keep the diagram simple and minimal\n2. Use only basic Mermaid syntax (graph TD/LR, basic nodes, arrows)\n3. Ensure all nodes are properly defined before being referenced\n4. Avoid special characters or complex styling\n5. Return ONLY the corrected Mermaid code\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    }\n    const resp = await shinkaiLlmPromptProcessor({ format: 'text', prompt });\n    \n    // Clean up the response to extract just the Mermaid code\n    let code = resp.message.trim();\n    // Remove any markdown code block markers\n    code = code.replace(/^```mermaid\\n/m, '').replace(/^```\\n/m, '').replace(/```$/m, '');\n    return code.trim();\n  }\n\n  // Main logic:\n  console.log('Starting Mermaid diagram generation for description:', { description });\n  let currentMermaid = await requestMermaid(description, undefined, undefined);\n  console.log('Initial Mermaid code generated:', { currentMermaid });\n\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    console.log(`Attempt ${attempt + 1}/${maxRetries}`);\n    \n    // Validate syntax before sending to Kroki\n    const validation = validateMermaidSyntax(currentMermaid);\n    if (!validation.isValid) {\n      console.log('Validation failed:', validation.error);\n      // If invalid syntax, try to get a new diagram\n      currentMermaid = await requestMermaid(\n        description,\n        `Invalid Mermaid syntax: ${validation.error}`,\n        currentMermaid\n      );\n      console.log('Generated new Mermaid code after validation failure:', { currentMermaid });\n      continue;\n    }\n\n    console.log('Validation passed, attempting to render');\n    const renderResult = await tryKrokiRender(currentMermaid);\n    if (renderResult.ok && renderResult.data) {\n      console.log('Successfully rendered diagram');\n      // Convert Uint8Array to base64 string\n      const pngBase64 = encodeBase64(renderResult.data);\n\n      await Deno.writeFile(await getHomePath() + '/mermaid.png', renderResult.data);\n\n      return {\n        pngBase64,\n        finalMermaid: currentMermaid,\n      };\n    } else {\n      console.log('Render failed:', renderResult.error);\n      // Some error from Kroki. Let's refine\n      const errorMessage = renderResult.error || 'Unknown error';\n      currentMermaid = await requestMermaid(description, errorMessage, currentMermaid);\n      console.log('Generated new Mermaid code after render failure:', { currentMermaid });\n    }\n  }\n\n  console.log('Exhausted all attempts, throwing error');\n  // If we've exhausted attempts, throw an error\n  throw new Error(\n    `Failed to produce a valid Mermaid diagram after ${maxRetries} attempts. Last code:\\n${currentMermaid}`\n  );\n}\n","tools":[],"config":[],"description":"Generate diagrams and flowcharts using Mermaid syntax","keywords":["mermaid","diagram","flowchart","visualization","markdown"],"input_args":{"type":"object","properties":{"format":{"type":"string","description":"Output format for the diagram"},"code":{"type":"string","description":"Mermaid diagram code"}},"required":["code"]},"output_arg":{"json":""},"activated":false,"embedding":[0.14738469,0.36392415,0.24822295,0.05520787,-0.23739128,0.31774893,-0.9440989,-0.09167812,0.43164662,0.09038664,-0.10573544,0.043206904,0.19744022,0.27836677,0.19554558,-0.19593151,0.059173632,-0.18962173,-2.2121162,0.02064519,-0.17162809,0.9476753,0.4151862,0.48340154,-0.52844787,0.30023363,0.041501287,-0.14625289,-1.7632319,-2.2564423,-0.112830006,0.43910828,-0.648724,-0.2160075,0.3834123,-0.40387642,-0.40244105,0.2247405,0.018893387,0.0814202,0.41458023,-0.2929655,-0.26728767,0.029608682,0.548614,-0.2072092,0.13073033,-0.046704873,0.3627049,0.13769993,-0.9455063,-0.32676372,0.39090472,-0.15189485,-0.65141886,0.78414375,-0.08914581,-0.9425311,0.76484793,0.6709664,-0.52574784,0.65244776,-3.210317,0.34618074,0.87762403,0.02993355,-0.33555505,0.50063187,-0.38277814,0.5753244,0.12992068,0.007862196,-0.70075184,0.71797377,-0.1324659,-0.2675769,0.25003132,-0.04597435,0.6119862,0.20346016,-0.19450174,0.297958,-0.25455144,0.2674584,-0.39006293,1.0874343,-0.30269107,-0.9085317,0.16348678,0.023829453,-1.2238821,-0.057918083,0.22900133,0.358605,0.2693437,0.38780755,-0.16458389,-0.49742174,0.17297265,2.9663942,0.401623,-0.17445922,0.49217042,-0.93995166,0.68180317,-0.012389049,0.15225849,-0.21097109,0.23657377,-0.28666586,0.27876917,-0.49040332,0.23192243,-0.1622,0.6314501,0.36035374,-0.9812573,0.07967241,-0.14252086,0.26815847,-0.19420321,0.10447803,-0.2129008,0.10061725,-0.0421568,0.016510129,-0.61015254,0.29413557,-0.3292966,-0.64429104,0.4466672,-0.09045188,0.025476646,0.2576289,-0.18993254,-0.09299993,0.5113038,-0.84148526,0.09566985,0.04059898,-0.045147657,-1.7571015,0.87490296,-0.010900658,0.61485296,0.801574,-0.7404462,-0.13032877,-0.4185607,0.38480246,-0.026578497,0.1770979,0.11087612,-0.15320832,0.7337727,0.53919506,-0.026162656,0.25248468,-0.005927898,0.106421575,-0.116934314,-0.5369244,0.44239184,0.5241025,-0.004316695,-0.74403024,0.616795,0.4766598,0.3028315,-0.47454873,0.04829681,0.11570076,-0.19256352,0.27855924,0.0068885814,-0.25898808,-0.10076185,-0.4073112,0.66134125,-0.6190468,0.92382705,0.61025465,0.19167289,-0.67772776,0.023596331,0.39397892,0.049602628,0.27417406,0.09407753,1.0975788,-0.25731874,1.7599332,-0.47431982,0.3601101,0.5273298,0.16662793,0.40848267,0.34862572,-0.09859677,0.6928237,-0.55821323,0.2347252,0.20979933,0.22344251,-0.82157224,-0.24226722,0.6508394,0.10935262,-0.52047646,-0.071966395,-0.2815405,0.23661156,1.1388447,0.1661622,0.47712657,0.36475998,0.5349939,-0.06304249,1.0257337,0.15171699,0.74140745,0.35545352,-0.471178,-0.42251182,-0.5502041,0.10571099,-0.3017885,-0.087540366,-0.5584416,-0.54095876,0.764325,1.2729799,0.73159856,0.35682786,0.37500152,0.061301284,-0.14117998,0.0895305,-0.28110483,-0.71798503,0.6568256,0.05416868,-0.04591822,-0.45313174,0.06125477,-0.6611074,-0.43337345,-0.5980325,0.0074232165,2.0788732,0.432718,0.23416011,0.36817336,0.3175223,-0.3374337,-0.17226088,-1.4873272,-0.68778807,-0.89294046,0.34539616,-0.36451423,-0.6018368,0.5195768,-0.36799374,-0.6156449,-0.22529139,-0.73482174,-0.22473076,-0.30592132,0.26548377,0.42853695,0.13149215,-0.2865336,0.59076065,-0.28845152,0.01281858,0.34439087,0.02396078,-0.4194421,-0.5272261,0.5177486,0.0874387,-0.086132176,0.25074366,-0.87314636,-1.0187159,-0.29001293,-0.016531244,-0.32963556,0.3887211,-0.14915407,-0.46082732,-0.3294672,0.04136295,1.8413175,0.67122763,0.049556628,0.87368286,0.19427615,-0.06536296,-0.7088849,-0.10328875,0.19914429,0.3275553,-0.9337747,0.2711936,0.16460785,-0.8847551,-0.5426043,0.27920637,-0.82350314,-0.32862887,0.13745584,0.35200322,0.3679968,-0.2784005,-0.12710264,0.46126255,-0.16600254,-2.4851918,-0.09495598,0.6892513,0.6493984,-0.40382245,0.009022808,1.0378712,0.1284067,0.13564204,-0.48082983,1.4876708,-0.07763371,0.10710838,-0.31614488,0.23660216,0.90959406,-0.11449789,0.531598,0.12113578,0.05382482,-0.2269712,0.6142012,1.2931793,-0.039820537,0.595694,-0.26156634,-0.43798172,-0.7170497,-0.6967685,0.19732013,-0.11603561,-0.21650492,0.2722945,-0.3213735,0.3183815,0.33484602,0.89910185,-0.43834457,-0.087528974,-0.30335027,1.4045603,-0.31220436,-0.11638259,-0.2800369,-0.20747507,0.15410998,0.02764684,0.27164492,-1.1095719,-0.18682292,0.4936033,-0.22562449,-0.5552781,0.15168431,0.010978448,0.82191324,-0.09464346,0.2138451,0.18906876,0.4242521,0.37007207,-0.53956836,-0.2807567,-0.37884644,-0.35397005],"result":{"type":"object","properties":{"format":{"description":"Format of the generated image (svg or png)","type":"string"},"image":{"description":"Base64 encoded image data","type":"string"}},"required":["image","format"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}