{"type":"Deno","content":[{"name":"Shinkai Question Learner","tool_router_key":"local:::__official_shinkai:::shinkai_question_learner","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { downloadPages } from './shinkai-local-tools.ts';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { shinkaiSqliteQueryExecutor } from './shinkai-local-tools.ts';\n\ntype CONFIG = {};\ntype INPUTS = { action: 'learn' | 'ask' | 'respond', url?: string, userResponse?: string, questionId?: number };\ntype OUTPUT = { message: string };\n\nexport async function run(_config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n    // Create the questions table if it doesn't exist\n    await shinkaiSqliteQueryExecutor({\n        query: `CREATE TABLE IF NOT EXISTS Questions (\n            ID INTEGER PRIMARY KEY AUTOINCREMENT,\n            Question TEXT NOT NULL,\n            Answer TEXT NOT NULL,\n            CorrectCount INTEGER DEFAULT 0,\n            IncorrectCount INTEGER DEFAULT 0\n        );`\n    });\n\n    if (inputs.action === 'learn' && inputs.url) {\n        const { url } = inputs;\n        const downloadResult = await downloadPages({ url });\n        const markdownContent = downloadResult.markdown; // Assuming this is the returned markdown content\n\n        // Generate questions and answers from markdown content\n        const llmResponse = await shinkaiLlmPromptProcessor({\n            prompt: `Generate questions and answers from the following content:\\n\\n${markdownContent}\\n\\nFormat your output as a JSON array of objects with \"question\" and \"answer\" keys without any formatting.`,\n            format: 'json'\n        });\n        \n        let i = 0;\n        for (const pair of JSON.parse(llmResponse.message)) {\n            const question = pair.question.trim();\n            const answer = pair.answer.trim();\n            console.log(i, question, answer);\n            i = i + 1;\n            if (question.length > 0 && answer.length > 0) {\n                await shinkaiSqliteQueryExecutor({\n                    query: `INSERT INTO Questions (Question, Answer) VALUES (?, ?)`,\n                    params: [pair.question.trim(), pair.answer.trim()]\n                });\n                await shinkaiSqliteQueryExecutor({\n                    query: `DELETE FROM Questions WHERE Question = '';`\n                });\n            }\n        }\n        \n        return { message: \"Learning completed and questions stored.\" };\n        \n    } else if (inputs.action === 'ask') {\n        const result = await shinkaiSqliteQueryExecutor({\n            query: `SELECT * FROM Questions ORDER BY CorrectCount ASC LIMIT 10`\n        });\n        const questions = result.result;\n        if (questions.length === 0) {\n            return { message: \"No questions available.\" };\n        }\n        const randomQuestion = questions[Math.floor(Math.random() * questions.length)];\n        return { message: `Question #${randomQuestion.ID}: ${randomQuestion.Question}?` };\n        \n    } else if (inputs.action === 'respond' && inputs.userResponse && inputs.questionId) {\n        const questionId = Number(inputs.questionId);\n        const result = await shinkaiSqliteQueryExecutor({\n            query: `SELECT * FROM Questions WHERE ID = ${questionId}`,\n            params: []\n        });\n\n        const question = result.result[0];\n        \n        if (!question) {\n            return { message: \"Question not found.\" };\n        }\n      \n        const llmResponse = await shinkaiLlmPromptProcessor({\n            prompt: `Check if the response ${inputs.userResponse} is an adecuate response to the question ${question.Answer}. Return CORRECT if it's correct, or INCORRECT if it's incorrect inside a JSON object with key result without any formatting, just RAW JSON.`,\n            format: 'json'\n        });\n        \n        console.log(inputs.questionId, question, llmResponse);\n        \n        const llmAnswer = JSON.parse(llmResponse.message);\n        \n        if (llmAnswer.result === \"CORRECT\") {\n            await shinkaiSqliteQueryExecutor({\n                query: `UPDATE Questions SET CorrectCount = CorrectCount + 1 WHERE ID = ${questionId}`,\n                params: []\n            });\n            return { message: \"CORRECT\" };\n        } else {\n            await shinkaiSqliteQueryExecutor({\n                query: `UPDATE Questions SET IncorrectCount = IncorrectCount + 1 WHERE ID = ${questionId}`,\n                params: []\n            });\n            return { message: \"INCORRECT\" };\n        }\n    }\n\n    return { message: \"Invalid action.\" };\n}\n","tools":["local:::__official_shinkai:::shinkai_llm_prompt_processor","local:::__official_shinkai:::shinkai_sqlite_query_executor","local:::__official_shinkai:::download_pages"],"config":[],"description":"Learns from web pages by generating questions and answers, and interacts with users based on these questions. If the action was 'ask' it returns a question, always include the question number when referencing it","keywords":[],"input_args":{"type":"object","properties":{"questionId":{"type":"number","description":"The ID of the question being asked"},"userResponse":{"type":"string","description":"The user's response to the current question"},"action":{"type":"string","description":"The action to perform: 'learn', 'ask', or 'respond'"},"url":{"type":"string","description":"The URL to download for learning"}},"required":["action"]},"output_arg":{"json":""},"activated":false,"embedding":[0.21714523,0.35829905,-0.6256133,-0.11163238,-0.6744032,-0.15612349,-1.0834539,0.7586714,-0.2855934,0.1777555,-0.38347647,0.20307548,-0.11987957,0.27741158,0.85006255,-0.3756226,0.7321447,-0.37288743,-1.8234141,0.6102491,0.116598204,0.7845936,0.52012634,0.15671176,-0.73579264,-0.18394619,0.3315815,-0.19584359,-0.7146452,-1.9284679,0.7563147,0.62553656,-0.67219305,-0.24174313,-0.225681,-0.7379211,0.8093397,0.06732689,-0.5073407,0.15083243,0.064334966,0.76565063,-0.69841546,-0.011218667,0.31252128,0.0948421,-0.38406497,-0.5980364,0.5904697,0.69984895,-0.7770171,-0.88483894,0.5291334,0.19298963,0.033732682,-0.19082312,-0.5757621,-0.11642547,-0.027540706,-0.43922493,0.5210643,0.6763347,-3.565311,0.4496886,-0.16883685,0.10969037,-0.05942071,-0.887618,-0.5262512,0.21249965,0.3798255,0.053618535,0.12758058,0.635148,0.4745564,-0.45350003,0.121964574,-0.06293583,0.6063602,-0.5444124,0.47502893,0.8215738,-0.013195863,0.6743203,-0.12344512,0.5572645,0.075613104,-0.16341919,0.54326534,0.5864506,-0.16037631,-0.10330933,-0.109100826,-0.4638512,-0.0555565,-0.29088444,-0.31467262,-0.14707285,-0.0764563,3.416183,-0.010524169,-0.3380574,0.5159261,-0.9673341,0.28255013,-0.27580863,-0.12577508,-0.70771855,0.022286342,-0.2724914,0.19253694,-0.15055573,-0.29187927,0.25040555,0.6999748,0.29713926,-0.29804242,-0.18018435,0.1601362,0.5922581,-0.24315926,0.28365502,-0.45780876,-0.089581884,-0.060495496,-0.09694281,0.17050292,0.5702116,0.22179891,0.22519611,0.2875119,-0.7123435,-1.0509605,0.28357095,0.06969331,0.17905739,-0.10496116,-0.6929111,0.22410089,-0.88757545,-0.3875029,-0.9990724,0.7996023,0.1332775,0.45824438,0.31945896,-0.39675453,-0.2325412,-0.28240755,0.111981526,0.25429365,0.009915695,-0.0017946103,0.20953012,0.5557458,0.1852647,-0.06344612,-0.47029245,-0.08456594,0.40409538,-0.5994095,-0.6911889,0.21096468,0.2559651,0.2803984,-0.05043013,-0.7578256,0.21765277,0.1575995,-0.5932298,0.42471963,0.32079038,-0.13933462,0.8837251,-0.13231069,-0.33799645,-0.0018726215,-0.16707146,-0.31720403,-0.9073335,0.49442956,0.8166298,-0.1859499,-0.8664063,0.34742993,0.32078594,-0.22332925,-0.089887016,0.8603544,0.8973546,-1.0442309,0.77778965,-0.8325279,-0.9245118,0.10945583,-0.45636624,0.30144095,0.29804856,0.87883013,-0.20291644,-0.5361129,-0.011513278,-0.30784088,0.29145402,-0.7299413,0.30677924,0.32046717,0.4216086,-0.22417979,-1.0476608,0.25836924,-0.5457486,0.78723985,0.3147169,0.6744747,0.117248304,0.7796245,0.1667633,-0.05276259,0.45633474,-0.05295361,-0.17792204,-0.0023109019,-0.6422791,-0.5612288,0.7110676,-0.54401594,0.3300026,-0.619869,-0.09431264,-0.07784731,0.771386,0.22170979,1.2680292,0.6315084,0.16051197,-0.64844066,0.32377774,0.8972883,-0.43491426,0.16249372,0.025638677,0.39882934,0.11513513,0.16977763,-0.44511774,-0.10221107,-0.25697336,0.15393463,1.666436,1.2456858,0.6467339,0.25188154,0.66154534,0.1771717,-0.23962885,-1.5796692,0.34491396,-0.6322325,0.24218054,-0.62269676,-0.65518,0.6169192,0.38715762,0.26324546,-0.1913823,-1.0425394,-0.35442048,0.15489051,-0.6179073,-0.10027826,0.98243856,-0.83866465,0.27437344,-0.018565083,-0.07343559,-0.02273492,0.14007108,-0.6073276,0.12903607,0.14183119,-0.92360187,0.073025644,0.17018092,0.094978906,-0.90500015,-0.23748596,-0.15616933,-0.39025933,0.1508064,0.13708463,-0.43871704,-0.06122872,0.7306536,1.1007648,0.90842044,0.6792247,-0.2277777,-0.2275868,0.36466032,-0.15540537,0.3072914,-0.035147168,0.00074688345,-1.1288671,-0.7516275,0.13472168,0.4058886,-0.10022309,0.77655673,-0.8648502,0.35874903,0.16473526,0.52729344,0.92643815,-0.48616827,0.94281304,0.6782243,-0.29109037,-1.7818185,0.06894239,-0.35927674,-0.26234305,-0.019412294,0.055608153,0.64186907,-0.45314384,0.47862685,-0.27247825,0.91571295,0.38216197,-0.6387788,-0.1985599,0.09336703,0.7974508,0.28251192,-0.055180512,0.29666126,-0.07621637,0.19084172,0.975887,0.60133094,0.49105358,0.9115963,0.22909132,-0.33476797,-0.7727825,-1.5366504,-0.63761973,0.20912232,-0.41918993,0.23823412,-0.25194234,-0.14828312,0.14444412,0.58627534,0.015048396,-0.11556372,0.0024702363,1.749235,-0.40917763,-0.31174123,0.036549225,0.05612826,-0.12019359,0.23008297,0.22641279,-1.0000932,-0.1219466,0.27040657,-0.47790366,0.43431234,0.16233972,0.026987977,0.36565885,0.91802174,0.118438765,0.4553149,-0.028192893,0.24704717,1.0163983,-0.45189098,-0.32400888,-0.36306608],"result":{"type":"object","properties":{"message":{"description":"The response message after processing the action","type":"string"}},"required":["message"]},"sql_tables":[{"name":"Questions","definition":"CREATE TABLE IF NOT EXISTS Questions (ID INTEGER PRIMARY KEY AUTOINCREMENT, Question TEXT NOT NULL, Answer TEXT NOT NULL, CorrectCount INTEGER DEFAULT 0, IncorrectCount INTEGER DEFAULT 0)"}],"sql_queries":[{"name":"Insert question and answer","query":"INSERT INTO Questions (Question, Answer) VALUES (?, ?)"},{"name":"Select all questions","query":"SELECT * FROM Questions ORDER BY CorrectCount ASC LIMIT 10"},{"name":"Select question by ID","query":"SELECT * FROM Questions WHERE ID = ?"}],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}