{"type":"Deno","content":[{"name":"Wikimedia Historical Events","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import axios from 'npm:axios';\n\ntype Configurations = {\n  project?: string;\n  language?: string;\n};\n\ntype Parameters = {\n  date?: string;\n  type?: 'all' | 'events' | 'births' | 'deaths' | 'holidays';\n};\n\ntype HistoricalEvent = {\n  text: string;\n  year: string;\n  links: Array<{\n    title: string;\n    url: string;\n  }>;\n};\n\ntype Result = {\n  events: {\n    selected_date: string;\n    events?: HistoricalEvent[];\n    births?: HistoricalEvent[];\n    deaths?: HistoricalEvent[];\n    holidays?: HistoricalEvent[];\n  };\n};\n\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (\n  config: C,\n  inputs: I\n) => Promise<R>;\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters\n): Promise<Result> => {\n  try {\n    const project = configurations?.project || 'wikipedia';\n    const language = configurations?.language || 'en';\n    const type = params.type || 'all';\n\n    // Parse and format the date\n    let month: string;\n    let day: string;\n    \n    if (params.date) {\n      const d = new Date(params.date);\n      month = String(d.getMonth() + 1).padStart(2, '0');\n      day = String(d.getDate()).padStart(2, '0');\n    } else {\n      const d = new Date();\n      month = String(d.getMonth() + 1).padStart(2, '0');\n      day = String(d.getDate()).padStart(2, '0');\n    }\n    \n    const api_url = `https://api.wikimedia.org/feed/v1/${project}/${language}/onthisday/${type}/${month}/${day}`;\n    \n    const response = await axios.get(api_url, {\n      headers: {\n        'User-Agent': 'ShinkaiWikimediaHistoricalEvents/1.0',\n        'Accept': 'application/json',\n        'Api-User-Agent': 'ShinkaiWikimediaHistoricalEvents/1.0 (https://github.com/dcSpark/shinkai-tools)'\n      }\n    });\n\n    if (!response.data) {\n      throw new Error('No data received from Wikimedia API');\n    }\n\n    const formatEvents = (events: any[]): HistoricalEvent[] => {\n      if (!Array.isArray(events)) return [];\n      return events.map(event => ({\n        text: event.text || '',\n        year: (event.year || '').toString(),\n        links: (event.pages || []).map((page: any) => ({\n          title: page.title || '',\n          url: `https://${language}.${project}.org/wiki/${encodeURIComponent((page.title || '').replace(/ /g, '_'))}`\n        }))\n      }));\n    };\n\n    const result: Result = {\n      events: {\n        selected_date: params.date || new Date().toISOString().split('T')[0]\n      }\n    };\n\n    if (type === 'all' || type === 'events') {\n      result.events.events = formatEvents(response.data.events || []);\n    }\n    if (type === 'all' || type === 'births') {\n      result.events.births = formatEvents(response.data.births || []);\n    }\n    if (type === 'all' || type === 'deaths') {\n      result.events.deaths = formatEvents(response.data.deaths || []);\n    }\n    if (type === 'all' || type === 'holidays') {\n      result.events.holidays = formatEvents(response.data.holidays || []);\n    }\n\n    return result;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 404) {\n        throw new Error(`No historical events found for the specified date`);\n      }\n      throw new Error(`Failed to fetch historical events: ${error.response?.data?.detail || error.response?.data?.message || error.message}`);\n    }\n    throw error;\n  }\n};\n","tools":[],"config":[{"BasicConfig":{"key_name":"project","description":"Wikimedia project (e.g., wikipedia)","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"language","description":"Language code (e.g., en)","required":false,"type":null,"key_value":null}}],"description":"Get historical events, births, deaths, and holidays for a specific date from Wikimedia","keywords":["wikimedia","history","wikipedia","events","onthisday","births","deaths","holidays"],"input_args":{"type":"object","properties":{"type":{"type":"string","description":"Type of historical events to fetch"},"date":{"type":"string","description":"Date in YYYY-MM-DD format (defaults to current date)"}},"required":["date"]},"output_arg":{"json":""},"activated":false,"embedding":[0.29477566,1.0117412,-0.6202075,0.33376315,-0.053947765,0.026860818,-0.7377069,-0.83665925,-0.0083391545,0.21152529,-0.050255015,0.19754547,0.11389883,0.29904258,0.7206601,-0.13929889,-0.18974261,0.5583879,-2.0742545,-0.53405017,0.31613874,0.9952624,0.36226624,0.4072935,0.047490813,-0.28238907,0.23723325,0.0076690763,-0.35536587,-1.2460557,0.25809887,-0.13677913,-0.29751548,0.22460133,-0.55132973,-0.4764052,0.0740842,0.28027934,-0.547053,0.0073472485,0.010947501,0.75224847,-0.35693744,-0.046456896,-0.61046094,-0.12254664,-0.032141667,-0.112551436,0.6485661,0.21746376,-0.5990246,-0.11226589,-0.24446194,0.9714458,0.023190811,0.3176229,-0.34114015,-0.5569169,-0.06928834,0.7135792,0.17709301,0.56719947,-3.7487204,-0.346402,1.1632138,0.24779865,-0.54460776,0.036532998,-0.073308654,0.6950744,-0.12827049,0.18828039,-0.39869356,0.1984463,-0.21752939,-0.064215064,0.2564307,0.20429969,0.26964045,0.15495527,-0.29734108,0.17403953,-0.25948605,0.21273632,-0.18653774,0.44531113,-0.38593677,-0.9179365,0.2438529,-0.0997323,-0.24604091,-0.1451738,0.9071416,-0.2711481,-0.6468744,0.25917673,0.29248938,0.46530083,0.40955648,3.4130402,0.96754795,0.22244205,0.89022833,-0.62486297,0.2418699,-0.33229274,-0.4743039,0.47157764,-0.08925427,0.13062398,0.51162416,-0.50985,0.013539419,0.10933446,0.37858722,0.8475568,-1.2596233,0.22610304,-0.6138481,-0.19471326,-0.21473409,-0.09509528,-0.330506,-0.2895074,0.34833106,-0.5439288,0.16780028,0.16374253,0.29956388,0.15592936,0.7759392,-0.12635303,-1.1424092,0.22464111,-0.49537605,-0.14755073,-0.36021078,-0.5076206,0.085256375,-0.90573156,-0.12654144,-1.7803864,0.93296677,0.12655136,0.56710637,0.74162763,-0.048006162,0.19737107,-0.35088977,0.13064715,0.3242258,-0.28349093,0.16499493,0.31035763,0.9694436,-0.23188873,0.006918628,0.38422015,-0.49259317,0.40547425,0.36254546,-0.608237,0.8714352,1.0579768,-0.24505255,-0.46154276,0.36439615,-0.04357844,0.7487116,-0.39351475,-0.17529517,-0.5405585,0.082929365,0.44247603,0.33740374,-0.39592648,-0.22144964,0.26338115,0.07921827,-0.48362407,-0.50966406,0.57214695,-0.26593617,-0.2204454,0.22628878,0.3289189,0.47446752,-0.072958,0.71870166,0.9635633,-0.009858981,2.0289896,-1.1460365,-0.3719672,0.28224593,0.25991857,-0.25553408,0.762941,0.6692431,0.3010424,0.24542296,-0.14032331,-0.0767684,-0.23961216,0.34910405,-0.020811822,0.25731996,-0.31750098,-0.48987412,-0.6452316,-0.27868992,0.41374058,0.6923546,0.32530978,0.3119402,0.8311446,-0.3188554,-0.24442613,0.20762585,0.9292942,0.09861783,0.18418717,-0.08058,-0.35473832,-0.9561498,-0.21095224,-0.40426287,-0.30187857,-0.21492301,-0.36965844,0.38684344,0.25499392,-0.19325766,0.7801644,0.8890956,-0.12769043,-0.37916833,0.16884214,0.3725056,-1.1681494,0.4008138,0.39719677,-0.30598783,-0.20272866,-0.11661515,-0.46739423,-0.09115721,0.18050745,-0.19146813,1.1359091,0.70095235,-0.14120099,1.0695186,-0.19071013,0.12765187,0.018066272,-1.7488604,-0.46934587,-0.44843587,0.67678064,-0.033269342,-0.4783499,0.38784727,0.02124574,0.082841545,-0.19762932,-0.61520356,-0.3095666,-0.070339836,-0.2967236,-0.20020884,0.5344763,-0.98644507,0.5919833,0.08644708,-0.18205553,0.3410497,-0.13204768,-0.042063594,-0.06031043,0.09037822,-0.20997748,0.89006335,0.24648115,-0.55736226,-0.4361548,-0.046541125,-0.07478971,-0.61841166,0.29561564,0.009868167,-0.6799142,0.10463001,-0.11834662,2.5112002,-0.34806433,0.8324958,0.5985202,-0.041068513,-0.23404442,-0.6649902,0.42112932,-0.41404757,0.09283943,-0.7067113,-1.0304857,0.16087952,-0.32677585,-0.6452825,0.5044132,-0.74610406,0.4045321,0.4044429,0.07740794,0.07671584,-0.6653489,0.45753238,0.29275352,-0.31259254,-2.2841237,-0.077471815,0.47192615,1.0051943,-0.31114987,-0.35974672,0.14946698,-0.18537301,0.5167947,-0.123000346,1.3512139,-0.24913947,0.35187116,-0.7515323,0.215749,1.2699412,-0.326455,0.21986122,-0.30381182,-1.2911285,-0.11616714,0.43651372,1.0533602,0.06394059,0.7466477,-0.13617757,0.33043957,-0.35973483,-1.026798,-0.017833382,0.50770515,-0.16294797,0.21644449,-0.033723637,-0.2518713,-0.33467692,0.3329077,-0.26897788,0.21709424,-0.4207815,1.228497,-0.24345085,-0.2167775,-0.562665,-0.38310772,-0.045019835,0.0134707615,0.097178236,0.18405673,0.10180208,0.115881845,0.4167165,-0.6636583,0.30226228,0.08212201,0.21116894,0.23230423,0.2504466,0.5942035,1.1258624,-0.06751907,-0.30136758,0.04655915,-0.9318778,-0.8102241],"result":{"type":"object","properties":{"events":{"properties":{"births":{"$ref":"#/result/properties/events/properties/events"},"deaths":{"$ref":"#/result/properties/events/properties/events"},"events":{"items":{"properties":{"links":{"items":{"properties":{"title":{"type":"string"},"url":{"type":"string"}},"required":["title","url"],"type":"object"},"type":"array"},"required":["text","year","links"],"text":{"type":"string"},"year":{"type":"string"}},"type":"object"},"type":"array"},"holidays":{"$ref":"#/result/properties/events/properties/events"},"selected_date":{"type":"string"}},"required":["selected_date","events","births","deaths","holidays"],"type":"object"}},"required":["events"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}