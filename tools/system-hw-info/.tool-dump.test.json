{"type":"Python","content":[{"name":"System Hardware Info","tool_router_key":"local:::__official_shinkai:::system_hardware_info","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n# \"psutil>=5.9.0\"\n# ]\n# ///\nimport psutil\nimport platform\nfrom typing import List, Optional\nimport subprocess\nimport json\n\nclass CONFIG:\n    pass\n\nclass INPUTS:\n    pass\n\nclass OUTPUT:\n    cpu_info: dict\n    memory_info: dict\n    disk_info: dict\n    gpu_info: List[dict]\n    system_info: dict\n\ndef get_mac_model() -> str:\n    try:\n        result = subprocess.run(['sysctl', 'hw.model'], capture_output=True, text=True)\n        if result.returncode == 0:\n            return result.stdout.split(':')[1].strip()\n    except:\n        pass\n    return \"Unknown Mac Model\"\n\ndef get_gpu_info() -> List[dict]:\n    \"\"\"Get GPU information based on the current platform.\"\"\"\n    try:\n        system = platform.system().lower()\n        if system == \"darwin\":\n            # macOS - use system_profiler\n            try:\n                result = subprocess.run(\n                    ['system_profiler', 'SPDisplaysDataType', '-json'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    data = json.loads(result.stdout)\n                    gpu_info = []\n                    for gpu in data.get('SPDisplaysDataType', []):\n                        gpu_info.append({\n                            \"name\": gpu.get('sppci_model', 'Unknown GPU'),\n                            \"vendor\": gpu.get('sppci_vendor', 'Unknown'),\n                            \"memory_total\": gpu.get('spdisplays_vram', 'Unknown'),\n                            \"metal_supported\": gpu.get('sppci_metal', 'Unknown'),\n                            \"displays\": gpu.get('spdisplays_ndrvs', [])\n                        })\n                    return gpu_info\n            except:\n                pass\n        elif system == \"linux\":\n            # Linux - use lspci\n            try:\n                result = subprocess.run(\n                    ['lspci', '-v', '-mm'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    gpu_info = []\n                    for line in result.stdout.split('\\n'):\n                        if 'VGA' in line or '3D' in line:\n                            parts = line.split('\"')\n                            if len(parts) > 3:\n                                gpu_info.append({\n                                    \"name\": parts[3],\n                                    \"vendor\": parts[1],\n                                    \"type\": \"Discrete\" if '3D' in line else \"Integrated\"\n                                })\n                    return gpu_info\n            except:\n                pass\n        elif system == \"windows\":\n            # Windows - use wmic\n            try:\n                result = subprocess.run(\n                    ['wmic', 'path', 'win32_VideoController', 'get', '/format:csv'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    gpu_info = []\n                    lines = result.stdout.strip().split('\\n')[1:]  # Skip header\n                    for line in lines:\n                        if line.strip():\n                            parts = line.split(',')\n                            if len(parts) > 2:\n                                gpu_info.append({\n                                    \"name\": parts[1],\n                                    \"driver_version\": parts[2],\n                                    \"video_memory\": parts[3] if len(parts) > 3 else \"Unknown\"\n                                })\n                    return gpu_info\n            except:\n                pass\n\n    except Exception as e:\n        pass\n\n    # Fallback when no GPU info could be retrieved\n    return [{\"name\": \"Integrated Graphics\", \"details\": \"No GPU information available\"}]\n\ndef run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    \"\"\"\n    Get detailed system hardware information using psutil and platform.\n    \n    Args:\n        c: Configuration object\n        p: Input parameters\n    \n    Returns:\n        OUTPUT: A dictionary containing detailed system hardware information\n    \"\"\"\n    try:\n        # CPU Information\n        cpu_freq = psutil.cpu_freq()\n        cpu_info = {\n            \"physical_cores\": psutil.cpu_count(logical=False),\n            \"logical_cores\": psutil.cpu_count(logical=True),\n            \"frequency\": {\n                \"current_mhz\": cpu_freq.current if cpu_freq else None,\n                \"min_mhz\": cpu_freq.min if cpu_freq else None,\n                \"max_mhz\": cpu_freq.max if cpu_freq else None\n            },\n            \"architecture\": platform.machine(),\n            \"processor_brand\": platform.processor() or \"Unknown\",\n            \"cpu_usage_percent\": psutil.cpu_percent(interval=1)\n        }\n\n        # Memory Information\n        memory = psutil.virtual_memory()\n        swap = psutil.swap_memory()\n        memory_info = {\n            \"total_bytes\": memory.total,\n            \"available_bytes\": memory.available,\n            \"used_bytes\": memory.used,\n            \"percent_used\": memory.percent,\n            \"swap\": {\n                \"total_bytes\": swap.total,\n                \"used_bytes\": swap.used,\n                \"free_bytes\": swap.free,\n                \"percent_used\": swap.percent\n            }\n        }\n\n        # Disk Information\n        disk = psutil.disk_usage('/')\n        disk_info = {\n            \"total_bytes\": disk.total,\n            \"used_bytes\": disk.used,\n            \"free_bytes\": disk.free,\n            \"percent_used\": disk.percent,\n            \"file_system_type\": \"Unknown\"  # This could be enhanced for specific OS\n        }\n\n        # GPU Information using platform-specific approach\n        gpu_info = get_gpu_info()\n\n        # System Information\n        system_info = {\n            \"os_name\": platform.system(),\n            \"os_version\": platform.version(),\n            \"os_release\": platform.release(),\n            \"computer_name\": platform.node(),\n            \"machine_type\": \"Unknown\",\n            \"boot_time\": psutil.boot_time()\n        }\n\n        # Add Mac-specific information if on macOS\n        if platform.system() == \"Darwin\":\n            system_info[\"machine_type\"] = get_mac_model()\n\n        output = OUTPUT()\n        output.cpu_info = cpu_info\n        output.memory_info = memory_info\n        output.disk_info = disk_info\n        output.gpu_info = gpu_info\n        output.system_info = system_info\n        return output\n\n    except Exception as e:\n        raise Exception(f\"Failed to gather system hardware information: {str(e)}\")\n","tools":[],"config":[],"description":"Get detailed system hardware information including CPU, RAM, and disk details","keywords":["system","hardware","cpu","memory","disk","diagnostics"],"input_args":{"type":"object","properties":{},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.055647776,-0.04978998,-0.15761133,-0.16340302,-0.18160184,-0.16777197,-0.5364819,-0.495886,-0.4496836,0.38182575,-0.51361877,1.2370247,0.16711472,-0.24373576,0.21664694,-0.35581648,-0.102260605,-0.34385526,-0.91969365,-0.20609963,0.19381662,0.3180137,0.07672395,0.10670896,0.24084395,0.113589324,-0.32660252,-0.23040473,-1.207998,-2.5315268,0.36532775,0.08410612,-0.4788182,-0.2430023,0.14709611,-0.49134552,0.07536059,0.37949497,-0.76383436,-0.0069204867,-0.32627165,0.27587512,-0.033509433,0.06343568,0.23881614,0.3843582,0.048707966,-0.17827919,1.0088518,0.45424682,0.057072286,-0.28318214,-0.428261,-0.4048779,-0.22157225,0.5831327,0.043916535,0.042667214,-0.5238588,-0.25837713,-0.26845708,0.42942992,-3.6697052,-0.58340275,0.3126905,0.36470672,0.5682894,0.038485594,-0.3744326,-0.69193965,-0.3983266,-0.016164852,-0.014725342,0.12416822,0.04232686,-0.15268895,0.45231453,0.20860058,0.14095856,-0.57479787,-0.00019491045,0.17044845,-0.24441136,-0.16765851,-0.6660505,0.31308365,-0.320383,-0.08099057,0.36913738,0.044502154,-0.20512447,-0.6750969,0.36722332,-0.29345816,-0.72441983,0.16204876,-0.41979623,0.67977935,0.1421459,3.1221025,0.8805892,0.5431208,0.73183566,-0.6559837,0.7873733,0.037699476,0.2368431,0.05101406,-0.28372186,-0.07640766,0.25122768,0.23470919,-0.004617974,0.74574035,0.5567012,0.32364282,-0.97803485,-0.090730354,-0.36725572,0.07794937,-0.75429225,-0.02363621,-0.45856255,-0.07815458,-0.030347336,0.045535527,0.12712397,0.3016452,0.3353125,-0.28998345,0.45284444,-0.82183856,-0.842194,-0.034618147,-0.09270677,-0.05947443,0.68918747,0.12786578,0.09504911,-1.0182046,-0.23450616,-0.81002575,1.6024472,0.33896202,0.9107065,0.20967737,0.5833923,-0.029791959,-0.17318512,-0.407625,-0.3215645,0.23174948,0.32625213,0.46137327,0.64582944,-0.26671082,-0.011984268,-0.23347384,-0.59382397,0.35292074,-0.953153,-0.34435925,0.4089468,-0.0952691,0.25516063,-0.11643551,0.3061592,-0.28771594,0.18260363,0.09874825,0.5791654,0.11133837,0.45309368,0.06957722,0.1835359,0.24572577,-0.7271899,0.101164065,-0.18423899,-0.19900084,-0.1877029,0.4432338,0.069625795,-0.73209846,0.39278072,0.020974565,0.45515624,-0.08229375,0.47642526,1.4905769,-0.8397883,1.1486089,-1.1679536,-0.71471256,0.011572683,-0.2563069,-0.07242649,0.9623245,0.5443806,-0.08143676,-0.5568687,-0.08313671,0.13861193,0.029011909,-0.10083415,-0.28263497,-0.23737958,-0.4609105,0.3326463,-0.63915974,0.828947,-0.52034855,-0.10572182,0.92881143,0.08968073,-0.0075160246,0.30486432,0.3541185,0.00044862367,0.37064803,0.16626517,0.01585757,-0.17700994,-0.45419666,-0.8317157,-0.40495914,0.37994093,-0.26222157,-0.81523734,-0.025608767,-0.027282618,0.24808826,0.3334125,0.12532637,0.91232055,0.7709158,-0.087675564,0.29601276,-0.36226693,0.11173386,0.088620424,0.30016905,-0.29930168,-0.089637004,0.85656905,-0.42076996,-0.27719635,-0.016739644,-0.20482089,1.8408585,0.56375414,0.5858686,0.50968635,0.6901411,0.3110037,-0.6455464,-0.6961398,-0.68675375,-0.51403797,1.1093479,-0.1924538,-0.13410954,-0.19770177,0.524974,-0.24970266,0.011592664,-0.4162034,-0.4303661,-0.35948223,-0.18637359,0.32775277,0.7080984,-0.002090942,0.050478857,-0.041735955,-0.585492,0.58181596,-0.083935134,-0.4185521,0.30850685,0.22941843,0.14311841,0.7382794,0.44520855,-0.93946666,-0.12861373,0.05074462,-0.31298077,-0.43764108,-0.31462985,-0.34857202,-0.57581395,-0.2931625,0.05829198,1.7702285,0.57277596,0.50545186,1.0278462,0.31149024,0.18079409,-0.7880689,0.23137733,-0.5118144,0.55805695,-0.65413433,-0.8537428,0.48279428,0.12748219,-0.73295337,0.48469782,-0.75844175,0.28888825,0.07003723,0.034349497,0.15611233,-0.51849025,0.45237312,0.86056197,-0.035379875,-2.4632025,-0.11219956,-0.10792157,0.5477221,0.12670466,-0.52812225,0.7355385,0.0569575,-0.07858959,0.096634775,1.0263046,0.87299514,-0.13002117,-0.56615376,-0.26661652,0.5298294,0.19117905,0.5774098,-0.4322399,-1.2239661,-0.10601708,0.43448907,1.4591992,0.7489102,0.3215002,0.17028493,0.025984295,-0.61374235,-1.4614217,0.26085046,-0.28215843,-0.4092724,0.60747075,0.16206858,-0.4081081,0.03116011,0.7319244,-0.31153297,0.16224897,-0.20160225,1.221526,-0.14753547,0.5292675,-0.28906456,0.85498637,0.26977298,-0.013133176,0.48370373,0.20320457,0.2625534,-0.009236552,0.11965196,-0.33331424,0.19177327,0.5020582,0.90179485,0.13766932,-0.06895898,0.13458242,0.3348707,-0.3742206,0.7946106,-0.48192957,-0.91103214,0.008685783],"result":{"type":"object","properties":{"cpu_info":{"properties":{"architecture":{"type":"string"},"frequency_mhz":{"type":"number"},"logical_cores":{"type":"integer"},"physical_cores":{"type":"integer"}},"required":["physical_cores","logical_cores"],"type":"object"},"disk_info":{"properties":{"free_bytes":{"type":"integer"},"total_bytes":{"type":"integer"},"used_bytes":{"type":"integer"}},"required":["total_bytes","used_bytes","free_bytes"],"type":"object"},"memory_info":{"properties":{"available_bytes":{"type":"integer"},"total_bytes":{"type":"integer"},"used_bytes":{"type":"integer"}},"required":["total_bytes","used_bytes","available_bytes"],"type":"object"}},"required":["cpu_info","memory_info","disk_info"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}