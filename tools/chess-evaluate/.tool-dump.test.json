{"type":"Python","content":[{"name":"Chess Evaluate","tool_router_key":"local:::__official_shinkai:::chess_evaluate","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#   \"python-chess>=1.999\",\n#   \"requests\"\n# ]\n# ///\n\nimport chess\nfrom typing import Dict, Any, Optional, List\n\nclass CONFIG:\n    pass\n\nclass INPUTS:\n    fen: str\n    depth: int = 15\n    time_limit_ms: int = 1000  # fallback if depth is small\n\nclass OUTPUT:\n    message: str\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    if not p.fen:\n        raise ValueError(\"No FEN provided\")\n    # Validate FEN\n    board = chess.Board()\n    try:\n        board.set_fen(p.fen)\n    except ValueError:\n        raise ValueError(\"Invalid FEN\")\n\n    # Basic evaluation based on material count and position\n    def evaluate_position(board: chess.Board) -> float:\n        # Material values\n        piece_values = {\n            chess.PAWN: 1,\n            chess.KNIGHT: 3,\n            chess.BISHOP: 3,\n            chess.ROOK: 5,\n            chess.QUEEN: 9,\n            chess.KING: 0  # Not counted in material\n        }\n        \n        score = 0\n        \n        # Count material\n        for piece_type in piece_values:\n            score += len(board.pieces(piece_type, chess.WHITE)) * piece_values[piece_type]\n            score -= len(board.pieces(piece_type, chess.BLACK)) * piece_values[piece_type]\n        \n        # Position evaluation bonuses\n        if board.is_checkmate():\n            if board.turn == chess.WHITE:\n                score = -1000  # Black wins\n            else:\n                score = 1000  # White wins\n        elif board.is_stalemate() or board.is_insufficient_material():\n            score = 0\n        \n        # Convert to centipawns\n        score = score * 100\n        \n        return score\n\n    # Get evaluation\n    score = evaluate_position(board)\n    \n    # Format message\n    if abs(score) >= 1000:\n        if score > 0:\n            message = \"Mate for White\"\n        else:\n            message = \"Mate for Black\"\n    else:\n        message = f\"Evaluation: {int(score)} centipawns (White-positive)\"\n\n    out = OUTPUT()\n    out.message = message\n    return out ","tools":[],"config":[],"description":"Evaluate a chess position using Stockfish at a given depth","keywords":["chess","stockfish","evaluation","analysis","engine","position"],"input_args":{"type":"object","properties":{"depth":{"type":"number","description":"Depth for the engine search","default":"15"},"time_limit_ms":{"type":"number","description":"Time limit in milliseconds if depth is small","default":"1000"},"fen":{"type":"string","description":"FEN describing the position to evaluate"}},"required":["fen"]},"output_arg":{"json":""},"activated":false,"embedding":[0.03929431,0.8498946,-0.048607606,-0.75167954,-0.8241445,0.040500473,0.3557356,-0.8271293,-0.13850287,-0.19979207,-0.23598729,0.10599311,0.4175427,-0.293741,0.08262198,-0.7561539,-0.22684973,0.49409574,-1.7596767,0.17628777,-0.16179156,0.16847667,0.1792269,0.064880006,-0.072824284,-0.36093593,0.13657981,-0.27270728,-1.0168961,-2.2499945,0.57976323,0.36887753,-0.6622136,-0.18843563,-0.18991241,-0.26822126,-0.25098792,0.2764511,-0.28658876,-0.16797546,-0.11641242,0.83536834,-0.4441652,0.20746624,0.5720518,0.39946982,-0.24376212,-0.05636233,1.206796,0.38951713,-0.8684969,-0.62982535,-0.55996495,-0.12106268,-0.11746783,-0.10100563,0.000968067,-0.7768495,-0.32822588,0.08465734,0.042916574,0.051090717,-3.6833775,-0.010168266,0.8789356,-0.05456102,0.71633893,0.26553357,-0.00017997716,0.41130006,-0.16167021,-0.12933426,0.05453319,-0.25830922,0.24274594,-0.25548413,0.29213318,-0.18335903,0.4466567,-0.50771654,-0.16127157,0.7228663,0.172587,0.23186453,-0.28696862,0.39672977,-0.20395318,-0.03818004,0.017108135,0.26096845,0.18224445,-0.21673656,0.2684712,-0.31636584,-0.8957016,0.69258904,-0.30523756,0.99624354,-0.022273205,3.2506015,0.8103731,-0.22447434,0.44869795,-0.72424275,0.43533736,-0.21542847,-0.0331974,-0.27995622,0.16778071,-0.07121836,-0.3963609,-0.35575846,-0.0958398,0.29159367,-0.69467664,0.64955264,-0.4235953,-0.2957604,-0.12633766,0.3400599,-0.5608492,0.34495974,0.38904756,0.16713208,0.43123767,-0.2817181,-0.79038906,0.46256503,0.42884865,0.1953258,0.5724376,0.12019083,-1.1734083,0.05299954,0.52493817,-0.18200627,-0.1556906,-0.84278923,-0.16136149,-0.46127838,-0.33631974,-1.3644403,1.1677837,-0.33745334,0.5967866,-0.47452474,-0.021372177,0.30271196,-0.7587444,-0.37238783,-0.22990371,0.77759826,0.06656806,-0.0432015,0.6044953,0.2183959,-0.69896615,0.12439881,0.16913098,-0.41952574,-0.3515701,0.09432693,0.46108297,0.13257207,0.2503428,-0.52070564,0.02723284,0.5427315,0.48561203,-0.1671453,-0.01421158,-0.11692505,-0.20630707,-0.08557497,0.02348715,-0.15783262,0.22488046,0.21298611,0.27429453,-0.08201861,0.15205197,0.48991698,-0.29805228,-0.42147636,0.094236955,0.1842046,0.040274017,0.1236784,0.26109853,1.4250895,-0.042905293,1.728094,-0.4787584,-0.17043191,-0.08336209,0.49127465,-0.5638424,0.44851673,0.3925145,-0.3178463,-0.34204614,-0.22148338,-0.086124286,-0.015178956,-0.45665175,-0.88162994,0.8483509,-0.48875257,0.2157389,-0.05190314,-0.17210676,0.2138926,0.36136284,0.4625533,0.35614598,0.77489173,0.41129458,0.5384145,0.37755615,0.48970234,0.23452097,-0.16870862,-0.5668786,-0.63688654,-0.56978863,-0.038680017,-0.71159035,-0.5656483,-0.8254893,-0.24684466,0.13922516,0.53158635,0.65933365,0.7633451,1.1498121,0.015927143,0.23151472,0.5690415,0.13163087,-0.28500682,0.59874177,0.56407005,-0.9139314,-0.32410452,0.3204531,-0.64281297,0.05582183,0.41239935,-0.43648258,2.1029377,1.2765979,0.18958578,0.4217939,0.6220955,0.21967965,0.16978955,-0.95909214,-0.14738242,-0.26967043,0.15044962,-0.7662259,-0.4836085,0.66005003,-0.50569993,-0.2567535,0.019300845,-0.13991123,0.25582623,-0.10241229,-0.15418416,-0.5997331,0.973229,0.2284577,0.057906367,-0.006111013,0.08898363,0.16527908,0.09261393,-0.862002,-0.044917,-0.32191727,-0.26946405,0.2993453,-0.16318832,-0.39182732,-0.40405673,-0.22199851,-0.47713244,-0.057327397,0.4491997,-0.34347218,-0.6790923,-0.25188723,0.371709,0.8643496,0.018343598,-0.2672216,0.5005928,0.3757292,0.9465209,-0.62510854,0.4240834,0.031456824,0.8818616,-0.18466781,-0.39557993,0.08948431,-0.06028481,-0.72892916,0.03337817,-0.03718985,-0.357435,0.24221131,-0.24202442,0.2688782,-0.33918104,0.40016732,0.43167797,-0.30272824,-2.0898483,-0.3952785,0.059352335,0.6478992,-0.16656044,-0.49586484,0.1528812,-0.66953266,-0.5988591,-0.5634599,0.75906,0.073048234,-0.083158776,-0.24945295,-0.040215295,0.63939214,-0.41434607,-0.049898818,0.5848163,-0.91874266,0.18560424,0.18548846,1.5551729,0.57969946,1.0699564,0.24507663,0.5437037,-0.7805011,-0.6919016,0.69881284,0.6108754,-0.22380793,0.6420722,-0.14470479,0.21182457,0.88898647,0.41495717,-0.20922777,0.115550496,0.13399246,1.2467184,-0.116785236,0.14036292,0.35792345,0.46085513,-0.40601376,0.07525536,-0.3979047,-0.43495214,0.30598855,0.64447355,0.33576944,-0.5985971,0.3814746,0.072214425,1.0117314,0.4670065,0.11352663,0.73521125,0.30555278,-0.22643857,-0.28620768,-0.6810423,-1.2762983,0.31571925],"result":{"type":"object","properties":{"message":{"type":"string"}},"required":["message"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}