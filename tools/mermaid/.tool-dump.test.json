{"type":"Deno","content":[{"name":"mermaid","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import axios from 'npm:axios@1.7.7';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { encodeBase64 } from \"https://deno.land/std@0.224.0/encoding/base64.ts\";\nimport { deflate } from \"https://deno.land/x/compress@v0.4.5/zlib/deflate.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n/**\n * Configuration for the tool.\n */\ntype CONFIG = {\n  /**\n   * How many times to attempt LLM fixes if Kroki fails to parse the Mermaid diagram.\n   */\n  maxRetries?: number;\n};\n\n/**\n * Inputs for the tool: a single textual description from the user.\n */\ntype INPUTS = {\n  description: string;\n};\n\n/**\n * Final output from the tool:\n * - The base64-encoded PNG\n * - The final (valid) Mermaid code that was successfully parsed.\n */\ntype OUTPUT = {\n  pngBase64: string;\n  finalMermaid: string;\n};\n\n/**\n * This function:\n * 1. Takes a textual description and asks an LLM to produce Mermaid code.\n * 2. Sends the Mermaid code to Kroki (https://kroki.io/) to validate and render a PNG.\n * 3. If Kroki fails to parse, it sends the error back to the LLM to refine the Mermaid code.\n * 4. Repeats up to `maxRetries` times. If still invalid, throws an error.\n */\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { description } = inputs;\n  const maxRetries = config.maxRetries ?? 5;\n\n  /**\n   * Attempt to render with Kroki. On success: return { ok: true, data: Buffer }.\n   * On failure: return { ok: false, error: string }.\n   */\n  async function tryKrokiRender(mermaidCode: string) {\n    console.log('Attempting to render with Kroki:', { mermaidCode });\n    \n    // Basic validation before sending to Kroki\n    if (!mermaidCode.trim().startsWith('graph')) {\n      console.log('Basic validation failed: Code does not start with \"graph\"');\n      return { ok: false, error: 'Invalid Mermaid syntax: Must start with \"graph\"' };\n    }\n\n    try {\n      // First deflate the diagram\n      const encoder = new TextEncoder();\n      const compressed = deflate(encoder.encode(mermaidCode.trim()), { level: 9 });\n      // Then base64 encode it\n      const encodedDiagram = encodeBase64(compressed).replace(/\\+/g, '-').replace(/\\//g, '_');\n      console.log('Encoded diagram:', { encodedDiagram });\n      \n      console.log('Sending request to Kroki...');\n      const resp = await axios.get(`https://kroki.io/mermaid/png/${encodedDiagram}`, {\n        responseType: 'arraybuffer',\n        timeout: 30000,\n        headers: {\n          'Accept': 'image/png',\n        },\n        validateStatus: (status) => status === 200,\n      });\n      \n      console.log('Received successful response from Kroki');\n      return { ok: true, data: new Uint8Array(resp.data) };\n    } catch (err: any) {\n      console.log('Error from Kroki:', {\n        status: err.response?.status,\n        headers: err.response?.headers,\n        isAxiosError: err.isAxiosError,\n        message: err.message,\n        data: err.response?.data?.toString()\n      });\n\n      // Handle various error cases\n      if (err.response) {\n        const errorData = err.response.data;\n        let errorMessage = '';\n        \n        try {\n          // Try to parse error as JSON if it's not binary data\n          if (err.response.headers['content-type']?.includes('application/json')) {\n            const jsonError = JSON.parse(errorData.toString());\n            errorMessage = jsonError.error || jsonError.message || String(errorData);\n          } else {\n            errorMessage = errorData.toString();\n          }\n        } catch (parseErr) {\n          console.log('Error parsing error response:', parseErr);\n          errorMessage = errorData.toString();\n        }\n\n        console.log('Formatted error message:', errorMessage);\n        return {\n          ok: false,\n          error: `Kroki error (HTTP ${err.response.status}): ${errorMessage}`,\n        };\n      }\n\n      // Network or other errors\n      return { ok: false, error: `Request failed: ${err.message}` };\n    }\n  }\n\n  /**\n   * Validate Mermaid syntax before sending to Kroki\n   */\n  function validateMermaidSyntax(code: string): { isValid: boolean; error?: string } {\n    console.log('Validating Mermaid syntax for:', { code });\n    \n    const trimmed = code.trim();\n    \n    // Basic syntax checks\n    if (!trimmed.toLowerCase().startsWith('graph')) {\n      console.log('Validation failed: Does not start with \"graph\"');\n      return { isValid: false, error: 'Diagram must start with \"graph\"' };\n    }\n\n    const lines = trimmed.split('\\n').map(line => line.trim()).filter(line => line);\n    console.log('Processing lines:', { lines });\n    \n    const firstLine = lines[0];\n    \n    // Check graph direction\n    if (!firstLine.toLowerCase().match(/^graph\\s+(td|lr)$/)) {\n      console.log('Validation failed: Invalid graph direction:', { firstLine });\n      return { isValid: false, error: 'First line must be \"graph TD\" or \"graph LR\"' };\n    }\n\n    // Check for basic node definitions\n    const nodeLines = lines.slice(1);\n    for (const line of nodeLines) {\n      console.log('Checking node line:', { line });\n      // More lenient regex allowing (), {}, [], optional ;, and underscores in IDs\n      if (!line.match(/^[A-Za-z0-9_]+(?:\\[[^\\]]+\\]|\\([^)]+\\)|\\{[^}]+\\})?\\s*(?:-->|---|==>)\\s*[A-Za-z0-9_]+(?:\\[[^\\]]+\\]|\\([^)]+\\)|\\{[^}]+\\})?\\s*;?\\s*$/)) {\n        console.log('Validation failed: Invalid node definition or link syntax:', { line });\n        return { isValid: false, error: `Invalid node definition or link syntax: ${line}` };\n      }\n    }\n\n    console.log('Validation successful');\n    return { isValid: true };\n  }\n\n  /**\n   * LLM prompt to request a new or revised Mermaid code from the LLM.\n   */\n  async function requestMermaid(\n    userDescription: string,\n    priorError?: string,\n    priorCode?: string\n  ): Promise<string> {\n    let prompt = '';\n    if (!priorError) {\n      // initial request\n      prompt = `Create a valid Mermaid.js diagram based on this description: \"${userDescription}\"\n\nRules:\n1. Start with either 'graph TD' (top-down) or 'graph LR' (left-right)\n2. Use simple node names (A, B, C, etc.) with descriptive labels in brackets\n3. Use standard arrows (-->)\n4. Avoid special characters in labels\n5. Return ONLY the Mermaid code, no explanations\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    } else {\n      // revise with specific guidance based on prior error\n      prompt = `The following Mermaid code needs correction:\n\\`\\`\\`\n${priorCode}\n\\`\\`\\`\n\nError received: ${priorError}\n\nPlease provide a corrected version following these rules:\n1. Keep the diagram simple and minimal\n2. Use only basic Mermaid syntax (graph TD/LR, basic nodes, arrows)\n3. Ensure all nodes are properly defined before being referenced\n4. Avoid special characters or complex styling\n5. Return ONLY the corrected Mermaid code\n\nExample of valid format:\ngraph TD\n    A[Start] --> B[Process]\n    B --> C[End]`;\n    }\n    const resp = await shinkaiLlmPromptProcessor({ format: 'text', prompt });\n    \n    // Clean up the response to extract just the Mermaid code\n    let code = resp.message.trim();\n    // Remove any markdown code block markers\n    code = code.replace(/^```mermaid\\n/m, '').replace(/^```\\n/m, '').replace(/```$/m, '');\n    return code.trim();\n  }\n\n  // Main logic:\n  console.log('Starting Mermaid diagram generation for description:', { description });\n  let currentMermaid = await requestMermaid(description, undefined, undefined);\n  console.log('Initial Mermaid code generated:', { currentMermaid });\n\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    console.log(`Attempt ${attempt + 1}/${maxRetries}`);\n    \n    // Validate syntax before sending to Kroki\n    const validation = validateMermaidSyntax(currentMermaid);\n    if (!validation.isValid) {\n      console.log('Validation failed:', validation.error);\n      // If invalid syntax, try to get a new diagram\n      currentMermaid = await requestMermaid(\n        description,\n        `Invalid Mermaid syntax: ${validation.error}`,\n        currentMermaid\n      );\n      console.log('Generated new Mermaid code after validation failure:', { currentMermaid });\n      continue;\n    }\n\n    console.log('Validation passed, attempting to render');\n    const renderResult = await tryKrokiRender(currentMermaid);\n    if (renderResult.ok && renderResult.data) {\n      console.log('Successfully rendered diagram');\n      // Convert Uint8Array to base64 string\n      const pngBase64 = encodeBase64(renderResult.data);\n      // Ensure data is not empty before writing to file\n      if (renderResult.data.length > 0) {\n        console.log(`Writing ${renderResult.data.length} bytes to file`);\n        // Debug the data before writing\n        console.log('Data type:', renderResult.data.constructor.name);\n        console.log('First few bytes:', Array.from(renderResult.data.slice(0, 10)));\n        \n        try {\n          const filePath = await getHomePath() + '/mermaid.png';\n          await Deno.writeFile(filePath, renderResult.data);\n          \n          // Verify the file was written correctly\n          const fileInfo = await Deno.stat(filePath);\n          console.log(`File written successfully. Size: ${fileInfo.size} bytes`);\n          \n          if (fileInfo.size === 0) {\n            console.error('Warning: File was created but is empty');\n          }\n        } catch (err: any) {\n          console.error('Error writing file:', err);\n          throw new Error(`Failed to write PNG file: ${err.message}`);\n        }\n      } else {\n        console.error('Error: Received 0 bytes data from Kroki');\n        throw new Error('Received empty image data from Kroki');\n      }\n\n      return {\n        pngBase64,\n        finalMermaid: currentMermaid,\n      };\n    } else {\n      console.log('Render failed:', renderResult.error);\n      // Some error from Kroki. Let's refine\n      const errorMessage = renderResult.error || 'Unknown error';\n      currentMermaid = await requestMermaid(description, errorMessage, currentMermaid);\n      console.log('Generated new Mermaid code after render failure:', { currentMermaid });\n    }\n  }\n\n  console.log('Exhausted all attempts, throwing error');\n  // If we've exhausted attempts, throw an error\n  throw new Error(\n    `Failed to produce a valid Mermaid diagram after ${maxRetries} attempts. Last code:\\n${currentMermaid}`\n  );\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"maxRetries","description":"Maximum number of retries for the tool","required":false,"type":null,"key_value":null}}],"description":"Generate diagrams and flowcharts using Mermaid syntax, it receives a natural language description and returns a PNG image and the final Mermaid code","keywords":["mermaid","diagram","flowchart","visualization","markdown"],"input_args":{"type":"object","properties":{"description":{"type":"string","description":"Mermaid diagram code"}},"required":["description"]},"output_arg":{"json":""},"activated":false,"embedding":[0.635345,0.47671872,0.2401489,0.23655456,0.03803828,0.18153423,-0.8686264,0.233884,0.24700868,0.6921044,-0.32140854,0.15320621,0.16755553,0.1152092,0.4662181,0.06973938,0.051002767,-0.11556035,-2.2325757,-0.21381462,0.18868348,0.9105638,0.6082659,-0.016910218,-0.39371625,0.25953862,-0.25299108,-0.5328176,-1.4634129,-1.8475016,-0.2275315,0.60646826,-0.26142007,-0.1263372,0.54918635,-0.29925063,-0.46977916,0.10998973,0.074720114,0.36539602,0.202619,-0.31604645,-0.10556671,-0.102682084,0.3751158,0.32988027,0.1966875,0.033806197,0.29115346,0.2682572,-0.997329,-0.48810768,0.19057749,-0.1800175,-0.5198042,0.39973357,-0.0024473649,-0.90228987,0.51781255,0.44083887,-0.40121555,0.65801066,-3.2011757,0.594202,0.7199999,0.14758405,-0.54979134,0.20164308,-0.58633196,0.13400158,0.29583937,0.17280309,-0.4974252,0.4408249,-0.08813905,-0.3203262,0.46760303,0.15141615,0.7106917,0.16396047,-0.25090644,0.11273514,-0.22155489,-0.004837727,-0.22047828,0.9838523,-0.45957923,-1.006546,0.32381523,0.116243616,-1.1879714,-0.18069686,0.18053113,0.44338232,0.16209866,0.077484496,-0.29863036,-0.46163368,-0.10045264,3.132422,0.4161194,0.07153137,0.5672899,-1.0248096,0.6924005,-0.04753897,0.029565193,-0.3706358,0.39875194,-0.13479567,0.2500218,-0.34850764,0.07682915,-0.0035103466,0.45472717,0.28696868,-0.89565843,-0.07249004,-0.13642323,0.16947111,-0.3430292,0.07437201,-0.33885077,-0.3426501,0.113888964,0.07945762,-0.014971886,0.37505448,-0.3335677,-0.42632586,0.5172818,-0.1615092,-0.10304943,0.2726126,-0.2289339,0.03945346,0.3481884,-0.8202557,0.031037055,0.23396945,0.22286677,-1.4718317,0.81220955,0.13467543,0.9089863,1.0124758,-0.7535127,0.03516595,-0.4246908,0.3696751,-0.16054732,0.24032928,-0.000001425622,0.10075629,0.85368586,0.61847484,0.03682352,0.0075307116,0.15254542,0.30813628,-0.18829636,-0.4861108,0.36959133,0.16806608,-0.2083779,-0.56373054,0.39244023,0.62210035,0.19292304,-0.45983538,-0.067995235,0.29433295,-0.11472166,0.078615725,-0.13122086,-0.3588691,0.07977489,-0.25849423,0.47276384,-0.39601222,0.8374857,0.7809054,0.2119477,-0.3859332,0.1587497,0.2334165,-0.086647056,0.35696402,0.33125237,1.0677981,-0.21074858,1.7423261,-0.26948088,-0.1243753,0.87346655,0.043437175,0.37892187,0.21971916,-0.40357843,0.25408602,-0.8609253,0.0064370297,0.110199556,-0.13978136,-0.9749307,-0.217221,0.12358281,0.08112491,-0.84207386,-0.18168452,-0.35117367,0.017359126,1.1125929,0.09813609,0.6499983,0.2982576,0.5082692,0.09501167,0.87282413,0.20079388,0.8389549,0.35493207,-0.4356616,-0.6477988,-0.46049306,-0.045142516,-0.42412505,-0.14370811,-0.7224272,-0.65022206,0.5567193,1.6562098,0.590143,0.74945056,0.43470585,0.16390938,-0.16429624,0.36102533,-0.085442916,-0.5520189,0.7978778,0.1253875,-0.071399815,-0.3139833,0.15250814,-1.0157257,-0.35553533,-0.40815112,-0.018176062,1.9820895,0.54807913,0.31281984,0.22848816,0.40403336,-0.20144427,-0.4656956,-1.8133734,-0.52079475,-0.9376277,0.24499755,-0.12989685,-0.71096885,0.2985983,-0.09924846,-0.4678311,-0.40493226,-0.95126027,-0.29462606,-0.32404327,0.11986817,0.4964143,0.2062405,-0.018974006,0.30563304,-0.2378663,0.15103774,0.5698527,0.03909534,-0.63257074,-0.386979,0.37529248,0.29793185,-0.19354323,0.13939895,-0.64801794,-0.8946834,-0.2433582,0.5187804,-0.2837239,0.04710929,-0.0025707558,-0.15313023,-0.50108093,0.10267326,1.9228039,0.6202754,-0.1791426,1.0499223,0.17478351,0.03772269,-0.6054617,0.1959357,0.21142788,0.28736,-0.6857707,0.25077257,0.21765235,-0.83289903,-0.8187597,0.3346607,-0.8412043,-0.3674854,0.115158945,0.033733837,0.35839352,-0.30634794,0.0018159002,0.6069624,0.041302305,-2.3852403,-0.2670251,0.56805784,0.5293671,-0.54675245,-0.41200995,0.93508,0.16569096,-0.15304306,-0.30250758,1.0809563,0.10614542,-0.40240517,-0.5885897,0.31330514,0.77605677,-0.19757627,0.66423136,-0.069632724,0.081054784,-0.030933782,0.56801784,1.4010298,-0.018442346,0.6924044,-0.19959192,-0.41042036,-0.8403938,-0.690863,-0.22006062,-0.42840898,-0.14986297,0.13390341,-0.5647906,-0.14493355,0.24236672,0.783696,-0.3589562,-0.17407133,-0.13869154,1.544451,-0.0011653975,0.0562258,-0.50059664,-0.41795108,0.3697627,0.094199024,0.40021694,-1.2675517,0.026197493,0.4579734,-0.45734742,-0.39991882,0.21456426,0.28082636,0.7863098,0.02861692,0.07158783,0.18417999,0.45640093,0.6522268,-0.40956035,-0.32886326,-0.29558852,-0.1254349],"result":{"type":"object","properties":{"finalMermaid":{"description":"Final Mermaid code","type":"string"},"pngBase64":{"description":"Base64 encoded image data","type":"string"}},"required":["pngBase64","finalMermaid"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}