{"type":"Python","content":[{"version":"1.0.0","name":"Text to Audio","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#   \"kokoro-onnx\",\n#   \"soundfile\",\n#   \"pathlib\",\n#   \"requests\",\n#   \"onnxruntime\",\n#   \"numpy\"\n# ]\n# ///\n\nfrom kokoro_onnx import config, Kokoro\nfrom pathlib import Path\nimport soundfile as sf\nfrom typing import Optional, Dict, Any, List\nimport os\nimport requests\nimport onnxruntime as ort\nimport time\nimport numpy as np\nfrom shinkai_local_support import get_home_path\n\n# Configure Kokoro settings\nconfig.MAX_PHONEME_LENGTH = 128\n\n# URLs from the official kokoro-onnx repository\nMODEL_URL = \"https://github.com/thewh1teagle/kokoro-onnx/releases/download/v1.0/kokoro-v1_0.onnx\"\nVOICES_URL = \"https://github.com/thewh1teagle/kokoro-onnx/releases/download/v1.0/voices.bin\"\n\ndef download_file(url: str, local_path: str) -> None:\n    print(f\"Downloading {url}...\")\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    total_size = int(response.headers.get('content-length', 0))\n    block_size = 8192\n    downloaded = 0\n    start_time = time.time()\n    \n    with open(local_path, 'wb') as f:\n        for chunk in response.iter_content(chunk_size=block_size):\n            downloaded += len(chunk)\n            f.write(chunk)\n            # Show download progress\n            if total_size > 0:\n                progress = (downloaded / total_size) * 100\n                elapsed = time.time() - start_time\n                speed = downloaded / (1024 * 1024 * elapsed) if elapsed > 0 else 0  # MB/s\n                print(f\"Download progress: {progress:.1f}% ({speed:.1f} MB/s)\", end='\\r')\n    print(\"\\nDownload complete!\")\n\nclass CONFIG:\n    model_path: str = \"kokoro-v1_0.onnx\"\n    voices_path: str = \"voices.bin\"\n    providers: Optional[List[str]] = None  # ONNX providers (e.g. [\"CPUExecutionProvider\", \"CUDAExecutionProvider\"])\n\nclass INPUTS:\n    text: str  # The text to convert to audio\n    voice: str = \"af_sky\"  # Default voice from: af, af_bella, af_nicole, af_sarah, af_sky, am_adam, am_michael, bf_emma, bf_isabella, bm_george, bm_lewis\n    language: str = \"en-gb\"  # Currently only English is fully supported\n    speed: float = 1.0  # Default speed\n    output_format: str = \"wav\"  # Default output format\n\nclass OUTPUT:\n    output_file: str\n    duration: float\n    sample_rate: int\n    chars_per_second: float\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    # Validate input text\n    if not p.text or p.text.strip() == \"\":\n        raise ValueError(\"Text input cannot be empty\")\n\n    # Get home path for file operations\n    home_path = await get_home_path()\n    model_path = os.path.join(home_path, c.model_path)\n    voices_path = os.path.join(home_path, c.voices_path)\n    \n    # Download model and voices if not present\n    if not Path(model_path).exists():\n        print(f\"Downloading model from {MODEL_URL}...\")\n        try:\n            download_file(MODEL_URL, model_path)\n        except requests.exceptions.RequestException as e:\n            raise ValueError(f\"Failed to download model: {str(e)}\")\n        \n    if not Path(voices_path).exists():\n        print(f\"Downloading voices from {VOICES_URL}...\")\n        try:\n            download_file(VOICES_URL, voices_path)\n        except requests.exceptions.RequestException as e:\n            raise ValueError(f\"Failed to download voices: {str(e)}\")\n\n    # Initialize Kokoro\n    if not (Path(model_path).exists() and Path(voices_path).exists()):\n        raise ValueError(\"Model and voices files must be present in the specified paths\")\n    \n    kokoro = Kokoro(model_path, voices_path)\n    \n    # Set ONNX providers if specified\n    if c.providers:\n        available_providers = ort.get_available_providers()\n        invalid_providers = [p for p in c.providers if p not in available_providers]\n        if invalid_providers:\n            raise ValueError(f\"Invalid ONNX providers: {', '.join(invalid_providers)}. Available providers: {', '.join(available_providers)}\")\n        kokoro.sess.set_providers(c.providers)\n        print(f\"Using ONNX providers: {', '.join(c.providers)}\")\n    \n    # Generate audio\n    start_time = time.time()\n    samples, sample_rate = kokoro.create(\n        text=p.text,\n        voice=p.voice,\n        speed=p.speed,\n        lang=p.language\n    )\n    end_time = time.time()\n    \n    # Create output filename and save audio\n    output_file = os.path.join(home_path, f\"output.{p.output_format}\")\n    sf.write(output_file, samples, sample_rate)\n    \n    # Calculate metrics\n    duration = len(samples) / sample_rate\n    chars_per_second = len(p.text) / (end_time - start_time)\n    \n    print(f\"Generated {len(p.text):,} characters in {end_time - start_time:.2f} seconds\")\n    print(f\"Processing speed: {chars_per_second:.0f} characters per second\")\n    print(f\"Audio duration: {duration:.2f} seconds\")\n    print(f\"Output saved to: {output_file}\")\n    \n    # Prepare output\n    output = OUTPUT()\n    output.output_file = output_file\n    output.duration = duration\n    output.sample_rate = sample_rate\n    output.chars_per_second = chars_per_second\n    \n    return output  ","tools":[],"config":[{"BasicConfig":{"key_name":"model_path","description":"Path to the Kokoro model file","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"voices_path","description":"Path to the voices configuration file","required":false,"type":null,"key_value":null}}],"description":"Converts text files (.txt or .md) to audio files using high-quality text-to-speech synthesis","keywords":["text-to-speech","audio","conversion","text","markdown"],"input_args":{"type":"object","properties":{"language":{"type":"string","description":"Language code for synthesis (e.g., en-gb, en-us, fr-fr)"},"voice":{"type":"string","description":"Voice to use for synthesis"},"speed":{"type":"number","description":"Speech speed multiplier (0.5 to 2.0)"},"text":{"type":"string","description":"text to convert to audio"},"output_format":{"type":"string","description":"Output audio format"}},"required":["text"]},"output_arg":{"json":""},"activated":false,"embedding":[0.26402932,0.12929861,-0.04934295,-0.56408525,-0.86314386,-0.14892748,-0.4547126,0.5975848,0.008750894,0.30703133,-0.22920701,0.9235221,-0.050935153,-0.31644323,-0.15162672,0.1297985,-0.16142587,-0.3695571,-1.5952017,-0.5663927,-0.05399374,1.1344832,0.42959756,0.16039914,0.8143867,0.13574305,0.031474937,0.015346646,-0.51679105,-1.5916522,0.18616083,0.3248546,0.5542324,0.19799492,0.18794276,-0.09860341,-0.61177254,-0.31120318,-0.70041525,-0.45601475,0.38518327,-0.0649303,-0.029466715,0.19359991,0.18683872,-0.31135964,0.43110538,-0.19308922,1.3445243,1.0634713,-0.76008284,-0.75662947,-0.4058456,0.08440742,-0.27230787,-0.025747135,0.43380716,0.1662749,0.07206522,0.08975864,-0.9205548,-0.28034085,-3.6316319,-0.59038717,0.78879464,0.22857806,0.32108617,-0.24858102,0.28225276,-0.69494456,0.25496584,0.23486246,-0.23164794,0.15010023,0.12644926,-1.2252448,-0.4284789,-0.37731022,0.8610194,-0.1412255,-0.27760696,0.48218945,-0.047222994,-0.4817743,-0.5915228,0.6672626,-0.80218387,-0.6497585,-0.028864048,-0.13638751,-0.20851135,-0.36551353,0.7297526,0.16370234,-0.050431423,0.35324323,0.14624746,-0.11142899,1.059916,3.0126367,1.0199155,0.27769583,0.14387172,-1.1086072,-0.883447,-0.26366755,-0.28970262,-0.065775424,0.39596263,-0.4861938,0.2732807,-0.76761866,-0.59740114,-0.32866997,0.2983726,0.38269454,-0.85166407,0.36987218,-0.23292823,0.4912111,-0.7431115,0.17989361,0.16139095,0.23585075,-0.31270137,-0.3946187,-0.4018266,0.25357464,0.27445173,0.19267069,0.9582027,0.047526676,-0.52929294,0.0018343832,0.41408107,0.22542277,0.63058484,-0.61169374,0.17575589,0.056141116,0.1414704,-1.7442956,1.1457528,0.33181053,0.91082853,0.5514428,-0.94848955,0.26183215,-0.65705645,-0.20449752,-0.03659283,0.42359912,0.0328549,-0.11429015,0.92984486,0.057898346,-0.23421083,-0.24943322,-0.5422546,0.45754516,-0.29545268,-0.21850663,0.20933643,0.07755938,0.13997652,0.14910156,0.35252428,0.1994023,0.42694196,0.39795613,-0.114237994,-0.54859793,0.37903744,0.8990463,-0.10609173,-0.20964472,-0.5794421,0.113387175,-0.2357598,-0.08463189,0.15229708,0.21009862,-0.45431617,-0.046354495,0.26904732,0.13618669,0.1585532,0.18884677,0.38243896,1.1637704,-0.07041428,1.959842,-1.1375408,-0.16357884,-0.020493759,-0.004782824,0.5268944,0.1856941,0.047811758,0.02376512,-0.07233285,0.31834716,-0.17999935,-0.069826454,-0.17271891,-0.6965978,-0.25670195,0.16947354,-0.12830637,-0.37489438,0.12756859,-0.07894465,0.5675237,0.11275206,-0.09619093,-0.44637972,-0.19879627,0.46190768,-0.5014298,0.59489,-0.30684525,-0.19851586,-0.18930095,-0.5688829,0.001784388,0.42033356,-0.32597303,-0.5643141,-0.27922985,-0.7807226,0.80040425,1.3314034,1.429468,0.95554024,0.89578456,0.3979981,0.4513066,-0.12601963,0.3248672,-0.25734377,0.41980803,0.7491796,0.48995787,-0.22649051,0.11212573,-0.99948716,-0.18833709,-0.112292916,-0.027789032,1.7698832,0.3308709,0.09255394,0.79541296,0.13259813,0.55258685,-0.29107785,-1.2877383,-0.6185007,-0.07108481,1.024279,0.20494059,0.13871634,0.09776159,0.6189639,0.46635947,-0.188906,-0.020210268,-0.5152122,0.07685933,-0.50392956,-0.13180584,-0.10680249,-0.3323958,-0.047499813,0.46457338,-0.073617235,0.3494338,-0.2466158,-0.161398,-0.812369,0.65440506,-0.15019684,0.5041151,0.047660097,-0.30143595,-0.4389102,-0.023299199,-0.38605973,-0.2192874,-0.08600203,-0.009365756,-0.7499151,-0.61319065,0.22021548,1.9482272,-0.124956384,-0.15361221,0.7503002,-0.21196166,0.05188393,-0.6788187,-0.01642802,-0.34528643,0.17381078,-0.171453,0.13117105,-0.1325164,-0.2340848,-0.064503215,1.1119817,0.11756965,-0.17284234,0.03436405,-0.13125505,0.6791746,-0.25553173,0.7228305,0.051233068,-0.23808783,-2.1117115,-0.5779933,0.1707299,0.14875528,-0.6514636,0.0033948068,0.48412824,-0.45757812,-0.14261219,-0.2973044,1.2852443,0.31189412,-0.21055226,-0.43436766,0.3029362,0.5976637,-0.0503571,0.22231798,-0.42897853,-0.88904965,-0.092665106,0.4977418,1.3534796,-0.07894117,0.7623016,0.11313234,-0.05428859,-0.71303713,-1.510541,0.45249906,-0.3646084,-0.601598,0.29300064,-0.2493334,0.51994747,-0.08107859,0.5539604,-0.36393788,-0.28209653,-0.6852269,2.0512543,0.11516261,-0.3810665,-0.51723033,0.27765435,0.0073038675,-0.30933744,0.515829,-0.9800994,0.08476859,0.21262014,0.45606807,-0.2384403,0.20486984,-0.25580144,0.87567616,0.4350404,0.17407647,0.7898179,0.28699213,0.4185474,0.41627556,-0.3037251,-0.46684527,-0.29180884],"result":{"type":"object","properties":{"duration":{"description":"Duration of the audio in seconds","type":"number"},"output_file":{"description":"Path to the generated audio file","type":"string"},"sample_rate":{"description":"Sample rate of the audio in Hz","type":"number"}},"required":["output_file","duration","sample_rate"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}