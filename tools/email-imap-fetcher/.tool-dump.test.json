{"type":"Python","content":[{"version":"1.0.0","name":"Email Fetcher","homepage":null,"author":"@@official.shinkai","py_code":"from typing import Any, Optional, List, Dict\nimport imaplib\nimport email\nfrom datetime import datetime\n\nclass CONFIG:\n    imap_server: str\n    username: str\n    password: str\n    port: int = 143  # Default port for IMAPS\n    ssl: bool = True  # New flag to specify SSL usage\n\nclass INPUTS:\n    from_date: Optional[str]\n    to_date: Optional[str]\n\nclass OUTPUT:\n    emails: List[Dict[str, Any]]\n    login_status: str\n\nclass Email:\n    subject: str\n    date: datetime\n    sender: str\n    text: str\n\n# Function to validate date format\ndef validate_date_format(date_str):\n    try:\n        # Attempt to parse the date string in the expected format\n        datetime.strptime(date_str, '%d-%b-%Y')  # Expected format: DD-Mon-YYYY\n    except ValueError:\n        raise ValueError(f\"Invalid date format: {date_str}. Expected format is DD-Mon-YYYY. Example: 10-Jan-2025\")\n\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    output = OUTPUT()\n    output.login_status = \"N/A\"\n    output.emails = []\n    try:\n        # Use SSL if the ssl flag is set to True\n        if config.ssl:\n            imap = imaplib.IMAP4_SSL(config.imap_server, config.port)\n        else:\n            imap = imaplib.IMAP4(config.imap_server, config.port)  # Use config port\n    except Exception as ee:\n        output.login_status = 'IMAP4 INIT FAILED - ' + str(ee)\n        return output\n\n    try:\n        login_status, login_response = imap.login(config.username, config.password)\n        if login_status == \"OK\":\n            print(\"Login successful\")\n        else:\n            raise Exception(\"Login failed\")\n\n        imap.select(\"INBOX\")\n\n        # Validate the input dates\n        if inputs.from_date:\n            validate_date_format(inputs.from_date)\n        if inputs.to_date:\n            validate_date_format(inputs.to_date)\n\n        # Construct the search criteria\n        search_criteria = 'ALL'\n        if inputs.from_date and inputs.to_date:\n            search_criteria = f'SINCE \"{inputs.from_date}\" BEFORE \"{inputs.to_date}\"'\n        elif inputs.from_date:\n            search_criteria = f'SINCE \"{inputs.from_date}\"'\n        elif inputs.to_date:\n            search_criteria = f'BEFORE \"{inputs.to_date}\"'\n\n        print(\"Search Criteria:\", search_criteria)\n        _, data = imap.search(None, search_criteria)\n        mail_ids = data[0].split()\n\n        for mail_id in mail_ids:\n            _, data = imap.fetch(mail_id, '(RFC822)')\n            raw_email = data[0][1]\n            email_message = email.message_from_bytes(raw_email)\n\n            email_obj = Email()\n            email_obj.subject = email_message.get('Subject', '')\n            email_obj.sender = email_message.get('From', '')\n            try:\n                email_obj.date = datetime.strptime(email_message['Date'], '%a, %d %b %Y %H:%M:%S %z')  # Example format, adjust as needed\n            except ValueError:\n                email_obj.date = None  # Handle parsing error\n\n            email_obj.text = \"\"\n            if email_message.is_multipart():\n                for part in email_message.walk():\n                    content_type = part.get_content_type()\n                    content_disposition = str(part.get(\"Content-Disposition\"))\n                    try:\n                        body = part.get_payload(decode=True).decode()\n                        if content_type == \"text/plain\" and \"attachment\" not in content_disposition:\n                            email_obj.text += body\n                    except Exception as e:\n                        print(f\"Error decoding email part: {e}\")\n            else:\n                try:\n                    email_obj.text = email_message.get_payload(decode=True).decode()\n                except Exception as e:\n                    print(f\"Error decoding email payload: {e}\")\n\n            output.emails.append(email_obj.__dict__)  # Append as dictionary to match OUTPUT type\n\n        imap.close()\n        imap.logout()\n\n    except Exception as e:\n        output.login_status = str(e)\n        print(f\"An error occurred: {e}\")\n\n    return output","tools":[],"config":[{"BasicConfig":{"key_name":"imap_server","description":"The IMAP server address","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"username","description":"The username for the IMAP account","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"password","description":"The password for the IMAP account","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"port","description":"The port number for the IMAP server (defaults to 993 for IMAPS)","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"ssl","description":"Whether to use SSL for the IMAP connection (defaults to true)","required":false,"type":null,"key_value":null}}],"description":"Fetches emails from an IMAP server and returns their subject, date, sender, and text content.","keywords":["email","imap","fetch","parser"],"input_args":{"type":"object","properties":{"from_date":{"type":"string","description":"The start date for the email search (optional)"},"to_date":{"type":"string","description":"The end date for the email search (optional)"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.5479309,0.7763235,0.026674157,-0.16738741,0.5364636,-0.41592622,-0.18910207,-0.05454345,-0.29638964,0.2862875,-0.47343403,0.36381552,-0.028221607,-0.044476815,0.4598937,0.18612349,0.7828154,-0.7714744,-1.6326721,-0.8778204,-0.048063386,1.1291318,0.7664015,-0.29742765,-0.07895305,-0.11800984,-0.015257135,-0.5918412,-1.2382919,-1.5990069,0.13624647,0.613811,-0.075190045,0.06293893,-0.11953545,-0.27149397,-0.048563834,0.12580146,-0.75142956,-0.08895335,0.37151906,0.11853383,-0.17709689,0.009899925,-0.10987698,0.010610655,-0.3739504,-0.05800452,0.44720182,1.234952,0.26136097,-0.17966335,-0.002988577,0.61995935,-0.24467465,-0.06542288,-0.10929164,-0.25247148,-0.34462184,-0.04372844,0.30536994,0.06352043,-3.4439888,0.7174165,0.21700993,-0.74596703,-0.02436735,-0.1965301,-0.11611959,-0.6180924,0.18903497,-0.044823177,-0.78377825,0.9992074,0.7204637,-1.018795,0.24259819,0.26241738,0.71519196,-0.056704037,0.3214574,1.0126419,-0.3816996,0.19416338,-1.0504618,0.5837887,-0.45761284,-0.041342944,0.044106256,0.09262079,0.13525055,-0.5482912,-0.00019433163,-0.11295105,-0.39098027,-0.5777057,-0.5481062,0.21999045,-0.15936601,2.8422408,0.80019397,0.2077642,-0.3285482,-1.0237343,-0.31722015,-0.8532467,-0.3007262,-0.5583755,-0.5497531,-0.047561213,-0.108288676,0.24658099,0.16036676,0.22223756,0.5257036,-0.4537774,-0.575389,0.0774444,0.37592137,0.91921204,0.009767443,-0.060128514,-0.18703139,-0.27910328,-0.2958559,0.1515292,0.08438231,0.4104749,-0.064257696,-0.63763505,0.9386971,-0.89508957,-0.9638947,0.14572594,-0.06920652,0.14926244,0.050837606,-0.565508,-0.118247874,-0.44556957,-0.34451056,-1.8896232,0.85709465,0.5051772,0.5639328,0.96063703,-0.10398855,-0.1424489,-0.36340132,0.54609245,-0.12384151,0.21497999,-0.45669198,0.52929,0.4223799,-0.11460344,-0.122996174,-0.166623,0.087036274,-0.18353695,-0.35434458,0.113860786,0.65662843,0.23493981,-0.2713947,-0.4281857,0.3266951,0.7084959,-0.024459317,-0.07877298,0.7143753,0.14731333,-0.48049852,0.7254837,0.24513422,-0.054967947,0.01897259,0.10359511,0.29968926,-0.76801276,0.79415053,0.809134,-0.15827884,-0.6663613,0.17736472,0.63871837,0.1946787,-0.33553472,1.2522476,0.4795199,-0.49924162,1.6452429,-0.8945019,-1.4492631,0.095773175,-0.23259237,-0.28094348,0.63784915,0.683028,-0.042965755,-0.7615802,-0.21412589,-0.051427986,-0.09559578,0.42753083,0.039896064,0.15724176,-0.5159093,0.07113676,-0.64087176,0.1296175,-0.25358164,-0.12318501,0.06855747,0.60574794,-0.116952226,-0.19015035,-0.08382109,-0.16316505,0.28837523,-0.07065154,-0.020715445,-0.15442558,-0.6647575,-0.22111298,0.5690165,-0.9429492,0.29109824,-0.21969135,-0.26837555,1.0582712,1.1552417,0.44249675,0.70338833,1.2416098,-0.17338353,-0.8948746,1.0502487,0.42448974,-0.017904958,0.43834543,-0.039606214,-0.20880365,0.27866495,-0.17466074,0.18515173,0.23095343,-0.030884564,0.08141043,1.4430072,1.1376486,0.53613025,-0.2366021,0.34702548,0.030587671,-0.44374648,-1.2675188,-0.11138431,-0.339154,0.60913414,0.50010306,-0.31321654,1.0176988,0.5499899,0.080315925,-0.3171413,-0.8770165,-0.63169575,-0.18153813,-0.00763759,-0.86662555,0.22710544,-0.6306354,-0.34014967,-0.2009951,-0.24473186,0.29777953,0.4450379,-0.41532865,-0.38763383,-0.1695514,0.11756535,0.6374901,0.1111707,-0.2927736,-0.95100373,-0.085079,-0.76878,-0.5930545,0.3108728,0.19680336,-0.83715355,-0.6372137,-0.0524932,1.5352126,0.37868422,0.21009241,0.3811208,0.2817881,0.5902789,0.00004694611,0.090835646,-0.32211965,-0.40693212,-0.8613461,-0.44002575,0.20879349,-0.25120696,-0.27142256,0.32465765,-0.48586708,0.11979771,0.32263827,-0.45627564,0.54997385,-0.4462748,0.65437293,0.5738947,0.3156873,-1.9321,0.02173773,-0.13883269,0.4723531,-0.047878757,-1.1881952,0.379251,-0.55044246,-0.594921,-0.6036093,0.8095113,0.033107758,-0.19005199,0.21288945,-0.4164763,0.60610926,0.48504293,0.040338136,-0.41419882,-0.84944075,-0.07099132,0.4641935,2.054265,0.0036511272,0.17068133,0.22921714,0.4635803,-0.6021989,-1.7566532,0.36086866,-0.13427743,-0.119817354,0.7721548,0.33452892,0.24904981,0.2719462,1.1957556,-0.48627308,-0.2760353,-0.9714952,1.423162,0.22687478,0.25706276,-0.5673453,-0.30074564,0.03861826,0.46557784,0.71225953,-0.040022623,-0.18835677,-0.012464032,-0.13759041,0.31895515,0.4125949,0.5486704,0.15159258,0.14480522,0.27187392,0.35092625,0.8843945,0.6669177,0.5371572,1.1669174,-0.2080658,0.19059417],"result":{"type":"object","properties":{"emails":{"description":"A list of email objects","items":{"properties":{"date":{"description":"The date and time the email was sent","format":"date-time","type":"string"},"sender":{"description":"The sender of the email","type":"string"},"subject":{"description":"The subject of the email","type":"string"},"text":{"description":"The text content of the email","type":"string"}},"required":["subject","date","sender","text"],"type":"object"},"type":"array"},"login_status":{"description":"Indicates if login was successful or not","type":"string"}},"required":["emails","login_status"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null},false]}