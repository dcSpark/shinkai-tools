{"type":"Deno","content":[{"name":"Wikimedia Historical Events","tool_router_key":"local:::__official_shinkai:::wikimedia_historical_events","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import axios from 'npm:axios';\n\ntype Configurations = {\n  project?: string;\n  language?: string;\n};\n\ntype Parameters = {\n  date?: string;\n  type?: 'all' | 'events' | 'births' | 'deaths' | 'holidays';\n};\n\ntype HistoricalEvent = {\n  text: string;\n  year: string;\n  links: Array<{\n    title: string;\n    url: string;\n  }>;\n};\n\ntype Result = {\n  events: {\n    selected_date: string;\n    events?: HistoricalEvent[];\n    births?: HistoricalEvent[];\n    deaths?: HistoricalEvent[];\n    holidays?: HistoricalEvent[];\n  };\n};\n\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (\n  config: C,\n  inputs: I\n) => Promise<R>;\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters\n): Promise<Result> => {\n  try {\n    const project = configurations?.project || 'wikipedia';\n    const language = configurations?.language || 'en';\n    const type = params.type || 'all';\n\n    // Parse and format the date\n    let month: string;\n    let day: string;\n    \n    if (params.date) {\n      const d = new Date(params.date);\n      month = String(d.getMonth() + 1).padStart(2, '0');\n      day = String(d.getDate()).padStart(2, '0');\n    } else {\n      const d = new Date();\n      month = String(d.getMonth() + 1).padStart(2, '0');\n      day = String(d.getDate()).padStart(2, '0');\n    }\n    \n    const api_url = `https://api.wikimedia.org/feed/v1/${project}/${language}/onthisday/${type}/${month}/${day}`;\n    \n    const response = await axios.get(api_url, {\n      headers: {\n        'User-Agent': 'ShinkaiWikimediaHistoricalEvents/1.0',\n        'Accept': 'application/json',\n        'Api-User-Agent': 'ShinkaiWikimediaHistoricalEvents/1.0 (https://github.com/dcSpark/shinkai-tools)'\n      }\n    });\n\n    if (!response.data) {\n      throw new Error('No data received from Wikimedia API');\n    }\n\n    const formatEvents = (events: any[]): HistoricalEvent[] => {\n      if (!Array.isArray(events)) return [];\n      return events.map(event => ({\n        text: event.text || '',\n        year: (event.year || '').toString(),\n        links: (event.pages || []).map((page: any) => ({\n          title: page.title || '',\n          url: `https://${language}.${project}.org/wiki/${encodeURIComponent((page.title || '').replace(/ /g, '_'))}`\n        }))\n      }));\n    };\n\n    const result: Result = {\n      events: {\n        selected_date: params.date || new Date().toISOString().split('T')[0]\n      }\n    };\n\n    if (type === 'all' || type === 'events') {\n      result.events.events = formatEvents(response.data.events || []);\n    }\n    if (type === 'all' || type === 'births') {\n      result.events.births = formatEvents(response.data.births || []);\n    }\n    if (type === 'all' || type === 'deaths') {\n      result.events.deaths = formatEvents(response.data.deaths || []);\n    }\n    if (type === 'all' || type === 'holidays') {\n      result.events.holidays = formatEvents(response.data.holidays || []);\n    }\n\n    return result;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 404) {\n        throw new Error(`No historical events found for the specified date`);\n      }\n      throw new Error(`Failed to fetch historical events: ${error.response?.data?.detail || error.response?.data?.message || error.message}`);\n    }\n    throw error;\n  }\n};\n","tools":[],"config":[{"BasicConfig":{"key_name":"project","description":"Wikimedia project (e.g., wikipedia)","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"language","description":"Language code (e.g., en)","required":false,"type":null,"key_value":null}}],"description":"Get historical events, births, deaths, and holidays for a specific date from Wikimedia","keywords":["wikimedia","history","wikipedia","events","onthisday","births","deaths","holidays"],"input_args":{"type":"object","properties":{"type":{"type":"string","description":"Type of historical events to fetch","default":"all"},"date":{"type":"string","description":"Date in YYYY-MM-DD format (defaults to current date)"}},"required":["date"]},"output_arg":{"json":""},"activated":false,"embedding":[0.2947821,1.0117587,-0.6199678,0.3338055,-0.053882,0.026780285,-0.737797,-0.8363087,-0.008410734,0.21163967,-0.050278857,0.19740404,0.11390616,0.2991095,0.7208628,-0.13946292,-0.18993264,0.5581109,-2.0742757,-0.5339687,0.31598866,0.9951764,0.36257753,0.4072848,0.047570914,-0.28245437,0.23687932,0.007608533,-0.35533452,-1.2460022,0.25815699,-0.13691697,-0.2976216,0.22440055,-0.5514404,-0.47609752,0.07418706,0.2804089,-0.54715115,0.0074673146,0.011021556,0.75248367,-0.3567922,-0.046410434,-0.61053437,-0.122488394,-0.03222996,-0.112716466,0.6484735,0.21742846,-0.5989161,-0.11214694,-0.24454477,0.97148025,0.023303077,0.31752583,-0.34114626,-0.55684495,-0.06911804,0.71343786,0.17705539,0.5671104,-3.748732,-0.3464199,1.163185,0.24755889,-0.54436815,0.036643896,-0.07323054,0.6950209,-0.12824579,0.1883371,-0.39876854,0.19852576,-0.21761853,-0.0642344,0.25639075,0.2042788,0.26967072,0.15493302,-0.29725403,0.17409955,-0.25958022,0.21274151,-0.18650295,0.44540253,-0.38557622,-0.9179766,0.24380974,-0.09974422,-0.24607107,-0.14512491,0.9071614,-0.270963,-0.64706576,0.25914884,0.2924221,0.46543646,0.40937585,3.41294,0.96764266,0.22244073,0.8899979,-0.62502164,0.24194032,-0.33214954,-0.4741009,0.4717408,-0.08912657,0.13071151,0.51167923,-0.5098251,0.013724461,0.10918052,0.37861115,0.8475223,-1.2596828,0.22609967,-0.6137593,-0.19443268,-0.21475597,-0.09514749,-0.3305485,-0.28940156,0.34839368,-0.5438614,0.16788211,0.16372216,0.2994494,0.15572046,0.7757457,-0.12634997,-1.1424947,0.22460279,-0.49543768,-0.14742231,-0.36031842,-0.50777256,0.08528303,-0.9059248,-0.12664235,-1.7803096,0.9330697,0.12653886,0.56743026,0.74161696,-0.04788696,0.1973818,-0.35061347,0.13081245,0.3244143,-0.2834804,0.16524021,0.3103002,0.9692439,-0.23193914,0.0067306347,0.38427803,-0.49259478,0.4054887,0.3625965,-0.60851467,0.87149584,1.0578816,-0.2450563,-0.4613745,0.36447558,-0.043454193,0.74878037,-0.39360914,-0.17536417,-0.5406103,0.082967855,0.44249332,0.33734486,-0.39610708,-0.22149073,0.2634511,0.07908342,-0.48354486,-0.50976074,0.57214445,-0.26585966,-0.22044823,0.22613193,0.32894167,0.4744014,-0.07291811,0.7187355,0.9630891,-0.009745792,2.029119,-1.1460086,-0.37179902,0.28239205,0.2598446,-0.25564945,0.7629462,0.669148,0.30099627,0.2453866,-0.14019993,-0.07665022,-0.23966399,0.3491359,-0.020840876,0.25719744,-0.31738776,-0.4898547,-0.6454877,-0.27867544,0.41345364,0.69261205,0.32516468,0.31187648,0.83122665,-0.31874055,-0.24465492,0.2077611,0.9294374,0.098675065,0.18398626,-0.080660075,-0.3547292,-0.95617604,-0.21113975,-0.40414816,-0.3015864,-0.21502252,-0.36953205,0.38674867,0.25506735,-0.19314942,0.7803047,0.88888943,-0.12770402,-0.3793953,0.16908884,0.37237394,-1.1681474,0.4005956,0.3972687,-0.30601236,-0.20279416,-0.11684847,-0.46718898,-0.09118974,0.18054536,-0.19150293,1.1360521,0.7008399,-0.14115463,1.0696608,-0.19082952,0.12768602,0.01812172,-1.7488714,-0.46946684,-0.4484176,0.67703146,-0.03340113,-0.4782756,0.38791963,0.021160621,0.082863376,-0.19766767,-0.6156933,-0.3098027,-0.07020613,-0.29652908,-0.20011923,0.5346555,-0.9867637,0.59193826,0.08632039,-0.18205664,0.3411498,-0.131946,-0.042087525,-0.060259633,0.090513006,-0.20992643,0.8902803,0.24632157,-0.5573881,-0.4362496,-0.04637517,-0.07498508,-0.61828506,0.29569203,0.009856075,-0.68003154,0.104700714,-0.11832982,2.5110571,-0.34809315,0.8322499,0.5987177,-0.040826157,-0.2341805,-0.66503793,0.42123947,-0.4140019,0.09266384,-0.7065896,-1.030529,0.16076252,-0.3269893,-0.6455302,0.5043056,-0.74615484,0.4044621,0.40453035,0.07744479,0.07653064,-0.6653844,0.45765492,0.29306805,-0.31255862,-2.2842088,-0.0775399,0.4719706,1.0050218,-0.31106207,-0.3598948,0.14947942,-0.18548375,0.51687396,-0.12295966,1.3508404,-0.2488889,0.3519812,-0.7514137,0.21575007,1.2702657,-0.32624415,0.21975783,-0.3038278,-1.2908138,-0.116054535,0.436533,1.0532715,0.063992515,0.7465564,-0.13632666,0.33045983,-0.35953212,-1.0266559,-0.017926842,0.5075991,-0.16296773,0.21645142,-0.03365551,-0.25181985,-0.33493418,0.33300668,-0.2689737,0.21716163,-0.4208796,1.2283833,-0.2434133,-0.2167455,-0.5625417,-0.38331357,-0.04510361,0.013412833,0.09713365,0.18424457,0.10156864,0.1158521,0.41664654,-0.6636829,0.30214125,0.08234666,0.21109661,0.23234253,0.250399,0.5942359,1.1258764,-0.0677308,-0.30129662,0.0468928,-0.93205345,-0.8103054],"result":{"type":"object","properties":{"events":{"properties":{"births":{"$ref":"#/result/properties/events/properties/events"},"deaths":{"$ref":"#/result/properties/events/properties/events"},"events":{"items":{"properties":{"links":{"items":{"properties":{"title":{"type":"string"},"url":{"type":"string"}},"required":["title","url"],"type":"object"},"type":"array"},"required":["text","year","links"],"text":{"type":"string"},"year":{"type":"string"}},"type":"object"},"type":"array"},"holidays":{"$ref":"#/result/properties/events/properties/events"},"selected_date":{"type":"string"}},"required":["selected_date","events","births","deaths","holidays"],"type":"object"}},"required":["events"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}