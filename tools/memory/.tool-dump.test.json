{"type":"Deno","content":[{"name":"Memory Management","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { shinkaiSqliteQueryExecutor as shinkaiSqliteQueryExecutor_ } from './shinkai-local-tools.ts';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\n\nconst shinkaiSqliteQueryExecutor = (params: any) => {\n  console.log('shinkaiSqliteQueryExecutor', params);\n  return shinkaiSqliteQueryExecutor_(params);\n}\n\ntype CONFIG = {};\ntype INPUTS = {\n  data?: string;\n  general_prompt?: string;\n  specific_prompt?: string;\n  key?: string;\n};\ntype OUTPUT = {\n  generalMemory: string;\n  specificMemory: string;\n};\n\nconst createTable = async (): Promise<void> => {\n  // Create table if not exists\n  const createTableQuery = `\n        CREATE TABLE IF NOT EXISTS memory_table (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            date DATETIME DEFAULT CURRENT_TIMESTAMP,\n            key TEXT,\n            memory TEXT\n        );\n    `;\n  await shinkaiSqliteQueryExecutor({ query: createTableQuery });\n}\n\nconst getGeneralMemory = async (): Promise<null | {id: number, key: string, memory: string}> => {\n  const fetchGeneralMemoryQuery = `\n      SELECT id, key, memory\n      FROM memory_table\n      where key is null\n    `;\n  const fetchGeneralMemory = await shinkaiSqliteQueryExecutor({ query: fetchGeneralMemoryQuery });\n\n  if (fetchGeneralMemory.result.length) {\n    return fetchGeneralMemory.result[0];\n  }\n  return null;\n}\n\nconst getSpecificMemory = async (key: string): Promise<null | {id: number, key: string, memory: string}> => {\n  const fetchSpecificMemoryQuery = `\n      SELECT id, key, memory\n      FROM memory_table\n      where key = ?\n    `;\n  const fetchSpecificMemory = await shinkaiSqliteQueryExecutor({ query: fetchSpecificMemoryQuery, params: [key] });\n\n  if (fetchSpecificMemory.result.length) {\n    return fetchSpecificMemory.result[0];\n  }\n  return null;\n}\n\nconst generatePrompt = async (\n  previousMemory: null | {id: number, key: string, memory: string},\n  general_prompt: string,\n  data: string): Promise<string> => {\n    let generalPrompt = `\n* You must generate memories, so we can recall new and past interactions.\n* Retrive past memories if there are any, and merge them with the new data.\n* We should merge new and past interactions, into a single memory.\n* We can restructure the memory to make it consistent and ordered.\n* Keep the most important information only.\n* Based on the rules tag, you must generate the output.\n\nUse \"##\" to write and identify main topics\nUse \"#\" to identify titles of definitions\n\nOnly output the new memory, without comments, suggestions or how it was generated.\n\nThis is an example on how to structure the memory, not the fields you must use.\n\\`\\`\\`\n# Location\n## NY: Latitude: 40.7128, Longitude: -74.0060\n## CO: Latitude: -33.4569, Longitude: -70.6483\n- CO has borders with Per√∫ and Bolivia\n\n# Known People\n## John: 30 years old\n## Jane: 25 years old\n## Peter: is from Europe.\n- John and Jane are friends \n\\`\\`\\`\n\nThese are some sections you must understand:\n  * rules tag: has the rules you must follow to generate the output.\\n`;\n    if (previousMemory) generalPrompt  += `. * previous_interactions tag: has entire previous interaction memory\\n`;\n    generalPrompt += `. * input tag: has the new data to for creating new memories.\n\n<rules>\n  ${general_prompt}\n</rules>\n    `\n    if (previousMemory)\n      generalPrompt += `\n<previous_interactions>\n  ${previousMemory.memory}\n</previous_interactions>\n      `;\n\n    generalPrompt += `\n<input>\n  ${data}\n</input>\n    `;\n  return generalPrompt;\n}\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const {\n    data,\n    general_prompt = 'Synthesize important information to remember from this interaction',\n    specific_prompt = 'Synthesize important information to remember from this interaction',\n    key\n  } = inputs;\n\n  await createTable();\n  // If no data provided, just return existing memories\n  if (!data) {\n    const existingGeneralMemory = await getGeneralMemory();\n    const existingSpecificMemory = key ? await getSpecificMemory(key) : null;\n\n    return {\n      generalMemory: existingGeneralMemory?.memory || '',\n      specificMemory: existingSpecificMemory?.memory || ''\n    };\n  }\n\n  if (!key) {\n      // Update General Memory\n    const previousGeneralMemory = await getGeneralMemory();\n    const generalPrompt = await generatePrompt(previousGeneralMemory, general_prompt, data);\n    const generalResponse = await shinkaiLlmPromptProcessor({ format: 'text', prompt: generalPrompt });\n    const generalMemory = generalResponse.message;\n\n    if (previousGeneralMemory) {\n      const generalUpdateQuery = `\n              UPDATE memory_table SET memory = ?\n              WHERE id = ?\n          `;\n      await shinkaiSqliteQueryExecutor({\n        query: generalUpdateQuery, params: [generalMemory, \"\"+ previousGeneralMemory.id]\n      });\n    } else {\n      const generalInsertQuery = `\n            INSERT INTO memory_table (memory)\n            VALUES (?);\n        `;\n        await shinkaiSqliteQueryExecutor({ query: generalInsertQuery, params: [generalMemory]});\n    }\n    return {generalMemory, specificMemory: ''};\n  } else {\n      // Update specific memory\n    const previousSpecificMemory = await getSpecificMemory(key);\n    const specificPrompt = await generatePrompt(previousSpecificMemory, specific_prompt, data);\n    const specificResponse = await shinkaiLlmPromptProcessor({ format: 'text', prompt: specificPrompt });\n    const specificMemory = specificResponse.message;\n\n    if (previousSpecificMemory) {\n      const specificUpdateQuery = `\n            UPDATE memory_table SET memory = ?\n            WHERE id = ?\n        `;\n      await shinkaiSqliteQueryExecutor({\n        query: specificUpdateQuery,\n        params: [specificMemory, \"\"+previousSpecificMemory.id]\n      });\n    } else {\n      const specificInsertQuery = `\n            INSERT INTO memory_table (key, memory)\n            VALUES (?, ?);\n        `;\n      await shinkaiSqliteQueryExecutor({\n        query: specificInsertQuery,\n        params: [key, specificMemory]\n      });\n    }\n    return {generalMemory: '', specificMemory};\n  }\n}","tools":["local:::__official_shinkai:::shinkai_sqlite_query_executor","local:::__official_shinkai:::shinkai_llm_prompt_processor"],"config":[],"description":"Handles memory storage and retrieval using a SQLite database.","keywords":["memory","remember","management","recall","smart","agent"],"input_args":{"type":"object","properties":{"key":{"type":"string","description":"The key for specific memory retrieval"},"general_prompt":{"type":"string","description":"The general prompt for generating memories"},"specific_prompt":{"type":"string","description":"The specific prompt for generating memories"},"data":{"type":"string","description":"The data to process for memory management, if not provided, the tool will return existing memories"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.111937836,0.74089676,-0.12515827,-0.4942115,-0.25368002,-0.056685545,-0.809049,0.13576964,0.24071948,-0.02976514,-0.47945547,0.99631506,-0.08526395,-0.08666597,0.4112748,-0.34366244,0.28832552,0.8723968,-1.8125455,-0.06927829,0.3785739,0.44344294,0.07779312,-0.13623443,-0.198864,0.104956515,0.07281388,-0.64128476,-0.8674953,-2.212524,0.23000515,0.8036334,-0.32317746,0.08531259,0.06165708,-0.5280139,-0.27165845,0.2298748,-1.0989754,-0.4352798,0.060814954,0.20959929,-0.6922089,0.14129707,0.3951045,-0.2094253,0.28318685,0.03080573,0.6607957,0.44034725,-0.3435076,-0.6636055,-0.49609208,0.031462383,-0.46229592,-0.11738148,-0.2673628,-0.12942854,-0.13213739,-0.56978685,-0.49050757,-0.033710778,-3.0540113,-0.35828966,0.4477928,0.11795497,0.6029618,0.03019675,-0.13932246,-0.116601504,-0.5129008,0.22289489,0.001567632,0.43084416,0.010488745,-0.65866005,0.5444606,-0.16649291,0.5965793,-0.56898767,0.5876942,0.68564534,0.057885304,-0.11264849,-0.36528912,0.22000486,-0.5172195,-0.034327753,0.20772007,0.10029636,-0.11128229,-0.35220385,0.042001657,-0.09486667,-0.49064255,0.5016759,0.5429697,0.53100413,0.67431355,2.9295228,0.6061498,-0.0052450076,1.1123242,-0.5553272,0.58578116,-0.396771,-0.0043778606,-0.2641139,-0.18956795,-0.04787702,0.5651373,0.04069993,0.10868324,0.3633739,0.31594813,-0.14918776,-0.90317976,0.014140373,0.09339001,0.4759403,-1.2680333,0.15725,-0.8017013,-0.072784826,-0.2027275,-0.248173,-0.47450486,0.35822383,0.089721486,-0.8434949,0.17163289,-0.60608387,-1.5258477,-0.092011675,0.15190832,0.029228859,0.09951277,-1.0531722,-0.8432071,-1.2045652,0.22168328,-1.8012422,1.257536,0.3710498,0.82652575,1.064956,-0.07364569,-0.08260139,-0.32399875,-0.2577161,0.35024714,0.3111611,0.20929018,-0.17805251,0.8778527,-0.086034104,0.20599265,0.22164212,-0.5891931,-0.16454726,-0.681477,-0.039246723,0.36468878,0.25415224,0.87371546,-1.1239837,-0.07615483,-0.40367773,0.4243997,-0.22388089,-0.036021143,0.070409395,0.051366255,0.23837432,0.1067911,-0.5528012,0.23844612,0.0024840161,-0.080963686,-0.751668,-0.0518061,0.65869457,-0.27564827,-0.7393524,-0.30968362,-0.65195227,0.98374283,-0.09401393,0.04650405,0.98091817,-0.44676092,1.0435079,-0.8741324,0.5287304,-0.24334532,-0.3493321,-0.09778318,0.6641216,0.6423144,-0.56234205,-0.34151262,-0.6116001,-0.15467788,0.09333934,0.65145075,-0.36601484,-0.3339522,0.050637126,0.41447765,-0.524192,-0.22862165,-0.5204915,0.31959406,0.34199706,0.31173804,0.29922813,0.04193517,0.65267223,0.23422848,0.9934678,0.8802714,-0.06621673,0.4821114,-0.5185084,-0.2266081,-0.7151844,-0.047955215,-0.44060528,-0.43365583,-0.5805751,0.23047966,0.8946043,0.8859454,0.15834664,0.5712067,0.035358794,0.26624507,0.36157402,0.4208076,-0.784662,0.5708339,0.2283394,-0.415547,-0.34696782,0.041988354,-0.25026345,0.35980847,0.3587914,0.43452892,1.2345545,0.8542529,0.43813187,-0.117733255,0.3318603,0.37991884,0.049697533,-1.7096437,0.12233965,-0.33652085,0.3047968,0.4880944,0.005683899,0.48125106,1.0229537,0.42820078,0.1880018,-0.9280594,0.3796176,0.1298208,-0.008567318,-0.70267904,1.1864583,-0.43549532,-0.4198141,-0.07940441,-0.76350194,0.7171461,-0.42064208,-0.34265658,-0.36742902,0.12565221,0.12214184,0.9031202,-0.023328215,-0.048132613,-0.167081,-0.33202252,0.27307153,0.20823562,0.9203475,-0.19106463,-0.35383615,-0.7042749,0.85880107,1.4127065,1.3556606,0.24954379,0.52383125,0.82653356,-0.12702428,0.067642696,0.41572976,-0.33709046,0.09285276,-0.18625477,0.002191268,0.55797386,0.38143012,-0.35884345,0.2095905,-1.2938337,0.13288312,0.13235816,-0.22439846,0.3647071,-0.53730625,0.47953555,1.4558412,-0.17408374,-2.000823,-0.6611798,0.23612174,-0.14356868,-0.20251471,-0.13713701,0.20885682,-0.7435712,0.25030732,0.543007,1.3142625,0.44838735,-0.8564536,-0.75826186,-0.43299165,0.9422145,0.4068938,0.554768,-0.13111398,-0.42246768,-0.07616982,0.5571903,1.2492561,0.48375618,0.051635597,-0.21371765,0.35021627,-0.5410304,-1.1716174,0.5095912,-0.62912905,-0.37279865,0.41224012,0.59948826,-0.3992,0.7356437,1.1001694,0.24999188,0.24701267,-1.1759105,1.4969252,-0.020239882,-0.31295842,-0.93301684,0.77810735,-0.3480711,-0.41037232,0.65593684,-0.14069337,-0.28005433,-0.22853693,-0.022693757,-0.26941186,0.16493139,0.45033836,0.60703117,0.5285942,0.12087938,0.25766528,-0.34744433,0.104460105,1.0776262,0.4048118,-1.3009826,-0.40838832],"result":{"type":"object","properties":{"generalMemory":{"description":"The updated general memory","nullable":true,"type":"string"},"specificMemory":{"description":"The updated specific memory","nullable":true,"type":"string"}},"required":[]},"sql_tables":[{"name":"memory_table","definition":"CREATE TABLE IF NOT EXISTS memory_table (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATETIME DEFAULT CURRENT_TIMESTAMP, key TEXT, memory TEXT)"}],"sql_queries":[{"name":"Get general memory","query":"SELECT id, key, memory FROM memory_table WHERE key IS NULL"},{"name":"Get specific memory","query":"SELECT id, key, memory FROM memory_table WHERE key = ?"},{"name":"Update memory","query":"UPDATE memory_table SET memory = ? WHERE id = ?"}],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}