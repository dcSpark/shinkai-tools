{"type":"Deno","content":[{"name":"X/Twitter Search","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"type CONFIG = {\n    apiKey: string;\n};\n\ntype INPUTS = {\n    command: 'search-top' | 'search-suggestions' | 'search-latest' | 'get-user-posts' | 'get-post-by-id';\n    searchQuery?: string;\n    username?: string;\n    tweetId?: string;\n};\n\ntype OUTPUT = {\n    data: any;\n};\n\nconst baseUrl = 'https://twttrapi.p.rapidapi.com';\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n    const { apiKey } = config;\n    let url: string;\n\n    switch (inputs.command) {\n        case 'search-top':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-top command.');\n            }\n            url = `${baseUrl}/search-top?query=${inputs.searchQuery}`;\n            break;\n        case 'search-suggestions':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-suggestions command.');\n            }\n            url = `${baseUrl}/search-suggestions?query=${inputs.searchQuery}`;\n            break;\n        case 'search-latest':\n            if (!inputs.searchQuery) {\n                throw new Error('\"searchQuery\" is required for search-latest command.');\n            }\n            url = `${baseUrl}/search-latest?query=${inputs.searchQuery}`;\n            break;\n        case 'get-user-posts':\n            if (!inputs.username) {\n                throw new Error('\"username\" is required for get-user-posts command.');\n            }\n            url = `${baseUrl}/user-tweets?username=${inputs.username}`;\n            break;\n        case 'get-post-by-id':\n            if (!inputs.tweetId) {\n                throw new Error('\"tweetId\" is required for get-post-by-id command.');\n            }\n            url = `${baseUrl}/get-tweet?tweet_id=${inputs.tweetId}`;\n            break;\n        default:\n            throw new Error('Invalid command provided.');\n    }\n\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'x-rapidapi-host': 'twttrapi.p.rapidapi.com',\n            'x-rapidapi-key': apiKey,\n        },\n    });\n\n    const data = await response.json();\n    return { data };\n}","tools":[],"config":[{"BasicConfig":{"key_name":"apiKey","description":"Get your API Key from https://rapidapi.com/twttrapi-twttrapi-default/api/twttrapi","required":true,"type":null,"key_value":null}}],"description":"Fetch from X/Twitter API to perform various search and retrieval operations.","keywords":["X","Twitter","API","search","tweets"],"input_args":{"type":"object","properties":{"tweetId":{"type":"string","description":"The ID of the tweet to retrieve"},"searchQuery":{"type":"string","description":"The search query for fetching tweets"},"username":{"type":"string","description":"The username for retrieving user posts"},"command":{"type":"string","description":"The exact command to execute: 'search-top' | 'search-suggestions' | 'search-latest' | 'get-user-posts' | 'get-post-by-id'"}},"required":["command"]},"output_arg":{"json":""},"activated":false,"embedding":[0.4305395,0.21161558,-0.054379616,-0.33275563,-0.014889535,-0.24782008,-0.90531313,-0.32333744,0.4141684,0.055562824,-0.4773929,0.5254866,-0.18077579,0.105664924,0.59022623,-0.05651185,0.19218309,-0.7971532,-1.8149972,-0.08281133,0.68683076,0.7954718,0.099625275,-0.108473554,-0.1005299,0.087269515,0.034634497,-0.6155523,-1.4184258,-1.9103004,0.5250585,0.86915654,-0.24549824,-0.12609054,-0.13757977,-0.29473704,-0.27303025,0.03950656,-0.16738541,0.26541728,-0.49252948,0.080321305,-0.6782323,0.1978963,-0.29802135,-0.58235973,-0.20508899,0.07515404,0.41780794,0.8870211,-0.07349146,-0.5924805,0.24697949,0.52923,-0.5296778,-0.53161633,-0.51090705,-0.24211425,-0.19071935,-0.055604413,0.37459677,0.16693074,-4.0099473,-0.075569734,0.03269406,-0.32891858,-0.09716503,0.09086436,0.27557212,0.3017307,0.17383517,0.047080986,0.04623566,-0.18046692,-0.03312591,-0.6932751,0.5152521,-0.30796668,0.54600745,0.18066728,0.5624121,0.5407586,-0.22822909,0.21861355,-0.16286518,0.81331044,-0.6931765,-0.44528013,0.37640795,0.36717787,-0.41019326,-0.30773917,0.28050837,-0.0075391605,-0.31364727,0.52060276,-0.01723611,0.26166284,0.17223817,3.0515094,0.73916817,0.07563284,0.26117337,-0.46541685,-0.23072672,-0.6290555,0.18444458,-0.095429905,0.29349327,-0.2332324,0.02632301,-0.09784512,-0.04294327,-0.014404971,-0.20085378,-0.47313946,-0.3035459,0.43723926,0.11820973,0.55901974,-0.57106805,0.45089084,-0.89362127,0.009699905,-0.53104395,0.1694082,-0.47288346,0.21489863,0.48888576,-0.4807912,1.0343188,-0.9717409,-0.9682214,-0.006101787,0.028445525,0.47166696,-0.16856591,-0.8540756,0.10560629,-1.1182886,0.33865392,-1.9562331,0.78074235,-0.1456382,0.8146181,0.8969924,-0.1426728,-0.030428581,-0.26801687,0.37595335,0.30555713,0.2098776,-0.2812084,0.21966258,1.0510923,0.119250275,-0.36212462,-0.17218477,-0.3424542,-0.07904532,-0.2743588,0.24867262,0.6504875,-0.11154151,0.069947325,-0.530115,0.53801405,0.10475666,0.24345562,0.1628248,0.6283477,-0.15593582,-0.40392956,0.45333076,-0.5980061,-0.06538034,-0.6309892,-0.23911366,0.018270055,-0.6361934,0.35806668,1.1401247,-0.38032657,-0.35157472,-0.17966716,0.11150528,0.23859039,0.13845927,0.9673809,1.1865023,0.09924718,1.5915843,-0.34105402,-0.5540501,0.007915191,-0.5831448,-0.0937967,0.7003658,0.32573435,-0.32414836,-0.45059347,-0.19859903,-0.09218037,-0.3194951,-0.39294574,-0.047911815,0.83080596,-0.27703252,0.56204915,-0.33700043,0.29024258,-0.7375401,0.58037615,0.29593995,0.2364677,0.14352724,0.03561874,-0.25715363,-0.24014908,0.23635244,0.024785317,0.4662469,-0.34172118,-0.6021392,0.26628283,-0.26606828,-0.21809351,0.27794725,-0.36773524,-0.5457272,0.41251528,0.6967946,0.28401804,1.4062676,1.028716,0.1739777,-0.40935898,0.96179235,0.44605955,-0.28388566,0.52240616,-0.14320186,-0.07170744,-0.014521413,0.04587001,-0.5292398,-0.42694443,-0.19303913,-0.04951892,1.4963026,0.51462346,0.49251777,0.21701254,0.3692812,-0.24598286,-0.24413496,-2.4469519,-0.11862854,0.113760985,0.60287786,-0.0047191344,-0.19445395,0.50833637,-0.38627365,-0.020675784,0.26782084,-0.67571396,0.061215915,0.0893381,-0.24510577,-0.6817276,0.69578415,-0.09048663,-0.6011646,0.18511474,0.38805622,-0.20233695,0.1467492,-0.80505556,0.07766668,0.0112556815,0.22671905,0.29770273,0.019191764,-0.4233864,-0.34238496,-0.31174573,0.20092836,-0.3397,-0.0714671,0.038997605,-0.41922042,-0.47837391,0.29778928,1.6280695,0.12308958,0.41364056,0.48643476,0.0198015,0.21245195,-0.01880046,-0.1005668,-0.03396522,-0.017229676,-0.46232596,-0.60714954,0.30195248,-0.82866985,-0.15068886,0.09655322,-0.011421323,0.77326,0.4615159,-0.6936142,0.8566099,-0.88112175,-0.13071989,0.5267433,0.25013116,-2.0881298,0.46015096,0.5558711,0.113765046,-0.35318583,-0.15942149,0.4270324,-0.64221686,0.35386196,-0.2711259,1.4708389,0.22466804,-0.36959052,-0.18626876,-0.18277794,0.74121475,0.43661883,-0.5455297,-0.003586188,-0.5455888,0.012195063,0.25302714,1.692523,0.31391713,0.86765885,0.5460867,0.24891889,-0.821956,-1.3961171,0.2778523,-0.0576745,-0.48592564,0.533186,0.013116516,-0.3133303,0.60392416,1.2730868,0.040761102,-0.27108315,-0.008594063,1.8826637,0.32975915,-0.2624513,-0.5750591,0.2265515,0.1175911,0.5555191,0.08540043,-0.53372526,0.14100088,0.15635633,0.10563886,-0.41571125,-0.13679291,0.24647684,-0.0060161874,0.6203762,0.38392183,0.59179157,0.25916487,0.5881642,0.6404631,0.29455742,-0.95066553,-0.040356904],"result":{"type":"object","properties":{"data":{"description":"The data returned from the Twitter API","type":"object"}},"required":["data"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}