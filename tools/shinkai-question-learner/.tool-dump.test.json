{"type":"Deno","content":[{"name":"Shinkai Question Learner","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { downloadPages } from './shinkai-local-tools.ts';\nimport { shinkaiLlmPromptProcessor } from './shinkai-local-tools.ts';\nimport { shinkaiSqliteQueryExecutor } from './shinkai-local-tools.ts';\n\ntype CONFIG = {};\ntype INPUTS = { action: 'learn' | 'ask' | 'respond', url?: string, userResponse?: string, questionId?: number };\ntype OUTPUT = { message: string };\n\nexport async function run(_config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n    // Create the questions table if it doesn't exist\n    await shinkaiSqliteQueryExecutor({\n        query: `CREATE TABLE IF NOT EXISTS Questions (\n            ID INTEGER PRIMARY KEY AUTOINCREMENT,\n            Question TEXT NOT NULL,\n            Answer TEXT NOT NULL,\n            CorrectCount INTEGER DEFAULT 0,\n            IncorrectCount INTEGER DEFAULT 0\n        );`\n    });\n\n    if (inputs.action === 'learn' && inputs.url) {\n        const { url } = inputs;\n        const downloadResult = await downloadPages({ url });\n        const markdownContent = downloadResult.markdown; // Assuming this is the returned markdown content\n\n        // Generate questions and answers from markdown content\n        const llmResponse = await shinkaiLlmPromptProcessor({\n            prompt: `Generate questions and answers from the following content:\\n\\n${markdownContent}\\n\\nFormat your output as a JSON array of objects with \"question\" and \"answer\" keys without any formatting.`,\n            format: 'json'\n        });\n        \n        let i = 0;\n        for (const pair of JSON.parse(llmResponse.message)) {\n            const question = pair.question.trim();\n            const answer = pair.answer.trim();\n            console.log(i, question, answer);\n            i = i + 1;\n            if (question.length > 0 && answer.length > 0) {\n                await shinkaiSqliteQueryExecutor({\n                    query: `INSERT INTO Questions (Question, Answer) VALUES (?, ?)`,\n                    params: [pair.question.trim(), pair.answer.trim()]\n                });\n                await shinkaiSqliteQueryExecutor({\n                    query: `DELETE FROM Questions WHERE Question = '';`\n                });\n            }\n        }\n        \n        return { message: \"Learning completed and questions stored.\" };\n        \n    } else if (inputs.action === 'ask') {\n        const result = await shinkaiSqliteQueryExecutor({\n            query: `SELECT * FROM Questions ORDER BY CorrectCount ASC LIMIT 10`\n        });\n        const questions = result.result;\n        if (questions.length === 0) {\n            return { message: \"No questions available.\" };\n        }\n        const randomQuestion = questions[Math.floor(Math.random() * questions.length)];\n        return { message: `Question #${randomQuestion.ID}: ${randomQuestion.Question}?` };\n        \n    } else if (inputs.action === 'respond' && inputs.userResponse && inputs.questionId) {\n        const questionId = Number(inputs.questionId);\n        const result = await shinkaiSqliteQueryExecutor({\n            query: `SELECT * FROM Questions WHERE ID = ${questionId}`,\n            params: []\n        });\n\n        const question = result.result[0];\n        \n        if (!question) {\n            return { message: \"Question not found.\" };\n        }\n      \n        const llmResponse = await shinkaiLlmPromptProcessor({\n            prompt: `Check if the response ${inputs.userResponse} is an adecuate response to the question ${question.Answer}. Return CORRECT if it's correct, or INCORRECT if it's incorrect inside a JSON object with key result without any formatting, just RAW JSON.`,\n            format: 'json'\n        });\n        \n        console.log(inputs.questionId, question, llmResponse);\n        \n        const llmAnswer = JSON.parse(llmResponse.message);\n        \n        if (llmAnswer.result === \"CORRECT\") {\n            await shinkaiSqliteQueryExecutor({\n                query: `UPDATE Questions SET CorrectCount = CorrectCount + 1 WHERE ID = ${questionId}`,\n                params: []\n            });\n            return { message: \"CORRECT\" };\n        } else {\n            await shinkaiSqliteQueryExecutor({\n                query: `UPDATE Questions SET IncorrectCount = IncorrectCount + 1 WHERE ID = ${questionId}`,\n                params: []\n            });\n            return { message: \"INCORRECT\" };\n        }\n    }\n\n    return { message: \"Invalid action.\" };\n}\n","tools":["local:::__official_shinkai:::shinkai_llm_prompt_processor","local:::__official_shinkai:::shinkai_sqlite_query_executor","local:::__official_shinkai:::download_pages"],"config":[],"description":"Learns from web pages by generating questions and answers, and interacts with users based on these questions. If the action was 'ask' it returns a question, always include the question number when referencing it","keywords":[],"input_args":{"type":"object","properties":{"questionId":{"type":"number","description":"The ID of the question being asked"},"action":{"type":"string","description":"The action to perform: 'learn', 'ask', or 'respond'"},"url":{"type":"string","description":"The URL to download for learning"},"userResponse":{"type":"string","description":"The user's response to the current question"}},"required":["action"]},"output_arg":{"json":""},"activated":false,"embedding":[0.21706991,0.3584407,-0.62566733,-0.11160347,-0.67455965,-0.1561139,-1.0833845,0.75861084,-0.2857256,0.17757568,-0.38373923,0.20315388,-0.11974335,0.2774887,0.8499054,-0.3755989,0.7324438,-0.37291768,-1.8232055,0.61022794,0.11635405,0.78444594,0.52012616,0.15670744,-0.73577785,-0.18376847,0.33164066,-0.19584723,-0.7147613,-1.928544,0.7561916,0.62534314,-0.6719986,-0.24185777,-0.22565183,-0.73809016,0.80933374,0.067422345,-0.50740635,0.15074362,0.064329535,0.7656423,-0.6984089,-0.011261161,0.31263676,0.094826125,-0.38410646,-0.5978887,0.59061915,0.70000505,-0.77681756,-0.8851424,0.5290352,0.19301677,0.033826344,-0.19090153,-0.57570064,-0.116506696,-0.027560867,-0.43939397,0.5210022,0.6762746,-3.5652654,0.4498492,-0.16901934,0.10963146,-0.05926913,-0.8876597,-0.5261506,0.21232685,0.3798099,0.053473905,0.12743214,0.6351746,0.4745645,-0.45327052,0.121850535,-0.062948786,0.6063187,-0.544385,0.4749117,0.8214794,-0.013026489,0.67419004,-0.12354344,0.5572102,0.07557513,-0.16348359,0.54332525,0.58636665,-0.16053295,-0.103272974,-0.109083556,-0.4637578,-0.055400603,-0.29076737,-0.3145307,-0.14697951,-0.07649026,3.4162662,-0.010299683,-0.33792374,0.51610553,-0.96711075,0.28260836,-0.27571082,-0.12589715,-0.70793724,0.022236876,-0.27253923,0.19247256,-0.1506436,-0.29195243,0.2501807,0.70012313,0.29713976,-0.2980407,-0.18028173,0.1601712,0.59212565,-0.24332522,0.2837192,-0.45769566,-0.08940417,-0.06055177,-0.097159594,0.17039731,0.57032806,0.22197543,0.22518584,0.28747955,-0.7124402,-1.0509254,0.28376582,0.06990753,0.178911,-0.104918644,-0.6928648,0.224038,-0.88769025,-0.38745004,-0.9990925,0.79940337,0.13323304,0.45831117,0.31942293,-0.39664906,-0.23246956,-0.2825301,0.11200398,0.25427744,0.010025285,-0.0018543577,0.20967153,0.55590093,0.1852944,-0.06313523,-0.47032952,-0.08455537,0.40403044,-0.5994254,-0.691078,0.21086276,0.256006,0.28030476,-0.050527852,-0.75789934,0.21773633,0.1577397,-0.593085,0.4248397,0.32072243,-0.13944598,0.8837457,-0.13218267,-0.33781752,-0.001700677,-0.16717753,-0.3172427,-0.90718925,0.49440745,0.8165897,-0.18596362,-0.8666227,0.34760553,0.32083634,-0.22356972,-0.089780994,0.8603571,0.8974726,-1.0441595,0.77772695,-0.83273643,-0.92442864,0.10950381,-0.45605737,0.30133843,0.2978428,0.87869906,-0.20272315,-0.53605354,-0.011535779,-0.30752718,0.2915651,-0.72999215,0.30673993,0.32038337,0.42160168,-0.2243603,-1.0477458,0.2585037,-0.54573035,0.787378,0.31457478,0.67461944,0.11738212,0.7796836,0.16689157,-0.052771755,0.45646888,-0.052859403,-0.17782578,-0.0024207681,-0.64226943,-0.5612077,0.71099585,-0.54411995,0.3299234,-0.61978734,-0.094320506,-0.07824578,0.77131003,0.22146715,1.2679993,0.631575,0.16063823,-0.6480606,0.32354665,0.8975824,-0.43495348,0.16214138,0.02546177,0.39886326,0.11504981,0.16969685,-0.44520238,-0.102386385,-0.25740942,0.15395282,1.6665227,1.245787,0.6468663,0.2521198,0.6614715,0.17731339,-0.23956114,-1.579405,0.34504008,-0.6321144,0.24229479,-0.62288684,-0.655253,0.61666095,0.38716763,0.2633341,-0.19117309,-1.0421027,-0.35434997,0.15482494,-0.6180331,-0.10025748,0.9822226,-0.8385656,0.2744784,-0.018530542,-0.07341386,-0.022843184,0.13998207,-0.6072779,0.12906039,0.14181161,-0.92372197,0.07313164,0.17033282,0.095158495,-0.90499175,-0.23741168,-0.15604949,-0.3903274,0.150628,0.13685635,-0.43871364,-0.06122921,0.7305853,1.1007711,0.9084113,0.6790187,-0.22775854,-0.22765656,0.36475682,-0.15525196,0.30711335,-0.03501725,0.00081416965,-1.1288316,-0.75152034,0.134829,0.40597475,-0.10007594,0.77668124,-0.8649264,0.35869074,0.16459171,0.5272138,0.926515,-0.48629296,0.9427834,0.67841506,-0.29091206,-1.7819054,0.06876713,-0.3591036,-0.26245618,-0.019396156,0.05574575,0.64181924,-0.45325464,0.47828224,-0.2725528,0.9156376,0.38192093,-0.6386184,-0.19837987,0.093480535,0.79756224,0.2822749,-0.055174,0.2966572,-0.07618416,0.19077243,0.975749,0.6013619,0.49140128,0.9117549,0.22897574,-0.3347539,-0.7730863,-1.5366509,-0.63781154,0.2092189,-0.41901696,0.2382148,-0.25200358,-0.1483219,0.1442696,0.5860166,0.015107177,-0.11544926,0.0024682116,1.7490195,-0.40928602,-0.3117113,0.03644649,0.05633047,-0.1202318,0.23006758,0.2262583,-1.0001892,-0.12196587,0.27068874,-0.47797912,0.43436462,0.16214763,0.027078949,0.3656093,0.9179376,0.11831908,0.45551047,-0.027892262,0.24706681,1.0164907,-0.45186308,-0.32413527,-0.3631763],"result":{"type":"object","properties":{"message":{"description":"The response message after processing the action","type":"string"}},"required":["message"]},"sql_tables":[{"name":"Questions","definition":"CREATE TABLE IF NOT EXISTS Questions (ID INTEGER PRIMARY KEY AUTOINCREMENT, Question TEXT NOT NULL, Answer TEXT NOT NULL, CorrectCount INTEGER DEFAULT 0, IncorrectCount INTEGER DEFAULT 0)"}],"sql_queries":[{"name":"Insert question and answer","query":"INSERT INTO Questions (Question, Answer) VALUES (?, ?)"},{"name":"Select all questions","query":"SELECT * FROM Questions ORDER BY CorrectCount ASC LIMIT 10"},{"name":"Select question by ID","query":"SELECT * FROM Questions WHERE ID = ?"}],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}