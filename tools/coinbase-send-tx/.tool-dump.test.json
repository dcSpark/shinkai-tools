{"type":"Deno","content":[{"name":"Coinbase Transaction Sender","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { Coinbase, CoinbaseOptions, Transfer } from 'npm:@coinbase/coinbase-sdk@0.0.16';\n\ntype Configurations = {\n  name: string;\n  privateKey: string;\n  walletId?: string;\n  seed?: string;\n  useServerSigner?: string;\n};\ntype Parameters = {\n  recipient_address: string;\n  assetId: string;\n  amount: string;\n};\ntype Result = {\n  transactionHash: string;\n  transactionLink: string;\n  status: string;\n};\nexport type Run<C extends Record<string, any>, I extends Record<string, any>, R extends Record<string, any>> = (config: C, inputs: I) => Promise<R>;\n\nexport const run: Run<Configurations, Parameters, Result> = async (\n  configurations: Configurations,\n  params: Parameters,\n): Promise<Result> => {\n  const coinbaseOptions: CoinbaseOptions = {\n    apiKeyName: configurations.name,\n    privateKey: configurations.privateKey,\n    useServerSigner: configurations.useServerSigner === 'true',\n    debugging: true,\n  };\n  const coinbase = new Coinbase(coinbaseOptions);\n  console.log(`Coinbase configured: `, coinbase);\n  const user = await coinbase.getDefaultUser();\n  console.log(`User: `, user);\n\n  // Check if seed exists or useServerSigner is true, but not both\n  if (!configurations.seed && configurations.useServerSigner !== 'true') {\n    throw new Error(\n      'Either seed must be provided or useServerSigner must be true',\n    );\n  }\n  if (configurations.seed && configurations.useServerSigner === 'true') {\n    throw new Error(\n      'Both seed and useServerSigner cannot be true at the same time',\n    );\n  }\n\n  // Prioritize walletId from Params over Config\n  const walletId = configurations.walletId;\n  let wallet;\n\n  if (configurations.useServerSigner === 'true') {\n    // Use getWallet if useServerSigner is true\n    if (!walletId) {\n      throw new Error('walletId must be provided when useServerSigner is true');\n    }\n    wallet = await user.getWallet(walletId);\n    console.log(`Wallet retrieved using server signer: `, wallet.toString());\n  } else {\n    if (walletId) {\n      // Retrieve existing Wallet using walletId\n      wallet = await user.importWallet({\n        walletId,\n        // it's not going to be empty but to quiet the type error\n        seed: configurations.seed || '',\n      });\n      console.log(`Wallet retrieved: `, wallet.toString());\n    } else {\n      // Create a new Wallet for the User\n      wallet = await user.createWallet({\n        networkId: Coinbase.networks.BaseSepolia,\n      });\n      console.log(`Wallet successfully created: `, wallet.toString());\n    }\n  }\n\n  // Retrieve the list of balances for the wallet\n  let balances = await wallet.listBalances();\n  console.log(`Balances: `, balances);\n\n  // If no balances, call the faucet and then list balances again\n  if (balances.size === 0) {\n    const faucetTransaction = await wallet.faucet();\n    console.log(\n      `Faucet transaction completed successfully: `,\n      faucetTransaction.toString(),\n    );\n\n    // Retrieve the list of balances again\n    balances = await wallet.listBalances();\n    console.log(`Balances after faucet: `, balances);\n  }\n\n  // Convert amount from string to number\n  const amount = parseFloat(params.amount);\n  if (isNaN(amount)) {\n    throw new Error('Invalid amount provided');\n  }\n\n  // Convert assetId to have only the first letter capitalized\n  const formattedAssetId = params.assetId.toLowerCase();\n\n  // Create and send the transfer\n  let transfer: Transfer;\n  try {\n    transfer = await wallet.createTransfer({\n      amount,\n      assetId: Coinbase.toAssetId(formattedAssetId),\n      destination: params.recipient_address,\n      // gasless: true,\n    });\n    console.log(`Transfer successfully completed: `, transfer.toString());\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error('Error during transfer:', error);\n      throw new Error(`Transfer failed: ${error.message}`);\n    } else {\n      console.error('Unknown error during transfer:', error);\n      throw new Error('Transfer failed due to an unknown error');\n    }\n  }\n\n  return {\n    transactionHash: transfer.getTransactionHash() || '',\n    transactionLink: transfer.getTransactionLink() || '',\n    status: transfer.getStatus() || '',\n  };\n};\n","tools":[],"config":[{"BasicConfig":{"key_name":"name","description":"The name of the Coinbase wallet","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"privateKey","description":"The private key of the Coinbase wallet","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"walletId","description":"Optional wallet ID for specific wallet selection","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"seed","description":"Optional seed phrase for wallet recovery","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"useServerSigner","description":"Optional flag to use server-side signing","required":false,"type":null,"key_value":null}}],"description":"Tool for restoring a Coinbase wallet and sending a transaction","keywords":["coinbase","transaction","shinkai"],"input_args":{"type":"object","properties":{"assetId":{"type":"string","description":"The ID of the asset/token to send"},"recipient_address":{"type":"string","description":"The destination address for the transaction"},"amount":{"type":"string","description":"The amount of tokens to send"}},"required":["recipient_address","assetId","amount"]},"output_arg":{"json":""},"activated":false,"embedding":[-0.106319636,0.31205156,-0.2096603,-0.19719692,-0.28273338,-0.14202121,0.18417066,0.60535425,0.00690127,-0.23620136,-0.21505071,0.06602907,-0.088175476,0.33536273,0.05256945,-0.86206126,0.19151443,-0.54276013,-1.4287505,0.26882884,0.0708569,0.7486346,-0.6611768,0.32861298,-0.3728812,-0.09207104,0.04998352,-0.2763205,-1.333079,-2.5482292,0.22387576,1.3726783,-0.7585384,-0.26376712,0.025733612,-0.15745492,0.19394219,0.593534,-0.8159452,-0.44008702,0.3563952,-0.21258529,-0.7844923,0.124880366,-0.07409738,-0.5271723,0.36903447,-0.42957762,0.3134218,0.4883917,-0.2020213,0.14483216,0.46553084,-0.047665067,-0.111451976,-0.044509906,-0.08733132,-0.40066934,0.06434033,0.3733164,-0.293132,0.20150483,-3.8115027,0.24865933,1.1510297,-0.3543125,0.35783124,0.32005996,-0.39655927,0.40630358,-0.045970157,-0.27967253,-0.48354727,0.34714818,0.7759413,-0.38806108,0.63937473,0.44929722,0.4184423,-0.0729208,-0.029760893,0.96891737,0.058310762,0.15554212,-0.7846201,0.35090122,0.08179099,-0.35870063,0.051579237,0.14201005,0.08009988,0.25758868,0.29499155,-0.4330181,-0.3238939,-0.18471333,0.117309704,1.0828972,0.1328495,2.9924862,0.29244542,0.50451684,0.3039102,-0.8704654,0.56029063,-0.48561347,-0.20821774,-0.6675199,0.04772557,-0.25343218,0.8753932,-0.24772224,0.7375722,0.035266988,0.15117314,0.2445937,-0.48004895,-0.11649853,-0.32646132,0.5968574,-0.62031114,0.52304274,-0.69007695,0.17846313,-0.63072526,0.15102962,-0.089749,0.3209211,-0.14823742,0.07369484,0.54133445,-0.530794,-0.3999868,-0.24814607,0.043303434,0.049214497,0.12623493,-0.78092873,-0.7339603,-0.48771712,0.1794333,-1.0176585,0.79200983,0.01837975,0.3957201,-0.54312027,0.3235268,-0.40791082,-0.50969106,-0.29312357,-0.14239588,0.20893365,0.2662453,-0.10120833,0.5750339,-0.46133214,0.1798554,-0.38039607,-0.48585644,0.036907766,-0.36652613,-0.08511738,0.63444984,0.89382094,0.8901227,-0.8050844,0.6994938,0.0123586,0.18269068,-0.40832767,0.11853309,0.1912536,-0.14122368,-0.04778941,-0.75293714,-0.1393147,0.054124102,-0.21229088,0.2619867,-0.2647065,-0.63148475,0.85280114,-0.50435466,-1.0095026,-0.12192024,-0.090682335,0.40719396,-0.123172365,0.7986703,0.21540427,-1.104802,1.6523108,-0.27415657,0.25675067,-0.16937165,-0.16839859,-0.21261618,0.30302346,0.31810614,-0.22322589,-0.046299256,0.082044676,-0.040538155,0.43901375,-0.80888283,-0.3664593,0.33287886,0.93493414,-0.42351758,-0.3562507,0.32817766,0.13194305,0.6079518,0.43245247,0.70973945,-0.31156963,0.027720783,0.224726,0.8100068,0.17518067,0.91164434,0.4028381,-0.56213707,-0.5242609,-1.0292093,-0.08641134,0.28308165,0.5490896,0.272359,-0.31936932,0.44191438,0.6909545,0.71451,0.57300156,1.097641,0.15925455,-0.35124952,0.38270426,0.4674692,-0.88227296,0.2725635,0.24843952,-0.38515097,-0.39499766,-0.24151191,-0.47258165,0.57409716,-0.14568847,0.23501325,1.6490529,0.43645898,-0.101771325,0.55578846,-0.42271692,0.048194475,0.056533612,-1.1753882,-0.017923908,-0.6188673,0.4690291,-0.058250416,0.16988099,0.5696467,0.3446186,0.023119954,-0.44391754,-0.95120186,0.70694304,0.06270256,0.08723345,-0.18577608,1.251207,1.0461584,0.30868933,-0.4723414,-0.32835403,0.6856889,-0.0077596605,-0.21682182,0.028126894,0.06890623,-0.36906666,0.9070788,0.3056916,0.27010542,-0.58907425,0.3101983,-0.1592471,-0.9035942,-0.18071091,0.06908009,-0.6531145,-0.8078276,1.0737388,2.1424773,1.0647805,0.33722395,0.11633416,0.11753804,0.21967594,-0.3430045,0.6152516,-0.28068334,0.26910335,-1.0009212,-0.36102232,0.56341475,-0.9529137,-0.016958185,0.013770863,0.29206944,0.81195056,-0.058750723,0.48228157,-0.098716445,-0.5557401,-0.52051324,0.17213158,-0.2620815,-2.109348,0.25924936,-0.6977289,-0.58637965,-0.061080694,-0.07705728,0.48117584,-0.13202915,0.17610185,-0.2206501,1.6440735,0.18204856,-0.83501613,-0.52405536,0.0888707,0.72232306,0.2007674,0.07317701,-0.17537504,-0.6994032,-0.049573306,0.06113236,0.9161394,-0.15229407,-0.02947848,-0.32688338,0.17974004,-0.31114912,-1.0302745,-0.036051065,-0.71463513,-0.15097177,-0.08844641,0.2537528,0.07762608,1.0497032,0.45714328,-0.6347897,-0.21594654,-0.3940131,1.3175266,0.13751975,-0.32426295,-0.591051,-0.3732628,-0.09022183,-0.16863732,0.24147172,-0.28523022,-0.3441074,0.37252167,0.11444038,-0.40720177,0.4096767,0.029408429,0.7332353,0.32466182,-0.08863347,0.59267664,1.0361903,0.51285005,0.082389854,0.2780655,-0.60138935,0.15563059],"result":{"type":"object","properties":{"status":{"description":"The status of the transaction (e.g., 'success', 'pending', 'failed')","type":"string"},"transactionHash":{"description":"The hash of the completed transaction","type":"string"},"transactionLink":{"description":"A link to view the transaction on a block explorer","type":"string"}},"required":["transactionHash","transactionLink","status"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}