{"type":"Python","content":[{"version":"1.0.0","name":"System Hardware Info","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n# \"psutil>=5.9.0\"\n# ]\n# ///\nimport psutil\nimport platform\nfrom typing import List, Optional\nimport subprocess\nimport json\n\nclass CONFIG:\n    pass\n\nclass INPUTS:\n    pass\n\nclass OUTPUT:\n    cpu_info: dict\n    memory_info: dict\n    disk_info: dict\n    gpu_info: List[dict]\n    system_info: dict\n\ndef get_mac_model() -> str:\n    try:\n        result = subprocess.run(['sysctl', 'hw.model'], capture_output=True, text=True)\n        if result.returncode == 0:\n            return result.stdout.split(':')[1].strip()\n    except:\n        pass\n    return \"Unknown Mac Model\"\n\ndef get_gpu_info() -> List[dict]:\n    \"\"\"Get GPU information based on the current platform.\"\"\"\n    try:\n        system = platform.system().lower()\n        if system == \"darwin\":\n            # macOS - use system_profiler\n            try:\n                result = subprocess.run(\n                    ['system_profiler', 'SPDisplaysDataType', '-json'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    data = json.loads(result.stdout)\n                    gpu_info = []\n                    for gpu in data.get('SPDisplaysDataType', []):\n                        gpu_info.append({\n                            \"name\": gpu.get('sppci_model', 'Unknown GPU'),\n                            \"vendor\": gpu.get('sppci_vendor', 'Unknown'),\n                            \"memory_total\": gpu.get('spdisplays_vram', 'Unknown'),\n                            \"metal_supported\": gpu.get('sppci_metal', 'Unknown'),\n                            \"displays\": gpu.get('spdisplays_ndrvs', [])\n                        })\n                    return gpu_info\n            except:\n                pass\n        elif system == \"linux\":\n            # Linux - use lspci\n            try:\n                result = subprocess.run(\n                    ['lspci', '-v', '-mm'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    gpu_info = []\n                    for line in result.stdout.split('\\n'):\n                        if 'VGA' in line or '3D' in line:\n                            parts = line.split('\"')\n                            if len(parts) > 3:\n                                gpu_info.append({\n                                    \"name\": parts[3],\n                                    \"vendor\": parts[1],\n                                    \"type\": \"Discrete\" if '3D' in line else \"Integrated\"\n                                })\n                    return gpu_info\n            except:\n                pass\n        elif system == \"windows\":\n            # Windows - use wmic\n            try:\n                result = subprocess.run(\n                    ['wmic', 'path', 'win32_VideoController', 'get', '/format:csv'],\n                    capture_output=True,\n                    text=True\n                )\n                if result.returncode == 0:\n                    gpu_info = []\n                    lines = result.stdout.strip().split('\\n')[1:]  # Skip header\n                    for line in lines:\n                        if line.strip():\n                            parts = line.split(',')\n                            if len(parts) > 2:\n                                gpu_info.append({\n                                    \"name\": parts[1],\n                                    \"driver_version\": parts[2],\n                                    \"video_memory\": parts[3] if len(parts) > 3 else \"Unknown\"\n                                })\n                    return gpu_info\n            except:\n                pass\n\n    except Exception as e:\n        pass\n\n    # Fallback when no GPU info could be retrieved\n    return [{\"name\": \"Integrated Graphics\", \"details\": \"No GPU information available\"}]\n\ndef run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    \"\"\"\n    Get detailed system hardware information using psutil and platform.\n    \n    Args:\n        c: Configuration object\n        p: Input parameters\n    \n    Returns:\n        OUTPUT: A dictionary containing detailed system hardware information\n    \"\"\"\n    try:\n        # CPU Information\n        cpu_freq = psutil.cpu_freq()\n        cpu_info = {\n            \"physical_cores\": psutil.cpu_count(logical=False),\n            \"logical_cores\": psutil.cpu_count(logical=True),\n            \"frequency\": {\n                \"current_mhz\": cpu_freq.current if cpu_freq else None,\n                \"min_mhz\": cpu_freq.min if cpu_freq else None,\n                \"max_mhz\": cpu_freq.max if cpu_freq else None\n            },\n            \"architecture\": platform.machine(),\n            \"processor_brand\": platform.processor() or \"Unknown\",\n            \"cpu_usage_percent\": psutil.cpu_percent(interval=1)\n        }\n\n        # Memory Information\n        memory = psutil.virtual_memory()\n        swap = psutil.swap_memory()\n        memory_info = {\n            \"total_bytes\": memory.total,\n            \"available_bytes\": memory.available,\n            \"used_bytes\": memory.used,\n            \"percent_used\": memory.percent,\n            \"swap\": {\n                \"total_bytes\": swap.total,\n                \"used_bytes\": swap.used,\n                \"free_bytes\": swap.free,\n                \"percent_used\": swap.percent\n            }\n        }\n\n        # Disk Information\n        disk = psutil.disk_usage('/')\n        disk_info = {\n            \"total_bytes\": disk.total,\n            \"used_bytes\": disk.used,\n            \"free_bytes\": disk.free,\n            \"percent_used\": disk.percent,\n            \"file_system_type\": \"Unknown\"  # This could be enhanced for specific OS\n        }\n\n        # GPU Information using platform-specific approach\n        gpu_info = get_gpu_info()\n\n        # System Information\n        system_info = {\n            \"os_name\": platform.system(),\n            \"os_version\": platform.version(),\n            \"os_release\": platform.release(),\n            \"computer_name\": platform.node(),\n            \"machine_type\": \"Unknown\",\n            \"boot_time\": psutil.boot_time()\n        }\n\n        # Add Mac-specific information if on macOS\n        if platform.system() == \"Darwin\":\n            system_info[\"machine_type\"] = get_mac_model()\n\n        output = OUTPUT()\n        output.cpu_info = cpu_info\n        output.memory_info = memory_info\n        output.disk_info = disk_info\n        output.gpu_info = gpu_info\n        output.system_info = system_info\n        return output\n\n    except Exception as e:\n        raise Exception(f\"Failed to gather system hardware information: {str(e)}\")\n","tools":[],"config":[],"description":"Get detailed system hardware information including CPU, RAM, and disk details","keywords":["system","hardware","cpu","memory","disk","diagnostics"],"input_args":{"type":"object","properties":{},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.055605546,-0.049887806,-0.15750727,-0.16333967,-0.1813819,-0.16777271,-0.5365589,-0.49594852,-0.44971868,0.38191944,-0.5134891,1.2369579,0.16712795,-0.24370646,0.21676423,-0.3557284,-0.1024355,-0.34365323,-0.9195013,-0.20620269,0.19391257,0.31792158,0.076537654,0.10659312,0.24077764,0.11353676,-0.32671613,-0.2304202,-1.2077574,-2.5313873,0.36516124,0.08394683,-0.4788739,-0.242925,0.14710993,-0.4913252,0.07542655,0.37929934,-0.76389855,-0.006646082,-0.32640964,0.27611926,-0.03369279,0.06339094,0.23879308,0.38429675,0.048749946,-0.17815703,1.0090084,0.4543345,0.05717129,-0.2831624,-0.42817938,-0.4049426,-0.22179958,0.5831296,0.043898094,0.04254513,-0.52377796,-0.2583487,-0.26817593,0.42942187,-3.6695278,-0.58345544,0.3125718,0.36487576,0.5681713,0.03831657,-0.37418938,-0.6917854,-0.39857107,-0.016464917,-0.014596747,0.12411102,0.04246889,-0.15258168,0.45244354,0.20862082,0.14092621,-0.5747188,-0.0003542588,0.17017518,-0.24450268,-0.16753128,-0.66597354,0.31286836,-0.32003823,-0.08092521,0.36910796,0.04443816,-0.2050802,-0.6750594,0.36701852,-0.2934839,-0.7242625,0.16215383,-0.4199674,0.6799844,0.14206627,3.1220226,0.8806363,0.5432595,0.73173004,-0.6560101,0.7873979,0.037812516,0.23675774,0.051130176,-0.2839361,-0.07664954,0.2512827,0.23478074,-0.0047115833,0.7458963,0.55691934,0.3237804,-0.977978,-0.09081343,-0.36724356,0.07796888,-0.75424737,-0.02363547,-0.4588911,-0.078437015,-0.030389376,0.045428116,0.12715602,0.3016041,0.3354441,-0.29002857,0.4529642,-0.821802,-0.84231883,-0.03469444,-0.092644975,-0.05944071,0.6891126,0.12792912,0.094899476,-1.0182174,-0.23468885,-0.81007606,1.6024668,0.3392151,0.91069114,0.2098065,0.5836626,-0.029711299,-0.17305829,-0.40775016,-0.321474,0.23202348,0.32621107,0.46135354,0.64593434,-0.2667104,-0.011912663,-0.23338184,-0.59390616,0.35294187,-0.9531318,-0.34430638,0.40903887,-0.09535691,0.25498137,-0.11666235,0.30627698,-0.2877536,0.18243562,0.098708466,0.579509,0.111335285,0.4530225,0.06960732,0.1836347,0.24582066,-0.72729814,0.10129685,-0.18413302,-0.19898206,-0.18759866,0.44337276,0.06960571,-0.7319903,0.3928072,0.020927737,0.4549785,-0.08225522,0.47652265,1.4906886,-0.8396448,1.1488338,-1.1678962,-0.7148444,0.011619853,-0.25627053,-0.072362125,0.96246976,0.5442616,-0.0814441,-0.5567948,-0.08287587,0.13855945,0.028903734,-0.101065435,-0.282529,-0.23765302,-0.46097478,0.33259505,-0.63911283,0.8289467,-0.5203233,-0.10583258,0.9289261,0.0896068,-0.0074254684,0.3048304,0.3541855,0.00036318973,0.37062666,0.16623038,0.015890237,-0.17719871,-0.4541377,-0.83177197,-0.40496844,0.38014066,-0.2622049,-0.81531596,-0.02563512,-0.027263872,0.24817878,0.33341488,0.12507734,0.9123019,0.7707425,-0.08783289,0.29609835,-0.36231098,0.11184522,0.08847615,0.30018634,-0.29944834,-0.0895281,0.85659516,-0.42057735,-0.27743024,-0.016689539,-0.20465632,1.8406558,0.5640508,0.5860565,0.50957304,0.68995667,0.31094357,-0.64570177,-0.6961201,-0.68678254,-0.5140016,1.1093867,-0.19224605,-0.1343585,-0.19774246,0.524801,-0.24981785,0.011497106,-0.4162282,-0.4304645,-0.35949418,-0.18628252,0.32773897,0.7079946,-0.0022032633,0.050525904,-0.04192152,-0.585551,0.58189493,-0.08393455,-0.41855025,0.3081933,0.22935477,0.14311735,0.7384154,0.44533646,-0.9396684,-0.12865935,0.050986778,-0.31318548,-0.43762976,-0.31450766,-0.3484978,-0.5760082,-0.2934179,0.058263846,1.7703305,0.5726299,0.5053951,1.0279393,0.31156513,0.18071282,-0.7881688,0.23139873,-0.5117994,0.55835617,-0.65421456,-0.85392064,0.48265743,0.12766601,-0.7330871,0.48445404,-0.75831693,0.28885823,0.0699072,0.034261465,0.15580058,-0.5186455,0.45253786,0.8608346,-0.035466634,-2.4631789,-0.112001315,-0.10793241,0.5479332,0.126838,-0.5280898,0.73546606,0.057067916,-0.07860643,0.096696064,1.0262995,0.8728609,-0.13014056,-0.5663496,-0.26655802,0.5297792,0.19113164,0.5773077,-0.4323619,-1.2241217,-0.105883494,0.4345504,1.4592798,0.74876016,0.3216537,0.17036034,0.025876448,-0.61377096,-1.4611796,0.26082933,-0.28224343,-0.40922052,0.6073749,0.16204162,-0.40814558,0.031229671,0.7319421,-0.31180453,0.16239753,-0.20139053,1.2215911,-0.14757018,0.5294342,-0.28880155,0.8550843,0.26959562,-0.01324565,0.48405212,0.20343426,0.26246,-0.009267636,0.11954568,-0.33333126,0.19172598,0.50201607,0.90177953,0.13800228,-0.06889762,0.13441756,0.3349599,-0.3741935,0.79465896,-0.48201218,-0.9112213,0.008771792],"result":{"type":"object","properties":{"cpu_info":{"properties":{"architecture":{"type":"string"},"frequency_mhz":{"type":"number"},"logical_cores":{"type":"integer"},"physical_cores":{"type":"integer"}},"required":["physical_cores","logical_cores"],"type":"object"},"disk_info":{"properties":{"free_bytes":{"type":"integer"},"total_bytes":{"type":"integer"},"used_bytes":{"type":"integer"}},"required":["total_bytes","used_bytes","free_bytes"],"type":"object"},"memory_info":{"properties":{"available_bytes":{"type":"integer"},"total_bytes":{"type":"integer"},"used_bytes":{"type":"integer"}},"required":["total_bytes","used_bytes","available_bytes"],"type":"object"}},"required":["cpu_info","memory_info","disk_info"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}