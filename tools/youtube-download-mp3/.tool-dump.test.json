{"type":"Deno","content":[{"name":"Youtube Download MP3","homepage":null,"author":"@@official.shinkai","version":"1.0.0","mcp_enabled":null,"js_code":"import { writeAll } from 'https://deno.land/std/io/mod.ts';\nimport { getHomePath } from './shinkai-local-support.ts';\n\ntype CONFIG = {\n  apiKey: string;\n};\n\ntype INPUTS = {\n  youtubeUrl: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audiofile?: string;\n  rapidDownloadUrl?: string;\n  error?: string;\n};\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const { youtubeUrl, fileName } = inputs;\n\n  // Validate YouTube URL (must be in the form https://www.youtube.com/watch?v=XXXXXXXXXXX)\n  const youtubeRegex = /^https:\\/\\/(www\\.)?youtube\\.com\\/watch\\?v=[\\w-]{11}$/;\n  if (!youtubeRegex.test(youtubeUrl)) {\n    return { error: 'Invalid YouTube URL' };\n  }\n\n  // Build the API URL for RapidAPI\n  const apiUrl = `https://youtube-to-mp315.p.rapidapi.com/download?url=${encodeURIComponent(youtubeUrl)}&format=mp3`;\n\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-rapidapi-host': 'youtube-to-mp315.p.rapidapi.com',\n      'x-rapidapi-key': config.apiKey,\n    },\n    body: JSON.stringify({})\n  });\n\n  if (!response.ok) {\n    return { error: 'Failed to download video' };\n  }\n\n  const data = await response.json();\n  const rapidDownloadUrl = data.downloadUrl;\n\n  // Wait 10 seconds before downloading the file\n  await new Promise(resolve => setTimeout(resolve, 20_000));\n\n  // Download the MP3 file from the rapidDownloadUrl\n  let fileResponse = await fetch(rapidDownloadUrl);\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (fileResponse.status === 404) {\n    await new Promise(resolve => setTimeout(resolve, 15_000));\n    fileResponse = await fetch(rapidDownloadUrl);\n  }\n  if (!fileResponse.ok) {\n    console.error(await fileResponse.text())\n    return { error: 'Failed to download the mp3 file from the provided download URL.', rapidDownloadUrl };\n  }\n\n  // Determine the output file name:\n  // If a fileName is provided, use it. Otherwise, derive it from the download URL.\n  let outputFileName: string = await getHomePath();\n  if (fileName) {\n    outputFileName += '/'+fileName;\n    if (!outputFileName.endsWith('.mp3')) outputFileName += '.mp3'\n  } else {\n    outputFileName += '/audio.mp3';\n  }\n\n  // Save the file to disk in the current working directory\n  // Convert the response into a Uint8Array and return it\n  const arrayBuffer = await fileResponse.arrayBuffer();\n  const fileData = new Uint8Array(arrayBuffer);\n  const outputFile = await Deno.open(outputFileName, { write: true, create: true });\n  await writeAll(outputFile, fileData);\n  outputFile.close();\n\n  return { audiofile: outputFileName, rapidDownloadUrl };\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"apiKey","description":"The API key for accessing the RapidAPI service","required":true,"type":null,"key_value":null}}],"description":"Downloads audio from a YouTube video and saves it as an MP3 file.","keywords":["youtube","mp3","downloader","audio"],"input_args":{"type":"object","properties":{"youtubeUrl":{"type":"string","description":"The URL of the YouTube video to download"},"fileName":{"type":"string","description":"Optional file name for the downloaded MP3"}},"required":["youtubeUrl"]},"output_arg":{"json":""},"activated":false,"embedding":[0.8976886,-0.38228917,0.25007197,-0.030587448,-0.68069285,-0.38676706,-0.7504909,-0.16135521,0.11540595,-0.088820204,0.16484964,1.2539446,-0.5301863,-0.06796555,0.3755024,-0.46369123,0.604348,-0.3643058,-1.2744961,0.09252792,-0.10521424,1.0560526,-0.15572906,0.53460777,-0.12048757,0.15843776,-0.13494399,-0.64086616,-1.0948637,-1.3803715,0.75650364,1.0096263,0.13712624,-0.45199484,0.04394862,-0.41180965,0.3055118,0.53793687,-0.65417206,0.1950901,-0.28580058,-0.68341374,-0.24527127,0.059132397,-0.11756617,0.15116799,0.9892717,-0.12924147,1.2761894,-0.048975274,-0.64881784,-0.14285132,-0.5982376,-0.22298661,-0.24286297,-0.8173301,-0.49673828,0.7599179,0.58332527,0.2337932,-0.38530177,0.096141234,-3.7703073,-0.25955552,0.7304339,0.15876663,0.06945101,-0.44453034,0.46048805,-0.36914718,0.07740167,0.16840264,-0.942713,0.08346684,-0.30470648,-0.32865858,0.12203157,-0.37070194,0.011945821,-0.78603023,0.32208315,0.19890246,0.14648068,-0.29011258,-0.28201458,0.42531836,-0.30416858,0.16038465,-0.34263274,0.045702204,-0.4601133,-0.52224797,0.78383195,0.56807137,-0.15937504,-0.61600167,0.3753895,-0.21089745,0.04458199,2.4637804,0.7389092,0.030684758,0.656798,-0.9037857,-0.108432345,-0.44946662,-0.06634426,-0.06341506,0.47936302,0.0572394,0.8899354,-0.27276972,0.2692027,0.11948427,0.32838023,-0.0047483575,-0.96722394,-0.39804968,0.34755084,0.4197042,-0.2604526,-0.2459194,-0.06223461,-0.403383,-0.8820246,-0.14422843,-0.54405355,0.0017948016,0.54250824,-0.5911737,0.26228842,-0.18088606,-0.6234266,-0.14511868,0.04158751,0.47661358,0.6537156,-1.2228158,0.16177174,-0.09908143,0.30946365,-1.5723827,0.3992951,0.11774384,-0.13674635,0.2884595,-0.20708123,0.80097467,-0.423345,0.13792622,0.14679065,0.22422764,0.29211172,0.09214917,0.98107594,-0.20569423,-0.01217947,-0.46042067,-0.5077302,0.51751274,-0.7626455,-0.13488932,-0.045096725,0.53917277,0.04066637,-0.14593007,0.13398816,0.30401784,0.5744721,-0.015683325,0.41594943,0.20332053,0.0059722606,-0.23160231,0.14078543,-0.6178931,-0.7907164,0.09376626,0.13175863,0.13372204,0.6008905,0.28962553,-0.44790652,-0.19918004,-0.02107441,0.6973175,0.083350375,-0.030280948,0.80100685,1.2163879,0.23203173,1.7641371,-1.6182739,-0.63593835,-0.10201895,0.18577021,-0.08907973,0.9732342,0.2962835,-0.47598618,-0.15589613,-0.13448837,0.37205267,0.13702384,-0.08864456,-0.0027990192,-0.19128133,-0.111600995,-0.46313918,-0.64294213,0.65939665,-0.76087224,0.3706187,0.20049772,-0.33799824,0.41477102,-0.6415062,0.3006037,-0.38157177,-0.053769305,-0.033105947,0.2857,0.30111134,-0.42733267,0.22837432,0.4428795,-0.29516143,-0.48906088,-0.31136337,-0.26879603,1.0938617,0.8950576,0.23887238,0.8313348,1.2862878,0.13269293,-0.5744681,0.37317857,0.47780225,-0.21284088,-0.034183018,0.031003617,-0.036729835,-0.6042784,-0.4080598,-1.114577,0.4490689,0.10936184,-0.1999856,1.1145189,0.8483828,0.76863056,0.8415156,0.24523814,0.9181707,-0.029822052,-2.077792,-0.010052122,-0.08966237,0.4984025,-0.1480815,0.40403974,0.25750124,0.27974316,-0.17168622,-0.35598487,-1.0619984,-0.8597853,0.1917893,0.11076876,-0.16889347,1.0098243,-0.5440728,0.015229046,0.2886166,0.4517068,0.33863676,0.12587199,-0.45228174,-0.1805941,0.8097008,-0.30716082,0.08052874,-0.15336028,-0.044770837,-0.18982323,0.05565309,0.43533942,-0.110975765,0.95757663,-0.12707543,-0.9129509,-0.89564365,0.81945634,1.4400498,0.52073324,0.40942067,-0.10713025,-0.41640005,0.17809664,-0.7908478,0.0848111,-0.09552348,-0.6546608,-0.6215846,-0.43787158,0.42079914,-0.75612825,-0.06189745,0.07606523,0.085515685,0.33277047,0.3756509,-0.058411434,0.57756364,-0.41425887,0.3028083,0.784634,-0.3249787,-2.1289046,-0.69349307,-0.8007356,-0.21141988,-0.33348882,-0.1985612,1.263706,-0.4166835,0.75993836,0.26062912,1.7339841,0.2642955,-0.9535246,-0.55141425,0.9427858,0.6109414,-0.5751451,0.4051299,-0.30231842,-0.94008917,-0.14142366,1.1486077,0.9950111,0.42582136,0.21043909,-0.022396825,-0.537122,-0.32311028,-1.2996986,0.27141553,-0.13647766,-0.7317338,0.31869045,-0.4189347,-0.6973901,0.73270667,0.92441183,-0.19540371,0.11308904,-0.2169942,1.6970215,0.5995491,-0.10420837,0.31139597,0.10219683,0.43408516,-0.3969841,0.36440408,-1.144561,0.14426523,-0.38913336,0.0620609,-0.2205947,0.4440262,0.63238525,1.432899,0.45908397,-0.23082756,1.2339916,0.23512761,0.3793856,0.46516997,0.3762587,-0.19623718,-0.10038775],"result":{"type":"object","properties":{"audiofile":{"description":"The name of the MP3 file saved","type":"string"},"error":{"description":"Error message if the process fails","type":"string"},"rapidDownloadUrl":{"description":"The URL from which the MP3 file was downloaded","type":"string"}},"required":[]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}