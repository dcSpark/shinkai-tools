{"type":"Python","content":[{"version":"1.0.0","name":"Webcam Capture Tool","homepage":null,"author":"@@official.shinkai","mcp_enabled":null,"py_code":"# /// script\n# dependencies = [\n#     \"requests\",\n#     \"numpy==1.26.4\",\n#     \"opencv-python==4.8.0.76\"\n# ]\n# ///\n\nimport cv2\nimport time\nimport base64\nimport numpy as np\nimport os\nimport platform\nfrom typing import Dict, Any, Optional, List\nfrom shinkai_local_support import get_home_path\n\nclass CONFIG:\n    cameraIndex: Optional[int]\n    format: Optional[str]\n\nclass INPUTS:\n    width: Optional[int]\n    height: Optional[int]\n\nclass OUTPUT:\n    imagePath: str\n    width: int\n    height: int\n\nasync def run(config: CONFIG, inputs: INPUTS) -> OUTPUT:\n    \"\"\"\n    Captures a single frame from a local webcam and saves it to disk.\n    \n    Args:\n        config: Configuration with camera index and output format\n        inputs: Input parameters with width and height\n    Returns:\n        OUTPUT object with image path and dimensions\n    \"\"\"\n    # Set defaults\n    camera_index = getattr(config, 'cameraIndex', 0)\n    img_format = getattr(config, 'format', 'png').lower()\n    if img_format not in ('png', 'jpeg', 'jpg'):\n        img_format = 'png'\n\n    width = getattr(inputs, 'width', 640)\n    height = getattr(inputs, 'height', 480)\n\n    # Determine camera source based on platform\n    if platform.system() == 'Darwin':  # macOS\n        camera_source = camera_index\n    else:  # Linux, Windows\n        camera_source = camera_index\n\n    # Open the camera\n    cap = cv2.VideoCapture(camera_source)\n    if not cap.isOpened():\n        raise RuntimeError(f\"Failed to open webcam (index={camera_index}). Please check if the camera is connected and accessible.\")\n\n    try:\n        # Set resolution\n        cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)\n        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)\n\n        # Let the camera warm up and auto-adjust: grab/discard extra frames\n        for _ in range(15):\n            _, _ = cap.read()\n        \n        # Wait a moment so the auto-exposure has time to adapt\n        time.sleep(0.5)\n\n        # Try to capture the final frame\n        ret, frame = cap.read()\n        if not ret or frame is None:\n            raise RuntimeError(\"Failed to capture frame from webcam. Please check camera permissions and settings.\")\n\n        # Optional gamma correction for better brightness\n        gamma = 1.2  # Adjust this value if needed (>1 brightens, <1 darkens)\n        look_up_table = np.array([((i / 255.0) ** (1.0/gamma)) * 255 for i in range(256)]).astype(\"uint8\")\n        frame = cv2.LUT(frame, look_up_table)\n\n        # Get final dimensions\n        final_height, final_width, _ = frame.shape\n\n        # Get home path for writing file\n        home_path = await get_home_path()\n        \n        # Create filename with timestamp\n        timestamp = int(time.time())\n        filename = f\"webcam_capture_{timestamp}.{img_format}\"\n        file_path = os.path.join(home_path, filename)\n\n        # Encode and write to file\n        encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 95] if img_format.startswith('jp') else []\n        result = cv2.imwrite(file_path, frame, encode_param)\n        if not result:\n            raise RuntimeError(\"Failed to write image to disk. Please check disk permissions and space.\")\n\n        # Create output\n        output = OUTPUT()\n        output.imagePath = file_path\n        output.width = final_width\n        output.height = final_height\n\n        return output\n\n    finally:\n        # Always release the camera\n        cap.release() ","tools":[],"config":[{"BasicConfig":{"key_name":"cameraIndex","description":"Which camera index to capture from. 0 is the default. If you only have one camera, use 0.","required":false,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"format","description":"Image format to return (png or jpeg)","required":false,"type":null,"key_value":null}}],"description":"Captures a single frame from a local webcam and returns it as a Base64-encoded image (PNG or JPEG). Example usage with Python + opencv.","keywords":["webcam","capture","camera","image","tools"],"input_args":{"type":"object","properties":{"height":{"type":"number","description":"Requested height of the capture in pixels"},"width":{"type":"number","description":"Requested width of the capture in pixels"}},"required":[]},"output_arg":{"json":""},"activated":false,"embedding":[0.27361855,0.26062548,-0.3522155,-0.29286337,-0.10609296,-0.5348044,-0.54173493,0.755203,-0.49706858,0.65738195,-0.30813992,0.17451653,0.1763676,0.43562546,0.6702804,0.054178946,0.6336248,0.080051675,-0.9065097,-0.50072527,-0.3132846,0.54801536,0.29419354,0.04492478,-0.017764822,0.024551852,-0.5793917,-0.5320779,-0.92547196,-1.4566041,0.54834956,0.30388102,0.80520904,0.2052798,0.24911007,-0.70223033,0.6084099,0.1377541,-0.2862672,-0.15098499,0.09133174,0.014134711,0.14323983,-0.39133084,0.4093596,0.6512312,1.0951568,-0.11450216,1.3198609,-0.15624742,-0.899797,-0.24246572,-0.4667636,-0.6159663,-0.3590888,0.25160694,-0.11143763,-0.7200614,0.042173777,-0.08279085,-0.0054484354,-0.21151894,-2.9569712,0.16706283,0.8211753,0.35561806,-0.3450115,-0.31686366,0.106178746,0.263585,0.115219556,0.35605785,-0.83755755,-0.3290719,0.1350441,-0.6135925,0.57969505,0.58713245,0.61228985,-1.0568628,0.38671118,-0.16737238,0.13920227,-0.112395585,-0.668224,0.08213948,-0.45070323,-0.043343812,0.5898875,-0.009664383,-0.1505095,-0.083122276,-0.27614647,0.014989797,-1.0441507,-0.62294084,-0.25265366,0.4349957,-0.015532024,2.9210236,0.57325435,-0.07196729,0.6111681,-1.0819978,0.2513612,0.16876993,0.2629765,-0.16331351,0.18368456,-0.1956848,0.95477897,-0.05086961,-0.42416164,-0.05864357,1.0564866,-0.090725854,-0.41047102,-0.22076476,-0.25098535,1.1598713,-0.7432178,-0.049803596,-0.30245253,-0.5836745,0.2120222,0.24450485,0.36856318,0.45332366,0.12699696,-0.21188962,0.50528556,-0.09008458,-0.060284853,-0.574891,0.22243252,0.25682104,-0.321438,-0.82269365,0.2415621,-0.5814436,0.028543606,-1.2108568,0.80803126,0.33032382,0.23447102,0.6671234,0.1001651,0.67068243,-0.49919337,-0.69449013,-0.007860314,0.13755716,0.108233444,0.33133063,1.0664121,-0.14446025,0.033408776,-0.14156297,-0.5464019,0.5180852,-0.24496181,-0.21096732,-0.60826254,-0.021747962,0.33301345,-0.5941865,0.13769957,-0.15409759,0.36330813,-0.2627783,0.090138316,-0.33175635,0.15038121,-0.09568255,-1.429864,-0.124082804,-0.5424396,0.48606846,0.10298826,0.24303052,0.6331316,0.9131431,-0.46297467,-0.3058585,-0.33814895,0.0039069224,0.26139414,0.25926703,1.277741,0.5987171,-0.33787754,1.7395359,-0.86547136,-0.17944184,0.44919285,-0.37316585,0.27959716,0.7943817,-0.15506323,-0.32172018,-0.15342847,-1.1619327,-0.049152497,-0.31192,0.14908817,-0.30457896,-0.06375501,0.34164438,-0.2322465,-0.8421487,-0.22991122,-0.0666541,-0.041921735,0.13492486,0.9621552,-0.46352232,-0.06384428,-0.06312047,-0.3667222,0.23911035,0.67372084,0.3651155,0.35589188,-0.70520884,0.3158288,-0.011208318,-0.55598867,0.20098963,-0.8129326,-0.36028904,0.59708667,0.4835987,0.6464415,1.3645622,0.6812892,0.018433072,-0.56405526,0.41975707,-0.10061246,-0.33939478,0.3964134,0.44603294,-0.7785773,-0.17385691,-0.39981434,-1.1513565,0.70084894,-0.40312845,-0.45536333,1.9818583,1.0333883,0.34596887,0.034780458,0.5431446,-0.36249152,0.03668435,-1.8723245,-0.33244184,-0.5848814,0.67369133,0.3497846,0.38329706,0.3670898,0.85859483,-0.37358493,-0.22952305,-1.1112466,-0.8732004,-0.38448057,-0.088986285,-0.028981261,0.94241405,0.27070045,0.078767546,0.0448384,0.28614968,1.1467521,0.9209927,-0.6323856,-0.35193887,0.13236235,0.65236986,0.46140748,0.39282966,-0.36841786,-0.6044701,-0.50618577,0.45640162,-0.011654295,0.60092527,-0.25160062,-0.5776948,-0.097317025,0.47531492,2.0036151,0.31178993,0.11263003,0.159984,-0.47374243,0.5800092,-0.8149273,0.6540429,0.81382513,-0.38330495,-0.0021877289,-0.8016434,1.0974188,-0.0903279,-0.64104426,-0.31622636,-0.109097436,0.3604987,0.5323182,-0.19181558,0.47927538,-0.5170619,-0.070073634,0.453956,0.21334104,-2.1506753,-0.83408177,0.18242916,-0.071079664,-0.3562918,0.038194716,-0.1816241,-0.057764523,-0.041178156,-0.02902259,0.7329402,-0.029016454,-0.85039115,-0.19084683,0.40372172,0.8022789,0.12588261,-0.06506733,-0.7207627,-0.57970864,0.19786689,0.03850835,0.48838833,-0.6103685,-0.021450821,-0.3813824,-0.32990977,-0.350138,-1.1555322,0.17152756,-0.16461629,-0.3392294,0.36039132,0.24425492,-0.2384347,0.654502,0.027188422,-0.63593334,-0.4659027,-0.77524817,1.7495034,-0.1674006,0.78755575,-0.60594696,-0.15473048,0.29191804,0.80716944,0.47265077,-0.81280017,0.6149774,0.5619974,0.2804177,-0.10823534,0.04174434,0.7104245,0.3515815,0.32295936,-0.31314155,0.86523795,0.8378813,0.59600735,0.229031,0.5138535,-1.2085141,-0.3600505],"result":{"type":"object","properties":{"height":{"description":"Actual height of the returned frame","type":"number"},"imageBase64":{"description":"The captured image as a Base64-encoded string","type":"string"},"width":{"description":"Actual width of the returned frame","type":"number"}},"required":["imageBase64","width","height"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}