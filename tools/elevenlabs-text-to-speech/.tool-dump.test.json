{"type":"Deno","content":[{"name":"Eleven Labs Text-to-Speech","homepage":null,"author":"@@official.shinkai","version":"1.0.0","js_code":"import { v4 as uuid } from \"npm:uuid\";\nimport { writeAll } from \"https://deno.land/std/io/write_all.ts\";\nimport { getHomePath } from './shinkai-local-support.ts';\n\ntype CONFIG = {\n  ELEVENLABS_API_KEY: string;\n  voice?: 'Aria' | 'Roger' | 'Sarah' | 'Laura' | 'Charlie' | 'George' | 'Callum' | 'River' | 'Liam' | 'Charlotte' | 'Alice' | 'Matilda' | 'Will' | 'Jessica' | 'Eric' | 'Chris' | 'Brian' | 'Daniel' | 'Lily' | 'Bill';\n};\n\ntype INPUTS = {\n  text: string;\n  fileName?: string;\n};\n\ntype OUTPUT = {\n  audio_file: string,\n  characters_used: number,\n  characters_remaining: number\n};\n\nconst voiceDictionary = {\n    Aria: '9BWtsMINqrJLrRacOk9x',\n    Roger: 'CwhRBWXzGAHq8TQ4Fs17',\n    Sarah: 'EXAVITQu4vr4xnSDxMaL',\n    Laura: 'FGY2WhTYpPnrIDTdsKH5',\n    Charlie: 'IKne3meq5aSn9XLyUdCD',\n    George: 'JBFqnCBsd6RMkjVDRZzb',\n    Callum: 'N2lVS1w4EtoT3dr4eOWO',\n    River: 'SAz9YHcvj6GT2YYXdXww',\n    Liam: 'TX3LPaxmHKxFdv7VOQHJ',\n    Charlotte: 'XB0fDUnXU5powFXDhCwa',\n    Alice: 'Xb7hH8MSUJpSbSDYk0k2',\n    Matilda: 'XrExE9yKIg1WjnnlVkGX',\n    Will: 'bIHbv24MWmeRgasZH58o',\n    Jessica: 'cgSgspJ2msm6clMCkdW9',\n    Eric: 'cjVigY5qzO86Huf0OWal',\n    Chris: 'iP95p4xoKVk53GoZ742B',\n    Brian: 'nPczCjzI2devNBz1zQrb',\n    Daniel: 'onwK4e9ZLuTAKqWW03F9',\n    Lily: 'pFZP5JQG7iQjIQuC4Bku',\n    Bill: 'pqHfZKP75CvOlQylNhV4'\n}\n\nexport async function run(config: CONFIG, inputs: INPUTS): Promise<OUTPUT> {\n  const homePath = await getHomePath();\n  const voice = voiceDictionary[config.voice ?? 'Aria'];\n  if (!voice) {\n    throw new Error(`Invalid voice: ${config.voice}. Valid voices are: ${Object.keys(voiceDictionary).join(', ')}`);\n  }\n  if (inputs.fileName && !inputs.fileName.endsWith('.mp3')) {\n    throw new Error(`Invalid file name: ${inputs.fileName}. File name must end with '.mp3'`);\n  }\n  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voice}?output_format=mp3_44100_128`\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'xi-api-key': `${config.ELEVENLABS_API_KEY}`\n    },\n    body: JSON.stringify({ text: inputs.text })\n  });\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch audio: ${response.status} ${response.statusText}`);\n  }\n  console.log(`${response.status} ${response.statusText}`);\n\n  const fileName = `${homePath}/${inputs.fileName ?? uuid()+'.mp3'}`\n  const file = await Deno.open(fileName, { write: true, create: true });\n  await writeAll(file, new Uint8Array(await response.arrayBuffer()));\n  file.close();\n  const usageURL = 'https://api.elevenlabs.io/v1/user/subscription'\n  const usageResponse = await fetch(usageURL, {\n    headers: {\n      'xi-api-key': `${config.ELEVENLABS_API_KEY}`\n    }\n  });\n  if (!usageResponse.ok) {\n    throw new Error(`Failed to fetch usage: ${usageResponse.status} ${usageResponse.statusText}`);\n  }\n  const usage = await usageResponse.json();\n  return {\n    audio_file: fileName,\n    characters_used: usage.character_count,\n    characters_remaining: usage.character_limit - usage.character_count\n  };\n}\n","tools":[],"config":[{"BasicConfig":{"key_name":"ELEVENLABS_API_KEY","description":"API key for Eleven Labs","required":true,"type":null,"key_value":null}},{"BasicConfig":{"key_name":"voice","description":"The voice used for text-to-speech, options include: Aria, Roger, Sarah, Laura, Charlie, George, Callum, River, Liam, Charlotte, Alice, Matilda, Will, Jessica, Eric, Chris, Brian, Daniel, Lily, Bill","required":false,"type":null,"key_value":null}}],"description":"Converts text to speech using Eleven Labs API and saves the audio as an MP3 file.","keywords":["text-to-speech","audio","Eleven Labs","API"],"input_args":{"type":"object","properties":{"fileName":{"type":"string","description":"The name of the file to save the audio as"},"text":{"type":"string","description":"The text to be converted to speech"}},"required":["text"]},"output_arg":{"json":""},"activated":false,"embedding":[0.28364992,-0.09273045,-0.4642709,-0.38862208,-0.9691163,0.31189686,-0.05643536,0.12932289,-0.033744037,0.1274327,-0.16565539,1.0336089,-0.19664538,-0.3290498,0.039962746,-0.12903313,0.69734055,-0.9037202,-1.8847032,-0.19303465,0.27435058,0.724298,0.13998769,0.6363998,-0.23129344,0.10311682,-0.040152915,-0.27321756,-0.5560215,-1.8693941,0.5946894,0.7737699,0.57370156,0.256512,-0.17428395,-0.002149634,0.22515427,0.43411928,-1.2530309,-0.54719895,0.08673194,-0.60262364,-0.1839281,-0.670629,0.6552348,-0.0588687,0.3465009,0.39947292,1.3231331,0.25677446,-0.020167306,-0.48232502,-0.616592,-0.11563024,0.038443416,-0.5275824,0.35262161,0.62161624,0.13399282,0.3427985,-0.27536002,0.24116331,-3.7504232,-0.06264006,1.0781568,0.074624665,0.19192067,-0.29001644,-0.009530489,-0.1577355,0.8045135,0.08926085,-0.40041104,-0.056428827,0.3672132,-0.8166324,-0.30143327,0.014768109,0.6506624,-0.58650863,0.6962499,0.4120311,-0.09186113,-0.39387548,-0.236848,0.7286034,-0.8408403,-0.41310236,-0.14422533,-0.02137177,-0.286929,-0.8735792,0.58896726,0.3816223,0.13226765,-0.54263836,0.33598608,-0.27928647,0.59378123,3.0418997,0.45247823,-0.19711088,0.22976315,-0.91754305,-0.29530928,-0.66396546,-0.34393838,-0.35842374,0.56845236,0.44672948,0.47791654,-0.7042101,-0.45173928,-0.05946797,0.118059754,0.28933996,-0.710496,0.5529909,0.055124264,0.5638137,-0.54671574,-0.22688709,-0.5789524,-0.055061996,-0.13199371,0.05941179,-0.4600851,0.4230102,0.6307241,0.6305549,0.38406885,-0.07018916,-0.30384925,-0.03561516,0.43366885,-0.43151927,0.66814435,-1.0018013,0.050049633,0.17739439,0.37952858,-1.159018,0.6199469,0.15644342,0.355633,0.55665016,-0.651536,-0.1438522,-0.44904986,0.04146045,0.16654158,-0.401494,-0.22314715,-0.21738036,1.1131426,0.43244225,0.060288124,-0.49620378,-0.92809117,-0.076416194,0.22308417,0.5587608,0.06985171,0.43634814,0.26585653,0.83165854,-0.04165007,0.20254734,0.28239155,0.45152614,-0.25443682,-0.6071872,0.59131694,0.7221594,-0.32507545,-0.8343897,-0.62679183,0.35391414,0.22292344,-0.5109047,0.332789,0.7274126,-0.36196217,0.014332093,0.17677419,-0.011474907,-0.22456145,0.06193896,0.8246656,0.48807454,-0.5713258,1.9306173,-0.40447593,-0.062186807,-0.081351876,-0.26993853,0.20499091,0.8173818,0.1690414,-0.30412897,-0.7436062,-0.12011185,-0.020886037,-0.114078775,-0.38003215,-0.40220043,-0.49202707,0.46092594,0.1455983,-1.0382625,0.29978517,-0.39058962,0.361034,0.26496303,0.094286755,-0.16464819,-0.4521665,-0.20160875,-0.601515,0.1764795,0.02828788,-0.2629409,-0.46331596,-0.7569817,-0.5682474,0.50913036,0.016093597,-0.27577424,-0.54311883,-0.7673199,1.1535658,1.3770186,1.4975895,1.470638,0.9855993,-0.0070891604,0.44749177,0.31574577,0.037986353,-0.1801956,-0.07077816,0.35878125,0.1957501,0.11089648,0.6162026,-1.2037073,-0.14667279,-0.41605228,-0.5719807,1.4422998,0.5181302,0.097148255,0.5137087,0.06709236,0.8033491,-0.13220292,-1.2879108,-0.1272141,-0.2347849,0.83500814,0.10968598,0.6388218,0.55949366,0.72119254,0.42311296,-0.31847507,-0.57598,-0.6609746,-0.02578364,-0.054041434,0.49020538,-0.1146038,-0.1898408,-0.23145673,0.76028657,0.06723743,-0.096557885,-0.042746417,-0.36099768,-0.51009345,0.47937042,0.118621215,-0.3829508,0.35986328,-0.26548153,-0.6796403,-0.21316206,-0.38198486,-0.7019262,0.34081748,-0.33433002,-0.32724842,-0.8092511,0.14510727,1.1402179,0.56504416,-0.37824127,0.6151134,0.18532196,-0.6788821,-0.58548516,0.18828937,-0.15956011,-0.1413692,-0.114002876,0.09376336,-0.0050945655,-0.3520067,0.04108748,0.72977906,0.2824394,0.75439525,-0.05102714,0.10900448,0.94332725,-0.06094265,0.23469669,0.14076956,0.24903773,-1.7523863,-0.6333142,-0.49637878,0.4446054,-0.2814495,-0.30049664,0.6030213,-0.64997506,0.050875083,-0.28506792,1.1334562,0.408377,-0.8095175,-0.22168726,0.33890894,0.8352356,0.5577542,0.06977405,-0.2588715,-0.69717497,-0.15585066,0.5947561,1.1179693,0.032223016,0.04725738,0.0057259575,0.022094537,-0.49945068,-1.6212342,0.11704897,-0.06801928,-0.7570822,0.7807062,-0.54265594,0.05618396,0.57524085,0.8386632,-0.070284076,-0.5191093,-0.5997806,1.5139004,0.053236768,-0.33497524,0.031145632,0.44584733,-0.37654668,-0.3963502,0.37280405,-1.018112,-0.13694105,-0.099808566,0.2672819,-0.21169582,0.29967844,-0.10455321,0.6154593,0.34499407,-0.3519487,0.8303504,0.2838204,0.5466855,0.5284868,-0.17938082,0.070210226,0.03062889],"result":{"type":"object","properties":{"audio_file":{"description":"The file path to the generated audio file","type":"string"},"characters_remaining":{"description":"The number of characters remaining in the user's limit","type":"number"},"characters_used":{"description":"The number of characters used in the request","type":"number"}},"required":["audio_file","characters_used","characters_remaining"]},"sql_tables":[],"sql_queries":[],"file_inbox":null,"oauth":[],"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}