{"type":"Python","content":[{"version":"1.0.0","name":"arxiv-search","homepage":null,"author":"@@official.shinkai","py_code":"# /// script\n# dependencies = [\n#   \"requests\",\n#   \"arxiv>=1.4.7\",\n#   \"python-dateutil\"\n# ]\n# ///\n\nimport arxiv\nimport json\nfrom typing import List, Dict, Any\nfrom dateutil import parser\n\nclass CONFIG:\n    # For this tool, we don't strictly need configuration fields,\n    # but we can keep them if you plan to store e.g. environment variables.\n    pass\n\nclass INPUTS:\n    query: str  # The search query string\n    max_results: int = 10\n    date_from: str = \"\"\n    date_to: str = \"\"\n    categories: List[str] = []  # A list of category strings\n\nclass OUTPUT:\n    papers: List[Dict[str, Any]]\n    total_results: int\n\nasync def run(c: CONFIG, p: INPUTS) -> OUTPUT:\n    \"\"\"\n    Search for papers on arXiv with advanced filtering.\n    \"\"\"\n    # For safety, clamp max_results\n    max_results = max(1, min(p.max_results, 50))\n\n    # If categories were provided, combine them into a single query\n    search_query = p.query.strip()\n    if p.categories:\n        cat_filter = \" OR \".join(f\"cat:{cat.strip()}\" for cat in p.categories)\n        search_query = f\"({search_query}) AND ({cat_filter})\"\n\n    search = arxiv.Search(\n        query=search_query,\n        max_results=max_results,\n        sort_by=arxiv.SortCriterion.SubmittedDate\n    )\n\n    # Date filters\n    date_from = None\n    date_to = None\n\n    # Attempt to parse date range if provided\n    if p.date_from:\n        try:\n            date_from = parser.parse(p.date_from)\n        except Exception as e:\n            # not fatal, just ignore\n            pass\n\n    if p.date_to:\n        try:\n            date_to = parser.parse(p.date_to)\n        except Exception as e:\n            pass\n\n    papers = []\n    client = arxiv.Client()\n    count = 0\n\n    def is_within(date, start, end):\n        if not date:\n            return True\n        if start and date < start:\n            return False\n        if end and date > end:\n            return False\n        return True\n\n    for result in client.results(search):\n        if is_within(result.published, date_from, date_to):\n            short_id = result.get_short_id()\n            # Convert authors and categories to lists before adding to dictionary\n            authors_list = [str(a.name) for a in result.authors]\n            categories_list = list(result.categories)\n            \n            papers.append({\n                \"id\": short_id,\n                \"title\": result.title,\n                \"authors\": authors_list,  # Now explicitly a list of strings\n                \"abstract\": result.summary,\n                \"published\": result.published.isoformat(),\n                \"categories\": categories_list,  # Now explicitly a list\n                \"pdf_url\": result.pdf_url\n            })\n            count += 1\n            if count >= max_results:\n                break\n\n    out = OUTPUT()\n    out.papers = papers\n    out.total_results = len(papers)\n    return out ","tools":[],"config":[],"description":"Search for papers on arXiv with optional date range and category filters","keywords":["arxiv","search","papers","research","academic","scientific"],"input_args":{"type":"object","properties":{"categories":{"type":"array","description":"List of category filters (e.g. [cs.LG])","items":{"type":"string","description":"Category filter"}},"date_to":{"type":"string","description":"Latest publication date in a parseable date string (optional)"},"date_from":{"type":"string","description":"Earliest publication date in a parseable date string (optional)"},"max_results":{"type":"number","description":"Maximum number of results to return"},"query":{"type":"string","description":"Search query string"}},"required":["query"]},"output_arg":{"json":""},"activated":false,"embedding":[0.34894788,0.88445,-0.37300754,-0.22076483,-0.17697163,-0.5345679,-0.085635155,-0.79086506,-0.17410946,-0.34712172,-0.26372203,0.33773062,0.31200647,0.18278101,0.6410388,-0.028749801,0.13996251,-0.09490329,-1.1786504,0.082557805,0.5303514,0.74004495,0.23061287,0.13481471,0.19042563,0.007892267,-0.19603118,0.019251123,-0.8528901,-2.3221538,0.09565759,-0.015786782,-0.60136205,-0.13516273,0.008803681,-0.68049335,-0.22185534,0.21148503,-0.09136584,-0.367177,0.20003194,0.39185712,0.013888821,-0.053733602,0.42286715,-0.3666607,-0.06727114,-0.2804579,1.0246787,0.32599407,-0.46844915,-0.035654474,-0.55641234,-0.06768157,-0.262594,0.12079404,0.2832465,0.028267343,-0.15255411,0.2447268,0.54266894,0.6954487,-4.3511934,0.46889597,0.13291354,0.2661549,0.3131613,-0.030210052,-0.049632423,0.20253173,0.010865204,0.10126889,-0.19626176,0.21960467,-0.32943043,-0.121019274,0.13564973,0.19453824,0.10651325,-0.25892785,-0.33046022,-0.072916955,-0.014621785,0.18301192,-0.31868765,0.4570935,-0.75581974,0.114382744,0.43348023,-0.22312047,0.0063707177,-0.12896082,0.045479674,-0.03537397,-0.19524303,0.29090193,-0.08650031,0.052221805,0.29433778,3.5911546,0.75738925,0.13269699,0.92953825,-0.4563736,0.39384338,-0.6303248,-0.5085827,-0.21392678,-0.2646469,0.09887996,-0.13308896,-0.6394471,0.12715517,-0.43589532,0.12959011,0.511256,-0.46257973,-0.11876008,-0.5347447,0.26310903,-1.0487187,0.14905974,-0.086378135,-0.13213024,0.19022986,-0.00646621,-0.4372594,0.28308523,0.049085338,-0.39924884,0.15238607,-0.2253361,-0.56797546,-0.119284965,0.13472989,-0.0014349297,0.61246604,-0.40801126,0.3356224,-0.55761015,-0.012925297,-1.249203,1.2744224,-0.22985354,0.924498,0.20277983,-0.6596253,0.34691295,-0.7973008,0.0056146774,-0.09176017,0.33772248,0.20598994,0.09557408,1.3230379,-0.40901712,-0.30363494,-0.07773134,-0.37965855,0.049608156,0.07858658,-0.46556488,0.96731716,1.1421641,0.05216006,-0.2234192,0.34828475,0.34506214,0.41216034,-0.19433852,0.30151516,-0.12571615,0.583678,0.71438706,-0.037180737,0.5686168,-0.20448348,0.004982792,0.51906395,-0.7006303,0.24539627,0.46547705,-0.07627691,-0.28280225,-0.07280959,0.37113816,0.37132457,-0.11630372,0.421314,0.7477428,-0.5876195,1.7293193,-1.3365645,-0.80812687,-0.23079416,0.023927886,-0.21764421,0.3173278,0.61931753,-0.03782907,-0.45095378,0.06261863,-0.053407427,0.5688934,0.25468698,-0.6490454,0.47072053,-0.20680277,0.12701386,-0.36012757,0.14324541,0.082084246,-0.012038454,0.20363045,0.31658557,0.8090048,0.21843538,-0.0180096,0.33388692,0.69606817,-0.17410636,0.18000343,-0.22063158,-0.62148714,-0.346437,-0.08519444,-0.31592882,-0.3840068,0.095803544,-0.16078718,0.3567003,-0.022436282,1.0674878,0.5497929,0.2566408,-0.19926804,-0.066540204,0.12796009,0.48092803,-0.7000489,0.71797615,-0.069170564,-0.30026418,-0.45192766,0.34696794,-0.41217136,-0.027474463,0.16476065,-0.2007134,1.5931823,0.5429906,-0.5547749,0.12042129,-0.019862153,-0.40132666,0.059075568,-1.5313233,0.15679948,0.05386039,0.52875197,0.022451915,0.099397115,0.4198229,0.1758397,-0.04285577,-0.37847373,-0.3669861,0.097822905,0.29541206,-0.4152053,-0.089436136,0.44998395,-0.4158994,0.21088201,0.21994804,0.16571964,0.65579844,-0.27170518,-0.42283106,-0.2295302,-0.0021295175,0.033394717,0.34000203,0.25209016,-0.6539832,-0.31381065,0.18330684,-0.16293544,-0.63418627,-0.25336,-0.515171,-0.29831606,0.13092126,-0.57246083,1.7539302,-0.2520502,0.5000318,0.5864518,-0.49053377,0.44887024,0.10555474,0.043397605,0.03717222,0.25963393,-0.67801595,-0.35421053,0.6433538,-0.31016263,-0.2650637,0.5037415,-0.6214712,-0.4237828,0.12215768,-0.37914956,0.24386418,-0.7923349,0.24067882,0.46612176,-0.092157766,-2.0882332,-0.3603397,0.18967348,0.4964923,-0.27638572,-0.44730464,0.29169866,0.084694125,0.6405814,-0.504913,1.4851844,0.2343813,0.47302046,-0.33443037,-0.14030781,0.47611555,-0.77369225,0.42505178,-0.019781493,-0.8140944,0.081080854,0.2966836,1.6480422,0.24691354,0.15324289,-0.23381951,0.23558167,-0.6814598,-0.8331686,0.6909977,0.45168513,-0.2994824,0.74830925,0.102537766,-0.45695803,0.8333774,0.68124235,-0.022489144,0.14026581,0.025008477,1.7170686,-0.138336,-0.33075792,-0.11696012,0.034694467,-0.062001497,0.41247928,-0.3743751,-0.5114662,0.5044785,-0.092890866,-0.025107715,-0.45778927,0.43487543,-0.20015125,0.2773704,0.115513645,-0.17685336,0.66651523,0.8104084,-0.18530008,-0.13767087,-0.47944,-1.2010466,-0.5109113],"result":{"type":"object","properties":{"papers":{"items":{"properties":{"abstract":{"type":"string"},"authors":{"items":{"type":"string"},"type":"array"},"categories":{"items":{"type":"string"},"type":"array"},"id":{"type":"string"},"pdf_url":{"type":"string"},"published":{"type":"string"},"title":{"type":"string"}},"type":"object"},"type":"array"},"total_results":{"type":"number"}},"required":["papers","total_results"]},"sql_tables":null,"sql_queries":null,"file_inbox":null,"oauth":null,"assets":null,"runner":"any","operating_system":["linux","macos","windows"],"tool_set":""},false]}